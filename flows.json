[
    {
        "id": "941765e8bb2c32d6",
        "type": "tab",
        "label": "Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e961334cde89144c",
        "type": "tab",
        "label": "gpt queue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f297cec495c6b8be",
        "type": "tab",
        "label": "Benchmark",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "064c17312433ce15",
        "type": "tab",
        "label": "Document",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eeba88e77478c844",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8dfc33ccdf4bd813",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d295481a52b8fd83",
        "type": "subflow",
        "name": "squash history",
        "info": "\n<p>Combines history data from the start index and most recent index into a new history array.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">start <span class=\"property-type\">number</span></dt>\n    <dd>The index of the starting history value. It can be set as an environment variable in the subflow properties. Default value is 0.</dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>history <span class=\"property-type\">array</span></dt>\n    <dd>An array containing two elements - the starting history value based on the specified index, and the most recent history value.</dd>\n</dl>\n<h3>Details</h3>\n<p>The subflow first retrieves the 'start' value from the environment variables. The starting history value is fetched based on this index, and the latest history value is retrieved as well. The function then creates a new array containing these two values and sets it as the output message 'history' property.</p>\n",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 40,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a25be0e127fc9e24",
        "type": "subflow",
        "name": "stash pop",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "depth",
                "type": "num",
                "value": "1"
            },
            {
                "name": "apply",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "f9e0ec91.e767e",
        "type": "subflow",
        "name": "Minify JSON",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "237429fb2a5a7712",
        "type": "subflow",
        "name": "confgpt",
        "info": "<p>Writes <code>msg.payload</code> to a file, either adding to the end or replacing the existing content.\n    Alternatively, it can delete the file.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be updated can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n    <dt class=\"optional\">encoding <span class=\"property-type\">string</span></dt>\n    <dd>If encoding is configured to be set by msg, then this optional property can set the encoding.</dt>\n</dl>\n<h3>Output</h3>\n<p>On completion of write, input message is sent to output port.</p>\n<h3>Details</h3>\n<p>Each message payload will be added to the end of the file, optionally appending\na newline (\\n) character between each one.</p>\n<p>If <code>msg.filename</code> is used the file will be closed after every write.\nFor best performance use a fixed filename.</p>\n<p>It can be configured to overwrite the entire file rather than append. For example,\nwhen writing binary data to a file, such as an image, this option should be used\nand the option to append a newline should be disabled.</p>\n<p>Encoding of data written to a file can be specified from list of encodings.</p>\n<p>Alternatively, this node can be configured to delete the file.</p>",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "7be18892c7b30810"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 140,
                "wires": [
                    {
                        "id": "0e8a88234ef86bb0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "auto4",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02409038fd9362ee",
        "type": "subflow",
        "name": "step by step",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "587cc92797acd5f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 180,
                "wires": [
                    {
                        "id": "4c18e4ef1378f85f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 320,
            "y": 40,
            "wires": [
                {
                    "id": "b9ef7df646a61456",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "520a10812173e701",
        "type": "subflow",
        "name": "stash",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "clear",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "50df1246bdaf5119",
        "type": "subflow",
        "name": "smartcoder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "7cfc8986c5d0b0e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 560,
                "wires": [
                    {
                        "id": "1eaa0d485c0ce940",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 40,
            "wires": [
                {
                    "id": "ef3a21ae34f6475f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7d91a580a2c7c19",
        "type": "subflow",
        "name": "codeblocks",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "blockTypes",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "f8d5a5a4f2b87c52",
        "type": "subflow",
        "name": "flow",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 120,
                "y": 340,
                "wires": [
                    {
                        "id": "95f92e2896b1f816"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 540,
                "wires": [
                    {
                        "id": "6f3eb41d26f826f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "inputLabels": [
            "flow to check"
        ],
        "outputLabels": [
            "valid flow"
        ],
        "status": {
            "x": 420,
            "y": 60,
            "wires": [
                {
                    "id": "9d93e67707347e32",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1254546b0e9fb57c",
        "type": "subflow",
        "name": "bundle formatting",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 260,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "f6dd154f310aa615",
        "type": "subflow",
        "name": "engineer",
        "info": "",
        "category": "persona prompt",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "9f31d45ecb1d3482",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "schema",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "63dba49296c3a9e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "cf072eee9e78f126",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "13d4ac7b7c9898ae",
        "type": "subflow",
        "name": "codeblock",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "a5f18db0d45889f2",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7da9bb553d44f56a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "bb67c6f583a80cc4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "f16c08b0c74d892d",
        "type": "subflow",
        "name": "bundle prompt",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red-dashboard/ui_toast.png"
    },
    {
        "id": "b53b3b7e24a3e4e7",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "coders",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "15470b359beaf8ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 320,
                "wires": [
                    {
                        "id": "8b97ebde3ffd9ecc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "str",
                "value": "3"
            }
        ],
        "meta": {
            "module": "gpt-subflows",
            "version": "0.0.1"
        },
        "color": "#DDAA99",
        "status": {
            "x": 280,
            "y": 40,
            "wires": [
                {
                    "id": "f89c539d2436d4b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "3624ea24a7bdeaa4",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "review prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8843d7f92416211de9ebb963ff4ce28125932878",
        "type": "subflow",
        "name": "Transform nodes into subflows",
        "info": "<details>\n  <summary>Click me</summary>\n\n  ### Heading\n  1. Foo\n  2. Bar\n     * Baz\n     * Qux\n\n  ### Some Code\n  ```js\n  function logSomething(something) {\n    console.log('Something', something);\n  }\n  ```\n</details>",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 220,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Node List"
        ],
        "outputLabels": [
            "Subflows"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "a9cb3f5fc1c3e1b8",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": []
            }
        ]
    },
    {
        "id": "bf9fecd68e29a50a",
        "type": "subflow",
        "name": "analyzer",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "64cb2cf8b2438912"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 380,
                "wires": [
                    {
                        "id": "ec6d7c68553d97b3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48101654b91252fc",
        "type": "subflow",
        "name": "planner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": []
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bfe4dee01d61e0c2",
        "type": "subflow",
        "name": "scanner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "d1331f209c505041"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 160,
                "wires": [
                    {
                        "id": "73176ac6586b6585",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "657c8f0e9df6242e",
        "type": "subflow",
        "name": "summariser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 40,
                "wires": [
                    {
                        "id": "684254331f69bb61"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 480,
                "wires": [
                    {
                        "id": "036e8e789347f95f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d66a7c662b619014",
        "type": "subflow",
        "name": "multigpt",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "8e5d03e6e7f3bb64"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 360,
                "wires": [
                    {
                        "id": "20a76c3c2e5a2985",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "n",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "788598196e86646c",
        "type": "subflow",
        "name": "systemGPT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "bccea17a75c2795e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "bccea17a75c2795e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0da2717d76f314c6",
        "type": "subflow",
        "name": "describe node",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "8b156f3f879bad59"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 860,
                "wires": [
                    {
                        "id": "4c1404f306ef020a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c8ed6299a7db1bac",
        "type": "junction",
        "z": "e961334cde89144c",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ]
    },
    {
        "id": "bb3eea2eeff7495c",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ]
    },
    {
        "id": "7933d60af84f3844",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 980,
        "y": 440,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ]
    },
    {
        "id": "6d9fb5aa70b87fab",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1240,
        "y": 440,
        "wires": [
            [
                "f9ed70c1b56a8ed7"
            ]
        ]
    },
    {
        "id": "56eeed36b16f302e",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "1c58af75659287c4",
                "16e7fb7b2bc1fd73",
                "17c4c2465ba4c355"
            ]
        ]
    },
    {
        "id": "1eb0bc16cb04fae2",
        "type": "junction",
        "z": "657c8f0e9df6242e",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ]
    },
    {
        "id": "97cebd272ffda79e",
        "type": "junction",
        "z": "0da2717d76f314c6",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "66242fd6d641dc63"
            ]
        ]
    },
    {
        "id": "66242fd6d641dc63",
        "type": "junction",
        "z": "0da2717d76f314c6",
        "x": 440,
        "y": 740,
        "wires": [
            [
                "80e5304f2999ce6b"
            ]
        ]
    },
    {
        "id": "07ae0da70cee4ba6",
        "type": "function",
        "z": "d295481a52b8fd83",
        "name": "\"History Filter\"",
        "func": "msg.history = [msg.history[env.get('start')],msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            []
        ],
        "info": "This is a function node that takes an input message and sets a property called \"history\" to an array containing the element at index \"start\" and the last element of the \"history\" array of the input message. The modified message is then passed to the node's output."
    },
    {
        "id": "40226d5093552176",
        "type": "function",
        "z": "a25be0e127fc9e24",
        "name": "\"Pop Function Node\"",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nlet depth = env.get('depth')\n\nwhile (depth){\n    const stash = msg.stash[key].pop()\n    if (env.get('apply')){\n        msg[key] = stash;\n    }\n    // @ts-ignore\n    depth--;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ],
        "info": "This is a function node in Node-RED called \"pop\". It pops items from an array stored in the node's context (msg.stash) and outputs the last popped item on msg[key]. It has parameters for the key and depth of the array. If the apply flag is set, the popped item will be stored on the msg object."
    },
    {
        "id": "ffdcd61d.64da38",
        "type": "function",
        "z": "f9e0ec91.e767e",
        "name": "\"Minify JSON Function Node\"",
        "func": "const inputList = Array.isArray(msg.history) ? msg.history : [];\n\ninputList.forEach((item) => {\n  item.content = item.content.replace(/```.*\\n([\\s\\S]*?)\\n```/g, (match, codeBlock) => {\n      try {\n          const regex = /(\\n|\\\\n|\\r)\\s*/g; // note the 'g' flag for global replacement\n          return '```json\\n' + codeBlock.replace(regex, ''); + '\\n```';\n      } catch (error) {\n          return match;\n      }\n  });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            []
        ],
        "info": "This is a custom function node that takes in a message object and minifies any JSON content in its `history` property. It first checks if `msg.history` is an array and assigns it to `inputList`. Then, for each item in `inputList`, it looks for content enclosed in triple backticks (code block) with a language identifier of `json` and removes any whitespace characters (including new lines) from it. The updated `msg` object is returned at the end."
    },
    {
        "id": "0e8a88234ef86bb0",
        "type": "link call",
        "z": "237429fb2a5a7712",
        "name": "gpt queue",
        "links": [
            "f2342d49916a4e23"
        ],
        "linkType": "static",
        "timeout": "36001",
        "x": 370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7be18892c7b30810",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "set-env-msg-property",
        "rules": [
            {
                "t": "set",
                "p": "auto4",
                "pt": "msg",
                "to": "auto4",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "0e8a88234ef86bb0"
            ]
        ],
        "info": "This `change` node sets the value of the `auto4` property on the incoming message object to the value of the `auto4` environment variable. The modified message is then sent to the node connected to its output wire."
    },
    {
        "id": "587cc92797acd5f3",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "Template Last Line.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "94270be7a7e81ed1"
            ]
        ],
        "info": "This node receives a message with data in the \"payload\" field. It converts the data into a string using a Handlebars template and adds a new line at the end with a specific message. The final string is sent as the output to the next node in the flow."
    },
    {
        "id": "94270be7a7e81ed1",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "02498ebad85fca04"
            ]
        ]
    },
    {
        "id": "4c18e4ef1378f85f",
        "type": "subflow:d295481a52b8fd83",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc85a1ac4b1b979e",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "\"Template\"",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "now put it all together according to the original question.\n\nbe sure to obey the formatting rules.",
        "output": "str",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "5392474c6ec89e72"
            ]
        ],
        "info": "This is a Template node. It takes in a message and combines it with a pre-defined template using the Handlebars templating language. The resulting string is then outputted to the next node in the flow."
    },
    {
        "id": "02498ebad85fca04",
        "type": "switch",
        "z": "02409038fd9362ee",
        "name": "Env Switch",
        "property": "bundle",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "bc85a1ac4b1b979e"
            ],
            [
                "4c18e4ef1378f85f"
            ]
        ],
        "info": "This is a switch node that checks if a variable named \"bundle\" exists in the environment of Node-RED. If the variable exists and its value is true, it will output the message to the first output. Otherwise, it will output the message to the second output."
    },
    {
        "id": "5392474c6ec89e72",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "b9ef7df646a61456",
        "type": "status",
        "z": "02409038fd9362ee",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dd186aa6a265fc5d",
        "type": "function",
        "z": "520a10812173e701",
        "name": "\"Stash Key Value\"",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nmsg.stash[key].push(JSON.parse(JSON.stringify(msg[key] || '')))\nif (env.get('clear')) {\n    msg[key] = undefined;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ],
        "info": "This is a custom function node named \"stash key value\". It takes a message object and stores the value of a specified key in a \"stash\" object. If the specified key doesn't exist in the stash, it creates an empty array. It also provides an option to clear the original key's value from the message object."
    },
    {
        "id": "31d7c39f9a6c8c97",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "\"Merge Answers\"",
        "func": "msg.history = [msg.history[0], msg.history[1]]\n\nmsg.history[1].content = `\nhere are ${msg.payload.length} possible solutions:\n${msg.payload.map((t, i) => `\n---${i} START---\n${t}\n---${i} END---\n`).join('\\n')}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "b446b41f8155ed4f"
            ]
        ],
        "info": "This is a function node in Node-RED called \"merge answers\". It takes input from the previous node and merges the first 2 objects in the input message history and the payload to create a new message. The node then formats the payload and sets it as the content of the second object in the message history. Finally, it outputs the modified message to the next node."
    },
    {
        "id": "83096e44fc2c289e",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "Template Node",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert reviewer and researcher.\n\nThe results above have yet to be deployed.\n\n1 List the issues with each option, ranking each by severity focus on:\n1.1 problems that may prevent it from working.\n1.2 failures to deliver on the specifications of the request.\n2 List what each option gets right, and which takes the overall best approach.\n3 synthesize a complete and robust solution.\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "2fba30a10931ca0c"
            ]
        ],
        "info": "This node is a template node that uses handlebars/mustache syntax to create a multi-line message that gives instructions for reviewing options and synthesizing a complete solution. It takes the payload message as input and outputs a string message."
    },
    {
        "id": "189d162c7a1def8e",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "\"Multi-Copy\"",
        "func": "const num_copies = msg.num_copies || env.get(\"num_copies\") || 1;\nconst copies = [];\nfor(let i = 0; i < num_copies; i++){\n    copies.push(msg.payload);\n}\n\nmsg.payload = copies;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "95fe1a4f7ccf06fb"
            ]
        ],
        "info": "This function node creates multiple copies of the input message payload based on the value of `num_copies` parameter in the message or an environment variable. The copied payloads are sent out as an array in the output message payload."
    },
    {
        "id": "95fe1a4f7ccf06fb",
        "type": "split",
        "z": "50df1246bdaf5119",
        "name": "Split Node.",
        "splt": "",
        "spltType": "msg",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "4604e40b24b33cb3"
            ]
        ],
        "info": "This is a node that splits a message into multiple messages. The splitting logic can be either a fixed number of messages or determined by the length of an array in the incoming message. The resulting messages are sent to the connected wires for further processing."
    },
    {
        "id": "0e3ce1809b54fad7",
        "type": "join",
        "z": "50df1246bdaf5119",
        "name": "Array Join Node",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "31d7c39f9a6c8c97"
            ]
        ],
        "info": "This is a node-red join node that combines multiple messages into an array. The messages are joined based on their topic and the resulting array is outputted. The node has options for setting a timeout and reducing the array, but these are not utilized in this specific instance."
    },
    {
        "id": "ef3a21ae34f6475f",
        "type": "status",
        "z": "50df1246bdaf5119",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1c0f8158f5a82cc5",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "\"catch schema failure\"",
        "scope": [
            "86c1b1c593519bdf"
        ],
        "uncaught": false,
        "x": 360,
        "y": 200,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ],
        "info": "The catch node with id \"1c0f8158f5a82cc5\" catches any errors or exceptions thrown in the flow when it is triggered by events in the scope of node \"86c1b1c593519bdf\". When such an error or exception is caught, the node sends the message to the node with id \"b34ce9b36761fd82\". The name of the node is \"schema failure\". The \"uncaught\" setting is specified as \"false\"."
    },
    {
        "id": "ec40afea20b4c218",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "\"Catch-Empty-Multi\"",
        "scope": [
            "eef683f2fb7c7a34"
        ],
        "uncaught": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ],
        "info": "This is a Catch node in Node-RED. It is used to catch any errors that may occur in the flow and prevent them from stopping the entire flow. The node has the ability to catch empty messages or multiple messages simultaneously. The output of this node will be sent to the connected wires in case of any errors."
    },
    {
        "id": "b34ce9b36761fd82",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "Handlebars Template node.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{{error.message}}}",
        "output": "str",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "8e7320419df91165"
            ]
        ],
        "info": "This is a Template node. It receives a message, applies a Handlebars template to the 'payload' field of the message, and outputs the result string to the next node. In this specific example, the node is being used to create an error message by injecting the 'error.message' field into the Handlebars template."
    },
    {
        "id": "8e7320419df91165",
        "type": "subflow:520a10812173e701",
        "z": "50df1246bdaf5119",
        "name": "stash temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "165d1423d6343a0a"
            ]
        ]
    },
    {
        "id": "165d1423d6343a0a",
        "type": "change",
        "z": "50df1246bdaf5119",
        "name": "\"Set Temp Node\"",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 240,
        "wires": [
            [
                "0b7031b9cee904dc"
            ]
        ],
        "info": "The \"change\" node sets a property \"temperature\" to a value of 0.3 in the input message. The modified message is then passed to its output."
    },
    {
        "id": "0b7031b9cee904dc",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "96069e8a8601f3f2"
            ]
        ]
    },
    {
        "id": "96069e8a8601f3f2",
        "type": "subflow:a25be0e127fc9e24",
        "z": "50df1246bdaf5119",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "bde788de03976b97"
            ]
        ]
    },
    {
        "id": "bde788de03976b97",
        "type": "subflow:d295481a52b8fd83",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "447868e0429fdc8c",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "50df1246bdaf5119",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "eef683f2fb7c7a34"
            ]
        ]
    },
    {
        "id": "eef683f2fb7c7a34",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "Payload Filter Node.",
        "func": "console.log('parsed code:', msg.payload)\nmsg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nif (msg.payload.length > 1){\n  throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')\n}\n\nif (msg.payload.length < 1){\n  throw new Error(`no code blocks detected, please obey the formatting instructions:\\n${msg.format}`)\n}\n\nmsg.payload = msg.payload[0].content;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "393f19cb21285e5c"
            ]
        ],
        "info": "This function node filters the payload for JSON and JavaScript types and preprocesses the JSON string to escape unescaped double quotes and backslashes. Then it checks if there is only one code block in the payload and throws an error if there is more than one or none detected. Finally, it sets the payload to the content of the code block and passes it on."
    },
    {
        "id": "393f19cb21285e5c",
        "type": "switch",
        "z": "50df1246bdaf5119",
        "name": "Non-empty Switch Node.",
        "property": "schema",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 480,
        "wires": [
            [
                "86c1b1c593519bdf"
            ],
            [
                "1eaa0d485c0ce940"
            ]
        ],
        "info": "This is a switch node in node-red. It checks the value of the `schema` property of the incoming message. If the property is not empty, it sends the message to the first output. Otherwise, it sends it to the second output."
    },
    {
        "id": "86c1b1c593519bdf",
        "type": "json",
        "z": "50df1246bdaf5119",
        "name": "\"JSON Parse Property Node\"",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "1eaa0d485c0ce940"
            ]
        ],
        "info": "This node parses incoming messages in JSON format and extracts a specified property from the message payload. The extracted property is then passed on to the next node in the flow."
    },
    {
        "id": "c24941818a42ca98",
        "type": "subflow:f16c08b0c74d892d",
        "z": "50df1246bdaf5119",
        "name": "bundle prompt",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "189d162c7a1def8e"
            ]
        ]
    },
    {
        "id": "4c1e24c203e0aef7",
        "type": "subflow:1254546b0e9fb57c",
        "z": "50df1246bdaf5119",
        "name": "wrap format",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c24941818a42ca98"
            ]
        ]
    },
    {
        "id": "7cfc8986c5d0b0e2",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "4c1e24c203e0aef7"
            ]
        ]
    },
    {
        "id": "1eaa0d485c0ce940",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "Test Function Node.",
        "func": "if (!msg.test){\n    return msg;\n}\n\nmsg.test(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 520,
        "wires": [
            []
        ],
        "info": "This is a function node that checks if the `msg` object has a property called \"test\". If it does not, it simply returns the `msg`. If it does, it calls the function stored in the \"test\" property with `msg.payload` as its argument. The modified `msg` is then passed on to the next node."
    },
    {
        "id": "77b5dc952d57e266",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "smartGPTish",
        "info": "this column is a coding specific variant of the smartgpt approach",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "6f31904da5faaece",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "parse errors",
        "info": "these are two variants of a parse error:\n\nempty/multiple means we didn't get a markdown code block, or we got too many to be sure which is what we're after. ",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "4604e40b24b33cb3",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "0e3ce1809b54fad7"
            ]
        ]
    },
    {
        "id": "2fba30a10931ca0c",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "b446b41f8155ed4f",
        "type": "subflow:f9e0ec91.e767e",
        "z": "50df1246bdaf5119",
        "name": "minify JSON in history",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "83096e44fc2c289e"
            ]
        ]
    },
    {
        "id": "bc9b2bca5d9d9220",
        "type": "function",
        "z": "b7d91a580a2c7c19",
        "name": "code-block-extractor",
        "func": "function extractCodeBlocks(text, blockTypes) {\n  const results = [];\n  const allBlocks = !blockTypes || blockTypes.length === 0;\n\n  let codeBlockRegex;\n  if (allBlocks) {\n    codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)\\n```/g;\n  } else {\n    const regexStr = blockTypes.map((type) => type).join('|');\n    codeBlockRegex = new RegExp(`\\`\\`\\`(${regexStr})\\n([\\\\s\\\\S]*?)\\\\n\\`\\`\\``, 'g');\n    // const jsonBlockRegex = new RegExp(`\\`\\`\\`((json))\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'g');\n    // console.log('manual match?', jsonBlockRegex.exec(text))\n  }\n\n  let match;\n  while ((match = codeBlockRegex.exec(text)) !== null) {\n    // console.log('got match', match);\n    const type = match[1];\n    const content = match[2];\n    results.push({ type, content });\n  }\n\n  return results;\n}\n\nconst text = msg.payload;\n\nconst blockTypes = (env.get('blockTypes') || '').split(',').filter(t => t);\n// console.log('extract', text, blockTypes)\nmsg.payload = extractCodeBlocks(text, blockTypes);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ],
        "info": "This function node extracts code blocks from a string of text using a regular expression, where the code blocks are denoted by the \"```\" markdown syntax. If \"blockTypes\" are specified, it only extracts the particular types listed. The extracted code blocks are returned as an array of objects, where each object has a \"type\" and \"content\" property."
    },
    {
        "id": "9d93e67707347e32",
        "type": "status",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "95f92e2896b1f816",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse json codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "869689982e74b4dc"
            ]
        ]
    },
    {
        "id": "869689982e74b4dc",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "\"JsonToNodeRedFlow\"",
        "func": "msg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nmsg.payload = null;\nfor (const {content} of potentials){\n  try {\n    const obj = JSON.parse(content)\n    if (Array.isArray(obj) && obj.every(v => v.id && v.type)){\n      // is likely a node-red flow\n      if (msg.payload) {\n        throw new Error('multiple potential node-red flows detected, we need exactly one.')\n      } else {\n        msg.payload = JSON.stringify(obj)\n      }\n    }\n  } catch (e) {\n    //ignore\n  }\n}\n\nif (!msg.payload){\n  throw new Error('no valid node-red flows detected, remember: must be inside a github flavored markdown block and follow the JSON schema')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "b2728fc75e03f928"
            ]
        ],
        "info": "This is a function node that receives a message and selects JSON and Javascript types from it. The node looks for valid JSON structures to identify a potential node-red flow and returns the flow as a string. The node uses a regex to preprocess the given JSON string, and throws an error if there are no valid node-red flows detected or more than one potential flow is detected. Finally, it outputs the message including the identified flow."
    },
    {
        "id": "25e9760c313f1739",
        "type": "json",
        "z": "f8d5a5a4f2b87c52",
        "name": "\"JSON Parse\"",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "6f3eb41d26f826f2"
            ]
        ],
        "info": "This is a \"json\" node that parses a JSON formatted message payload, allowing downstream nodes to manipulate the parsed object instead of the raw JSON string. The parsed output object is passed on to the next node in the flow."
    },
    {
        "id": "2c5ea07fe592c94f",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "Handlebars template node.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{error.message}}\n\nremember, you need to follow these formatting instructions:\n\n{{format}}",
        "output": "str",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "90655d2d5bb817cc"
            ]
        ],
        "info": "This is a template node that takes a message in the `payload` field, applies a Handlebars/Mustache template to it, and outputs a string formatted using the supplied template. It also includes a custom error message which is used when the input message is rejected. The resulting formatted message is sent to the next node in the flow."
    },
    {
        "id": "06989b788e021dca",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "Catch Node",
        "scope": [
            "869689982e74b4dc"
        ],
        "uncaught": false,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ],
        "info": "This is a \"catch\" node in Node-RED, used for detecting and handling errors that occur during the execution of the flow. It has been configured to catch empty messages and multiple messages, and when an error of this type occurs, it will emit the empty or multiple message to the next node in the flow through its output wires."
    },
    {
        "id": "719bb2e65b5f411f",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "Schema Catch node.",
        "scope": [
            "25e9760c313f1739"
        ],
        "uncaught": false,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ],
        "info": "This is a Catch node in Node-RED that catches schema failures and prevents them from breaking the flow. When a schema failure is caught, it sends a message out through the wire connected to the output port of this node."
    },
    {
        "id": "b2728fc75e03f928",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "f8d5a5a4f2b87c52",
        "name": "set node-red schema",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "25e9760c313f1739"
            ]
        ]
    },
    {
        "id": "64d95ba33b6a42ce",
        "type": "subflow:237429fb2a5a7712",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "bb659029013a4888"
            ]
        ]
    },
    {
        "id": "384314168ce8ee86",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "Fixed-Temp.",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "64d95ba33b6a42ce"
            ]
        ],
        "info": "This is a Change node that sets the temperature property of the incoming message to a fixed value of 0.3. The modified message is then sent to its output wire."
    },
    {
        "id": "6f3eb41d26f826f2",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "\"Clear Schema\"",
        "rules": [
            {
                "t": "delete",
                "p": "schema",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "schemaString",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 500,
        "wires": [
            []
        ],
        "info": "This is a change node that deletes the \"schema\" and \"schemaString\" properties from the incoming message object."
    },
    {
        "id": "912fae5cd133c953",
        "type": "subflow:d295481a52b8fd83",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "95f92e2896b1f816"
            ]
        ]
    },
    {
        "id": "90655d2d5bb817cc",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash temp",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "bb659029013a4888",
        "type": "subflow:a25be0e127fc9e24",
        "z": "f8d5a5a4f2b87c52",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "912fae5cd133c953"
            ]
        ]
    },
    {
        "id": "12256771ca410bc7",
        "type": "template",
        "z": "1254546b0e9fb57c",
        "name": "Handlebars Template Node",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response will follow these formatting rules:\n{{{format}}}\n{{#schemaString}}\n\nAdditionally, here's a JSON schema reference you will conform to:\n{{{schemaString}}}\n{{/schemaString}}",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            []
        ],
        "info": "This node is a Template node that takes in a message and uses Handlebars syntax to format the message and output it as a string. It also includes schemaString as an optional input that will be used to further format the message with reference to a JSON schema. The resulting string is output as a message to the next node in the flow."
    },
    {
        "id": "d973d3ca1dc6855f",
        "type": "template",
        "z": "f6dd154f310aa615",
        "name": "\"Expert Engineer Template\"",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert {{language}} software engineer at the top of your game.\nYou are known for writing clean, clear code.\n{{persona}}",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ],
        "info": "This is a Template node, which takes in a message and uses a handlebars syntax template to create a new message output with the specified data structure. The message will contain information about an expert software engineer's persona and their proficiency in a specific programming language."
    },
    {
        "id": "287a8289c0d9a5d0",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f6dd154f310aa615",
        "name": "",
        "x": 220,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63dba49296c3a9e4",
        "type": "template",
        "z": "9f31d45ecb1d3482",
        "name": "JSON schema validator.",
        "field": "schema",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\"id\", \"type\"],\n    \"properties\": {\n      \"nodes\": {\n        \"not\": {\n          \"type\": \"array\"\n        }\n      },\n      \"status\": {\n        \"not\":{\n          \"type\": \"object\"\n        }\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"info\": {\n        \"type\": \"string\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"in\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"wires\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"out\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"port\": {\n                    \"type\": \"number\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"env\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"type\": {\n              \"type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"meta\": {\n        \"type\": \"object\",\n        \"required\": [],\n        \"properties\": {}\n      },\n      \"color\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
        "output": "json",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cf072eee9e78f126"
            ]
        ],
        "info": "This is a node that sets a JSON schema for validation. When a message is received, it will validate the message against the JSON schema and if it passes, it will output the original message."
    },
    {
        "id": "cf072eee9e78f126",
        "type": "change",
        "z": "9f31d45ecb1d3482",
        "name": "JSON Schema Stringifier.",
        "rules": [
            {
                "t": "set",
                "p": "schemaString",
                "pt": "msg",
                "to": "$string(schema)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 100,
        "wires": [
            []
        ],
        "info": "This is a Change node that sets a message property called \"schemaString\" to the JSON string version of another property called \"schema\"."
    },
    {
        "id": "31d816170cfa7a8f",
        "type": "template",
        "z": "13d4ac7b7c9898ae",
        "name": "\"Codeblock Template\"",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Put the primary output inside a github flavored markdown code block, with an appropriate language label\n{{{format}}}",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            []
        ],
        "info": "This is a Template node that uses the handlebars syntax to format messages as Github Flavored Markdown code blocks, with an appropriate language label. The formatted message is sent as a string output."
    },
    {
        "id": "bb67c6f583a80cc4",
        "type": "template",
        "z": "a5f18db0d45889f2",
        "name": "\"Flow Template\"",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your output will be a valid, parseable, node-red array, suitable for import:\nhere's an example:\n\n```json\n[{\"id\":\"13d4ac7b7c9898ae\",\"type\":\"subflow\",\"name\":\"codeblock\",\"info\":\"\",\"category\":\"format\",\"in\":[{\"x\":80,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\"}]}],\"out\":[{\"x\":300,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\",\"port\":0}]}],\"env\":[],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-archive\"},{\"id\":\"31d816170cfa7a8f\",\"type\":\"template\",\"z\":\"13d4ac7b7c9898ae\",\"name\":\"codeblock\",\"field\":\"format\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Put the primary output inside a github flavored markdown code block, with an appropriate language label\\n\\n{{{format}}}\",\"output\":\"str\",\"x\":190,\"y\":100,\"wires\":[[]]}]\n```",
        "output": "str",
        "x": 170,
        "y": 80,
        "wires": [
            []
        ],
        "info": "This is a template node that outputs a valid node-red array, suitable for import, with an example included. The output is a Handlebars template that can be parsed and used as needed."
    },
    {
        "id": "7da9bb553d44f56a",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "bb67c6f583a80cc4"
            ]
        ]
    },
    {
        "id": "c306926b9536fe15",
        "type": "template",
        "z": "f16c08b0c74d892d",
        "name": "Template Node.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\n{{{requirements}}}\n\n{{{format}}}\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 210,
        "y": 40,
        "wires": [
            []
        ],
        "info": "This node is a Template node type in Node-RED. It takes in a message and sets the message payload to a pre-defined template using handlebars/mustache syntax. The template includes values for persona, requirements, and format. The resulting message with the templated payload is then sent out to the required output."
    },
    {
        "id": "f89c539d2436d4b8",
        "type": "status",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1a48d7a00270d882",
        "type": "subflow:a5f18db0d45889f2",
        "z": "b53b3b7e24a3e4e7",
        "name": "set format",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "69979c46ebfcda56"
            ]
        ]
    },
    {
        "id": "69c4727b24bef714",
        "type": "subflow:f6dd154f310aa615",
        "z": "b53b3b7e24a3e4e7",
        "name": "set persona",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "1a48d7a00270d882"
            ]
        ]
    },
    {
        "id": "8b97ebde3ffd9ecc",
        "type": "subflow:50df1246bdaf5119",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "env": [
            {
                "name": "num_copies",
                "value": "num_copies",
                "type": "env"
            },
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "15470b359beaf8ad",
        "type": "change",
        "z": "b53b3b7e24a3e4e7",
        "name": "Change Language Node.",
        "rules": [
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "node-red and javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "69c4727b24bef714"
            ]
        ],
        "info": "This is a \"change\" node in Node-RED that sets the value of a message property \"language\" to the string \"node-red and javascript\"."
    },
    {
        "id": "006a7cb1b7f3bec3",
        "type": "comment",
        "z": "b53b3b7e24a3e4e7",
        "name": "TODO: put this column inside smartcoder",
        "info": "most of this right hand column should be refactored into \"smartcoder\" and be paramaterized.",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "69979c46ebfcda56",
        "type": "template",
        "z": "b53b3b7e24a3e4e7",
        "name": "\"Template\"",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "8b97ebde3ffd9ecc"
            ]
        ],
        "info": "This is a Template node that generates a text message using the Handlebars syntax, and sets the output message payload with this text."
    },
    {
        "id": "76bd320aab4ecae2",
        "type": "template",
        "z": "3624ea24a7bdeaa4",
        "name": "Template node.",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ],
        "info": "This is a Template node that uses Handlebars syntax to generate a string output for the `msg` object. The generated string asks a set of questions related to node-red review, which can be customized by editing the handlebars template."
    },
    {
        "id": "d0475e52f2f9d8e9",
        "type": "function",
        "z": "8843d7f92416211de9ebb963ff4ce28125932878",
        "name": "Subflow Grouping Node.",
        "func": "var subflows = msg.payload.reduce(function(acc, node) {\n    if (node.type === \"subflow\") {\n        acc[node.id] = { id: node.id, nodes: [node] };\n    } else if (node.z && acc[node.z]) {\n        acc[node.z].nodes.push(node);\n    }\n    return acc;\n}, {});\n\nvar result = Object.values(subflows).map(\n    function(subflow) {\n        return {id: subflow.id,type: \"subflow\",nodes: JSON.parse(JSON.stringify(subflow.nodes))};\n    }\n);\nmsg.payload = JSON.stringify(result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            []
        ],
        "info": "This function node transforms nodes by grouping them into subflows. Nodes with a property \"z\" that matches the id of a subflow node in msg.payload are assigned to that subflow. The output is a JSON string representation of the subflow hierarchy and its nodes."
    },
    {
        "id": "cf791c6d0c28776a",
        "type": "subflow:237429fb2a5a7712",
        "z": "a9cb3f5fc1c3e1b8",
        "name": "",
        "x": 320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "417ff54d16e93866",
        "type": "template",
        "z": "bf9fecd68e29a50a",
        "name": "Handlebars Template Node",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "d127214359ceeb96"
            ]
        ],
        "info": "This is a Template node that sets the value of the \"payload\" property in the incoming message using a Handlebars template. The node outputs a string that is the result of rendering the template with the incoming message as context. The output is sent to the next node in the flow via the wired connection."
    },
    {
        "id": "64cb2cf8b2438912",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "stash payload",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "417ff54d16e93866"
            ]
        ]
    },
    {
        "id": "c7cbd7f5c3cbdaa8",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "restore payload",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "cfc30e5be9fe3f3e"
            ]
        ]
    },
    {
        "id": "4d88bceb18e53451",
        "type": "change",
        "z": "bf9fecd68e29a50a",
        "name": "Set Analysis Node.",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "c7cbd7f5c3cbdaa8"
            ]
        ],
        "info": "This is a change node that sets the value of the \"analysis\" property in the message to the value of the incoming \"payload\" property, and then sends the modified message to its output."
    },
    {
        "id": "cfc30e5be9fe3f3e",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "clear history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "ec6d7c68553d97b3"
            ]
        ]
    },
    {
        "id": "d127214359ceeb96",
        "type": "subflow:237429fb2a5a7712",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "4d88bceb18e53451"
            ]
        ]
    },
    {
        "id": "ec6d7c68553d97b3",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 240,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "54aae0f36c581409",
        "type": "template",
        "z": "48101654b91252fc",
        "name": "handlebars-template-node",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "3e0c33f17172fc85"
            ]
        ],
        "info": "This template node is designed to generate a string of text using handlebars syntax, which will be placed in the `payload` property of the `msg` object. The generated text will prompt the user to analyze and rate a presented input on a scale of 0 to 10. The `msg` object will then be sent to the next node in the flow through the `wires` property."
    },
    {
        "id": "3e0c33f17172fc85",
        "type": "link call",
        "z": "48101654b91252fc",
        "name": "gpt queue",
        "links": [],
        "linkType": "static",
        "timeout": "3600",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "f6821c700cf97b2f"
            ]
        ]
    },
    {
        "id": "16ea30faba5cfc3c",
        "type": "subflow:520a10812173e701",
        "z": "48101654b91252fc",
        "name": "",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "54aae0f36c581409"
            ]
        ]
    },
    {
        "id": "9bd6b5f18d3a0ecc",
        "type": "subflow:a25be0e127fc9e24",
        "z": "48101654b91252fc",
        "name": "",
        "x": 240,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f6821c700cf97b2f",
        "type": "change",
        "z": "48101654b91252fc",
        "name": "\"Set analysis to payload\"",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "9bd6b5f18d3a0ecc"
            ]
        ],
        "info": "This is a change node that sets the value of the \"analysis\" field in the message to the value of the \"payload\" field in the message. The updated message is then passed on to the next node in the flow."
    },
    {
        "id": "92fd8467775c1835",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "73176ac6586b6585"
            ]
        ]
    },
    {
        "id": "d1331f209c505041",
        "type": "split",
        "z": "bfe4dee01d61e0c2",
        "name": "Split node.",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "92fd8467775c1835"
            ]
        ],
        "info": "This is a \"split\" node in Node-RED that takes an input string and splits it into multiple messages using a specified delimiter. The delimiter can be a new line or a fixed length value and the separated messages are sent out through the output wires."
    },
    {
        "id": "73176ac6586b6585",
        "type": "join",
        "z": "bfe4dee01d61e0c2",
        "name": "Auto Join Node.",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ],
        "info": "This is a \"join\" node in Node-RED. It can combine messages based on their topics into a single message. The \"build\" property specifies that the joined message will be an object, and the \"payload\" property specifies that the payload of each message will contribute to the joined message. The \"joiner\" property specifies that a newline character will be used to separate the payloads in the joined message. The \"mode\" property is set to \"auto\", which means the node will automatically configure itself based on the messages it receives."
    },
    {
        "id": "de2f72edd32ba706",
        "type": "template",
        "z": "657c8f0e9df6242e",
        "name": "Template Node.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a concise yet expressive analyst. You are good at synthesizing and summarizing observations.\n\n{{{context}}}\n\nhere is the subject matter:\n{{{payload}}}\n\nYou have just been presented with the following pieces of analysis of a larger work:\n{{{analysis}}}\n\nPlease give a summary of the relevant information.",
        "output": "str",
        "x": 260,
        "y": 320,
        "wires": [
            [
                "eefbfc8dd8aecccf"
            ]
        ],
        "info": "The template node is used to format and inject variables into a string using a handlebars/mustache syntax. This specific node produces a text output by combining a context, a payload, and an analysis together in a template string."
    },
    {
        "id": "eefbfc8dd8aecccf",
        "type": "subflow:237429fb2a5a7712",
        "z": "657c8f0e9df6242e",
        "name": "",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "99961076a36af9ed",
                "1ccb9174383664e1"
            ]
        ]
    },
    {
        "id": "99961076a36af9ed",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "\"Join\"",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "04a9a0c8084ec082",
                "036e8e789347f95f"
            ]
        ],
        "info": "This is a join node in Node-RED that waits for multiple input messages, combines their payloads into a single message, and sends this combined message to its output. The mode can be customized to concatenate messages into a string or array. The key can be specified if the join mode is set to key/value. It can also be set to accumulate or reduce the messages. Finally, it is possible to set a timeout value after which the node will automatically send the combined message, even if it is not complete."
    },
    {
        "id": "627a5403fe4f266f",
        "type": "batch",
        "z": "657c8f0e9df6242e",
        "name": "Batch-Count node.",
        "mode": "count",
        "count": "2",
        "overlap": "1",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "a401ef68997c6b2a"
            ]
        ],
        "info": "This is a batch node that collects messages and releases them in batches after a set count is reached. The node has a counting mode where it releases a batch after a specific number of messages has been reached. It also has a time mode where it releases a batch after a set interval of time has passed. The node can also be configured to overlap batches so that one or more messages from a subsequent batch are included in the current batch. The node will not release empty batches unless explicitly allowed. The node can be connected to one or more output wires where it will send the batches of messages."
    },
    {
        "id": "081d39183e2323d2",
        "type": "split",
        "z": "657c8f0e9df6242e",
        "name": "\"Splitter\"",
        "splt": "2000",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "6f07e77c85840df0"
            ]
        ],
        "info": "This is a node that splits incoming messages into smaller messages based on a specified length (2,000 in this case) and sends them to a single output. The split can be based on the length of the message or the number of items within an array in the message. The resulting smaller messages have an optional suffix added to their topic or payload as specified by the user."
    },
    {
        "id": "a401ef68997c6b2a",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "\"Auto-Join\"",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 240,
        "wires": [
            [
                "0c3087c33362c56c"
            ]
        ],
        "info": "This is a \"join\" node that combines messages with the same topic into a single message. The mode is set to \"auto\", which means the node will keep accumulating messages until it is triggered to send an output message. The build property is set to \"object\", meaning it will create an output object with keys equal to the topic and values equal to the combined payloads. The output message will be sent to the single wire connected to it."
    },
    {
        "id": "1bf095ea109bae31",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "Set Boolean node.",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 160,
        "wires": [
            [
                "627a5403fe4f266f",
                "1b0a1216ae61c7a3"
            ]
        ],
        "info": "This is a change node that sets a boolean property \"willComplete\" in the incoming message \"msg\" to true. The modified message is then sent to two output nodes."
    },
    {
        "id": "e00be323f0003974",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "\"Sum Switch\"",
        "property": "parts.count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$sum([parts.index,1])",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "1bf095ea109bae31"
            ],
            [
                "627a5403fe4f266f"
            ]
        ],
        "info": "This is a switch node that inspects a property called \"parts.count\" on an input message. If the value of the property is equal to the sum of the property \"parts.index\" and 1 (calculated using JSONata), the node will output the message to its first output. If the rule is not true, it will output the message to the second output."
    },
    {
        "id": "0c3087c33362c56c",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "\"Complete\"",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "willComplete",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "8d02872f841e29bf"
            ]
        ],
        "info": "This is a \"change\" node that takes an input message and sets the \"complete\" property of the message payload to the string \"willComplete\". The modified message is then passed to the node's output."
    },
    {
        "id": "036e8e789347f95f",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "\"Length Switch Node\"",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "2000",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "e94dc57b47a49387"
            ],
            [
                "1eb0bc16cb04fae2",
                "92ac0da2b13b0b14"
            ]
        ],
        "info": "This is a switch node that examines the length of the payload property of incoming messages. If the payload length is less than or equal to 2000, it will output the message to the first output. Otherwise, the message will be sent to the second output."
    },
    {
        "id": "e94dc57b47a49387",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 460,
        "wires": [],
        "info": "This is a debug node that displays the payload received from the connected node on the debug sidebar but will not show anything on the console. It does not modify the payload in any way and simply outputs it to aid in debugging flows."
    },
    {
        "id": "4efd493223b29ffe",
        "type": "catch",
        "z": "657c8f0e9df6242e",
        "name": "Error Catch Node.",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "4962c2ab1cf86f48"
            ]
        ],
        "info": "This is a \"catch\" node in Node-RED\" which is used to catch errors that occur within the flow. When an error is caught, it will output a message on its defined output wire."
    },
    {
        "id": "4962c2ab1cf86f48",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "Debug-Print Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 560,
        "wires": [],
        "info": "This is a Debug node that can be used to print information to the debug console in Node-RED. It is named \"summarizer error\" and is currently active. When an input is received by the node, it will output the message to the console, but not to the Node-RED sidebar or status. The node has no outputs."
    },
    {
        "id": "1b0a1216ae61c7a3",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_msgid",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": [],
        "info": "This is a Debug node in Node-RED. It will output the entire message object to the debug console, including the message ID. It is useful for debugging a flow and analyzing the input and output of a node."
    },
    {
        "id": "6f07e77c85840df0",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "657c8f0e9df6242e",
        "name": "",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "de2f72edd32ba706"
            ]
        ]
    },
    {
        "id": "8d02872f841e29bf",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "setWillComplete",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6f07e77c85840df0"
            ]
        ],
        "info": "This node is a \"change\" node that sets a property called \"willComplete\" on the incoming message to a boolean value of \"false\"."
    },
    {
        "id": "04a9a0c8084ec082",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_msgid",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 400,
        "wires": [],
        "info": "This is a debug node in Node-RED. It will display the received messages on the debug sidebar, but will not send them to the next node in the flow."
    },
    {
        "id": "1ccb9174383664e1",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "Debug.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 360,
        "wires": [],
        "info": "This is a debug node that will output the message payload to the console log. The behavior of the node can be toggled on and off via the \"active\" setting. The node can also output messages to the debug sidebar and/or status field if configured to do so."
    },
    {
        "id": "92ac0da2b13b0b14",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 520,
        "wires": [],
        "info": "This is a Debug node. It displays messages on the debug sidebar of the Node-RED editor. When the message passes through this node, it will be displayed in the debug sidebar, and it will not be passed to other nodes."
    },
    {
        "id": "684254331f69bb61",
        "type": "json",
        "z": "657c8f0e9df6242e",
        "name": "JSON to String node.",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "f8bdadc87267634b"
            ]
        ],
        "info": "This node takes a message payload and converts it into a string representation of a JSON object."
    },
    {
        "id": "887bb48be4e86542",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "Set-Complete Node.",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "036e8e789347f95f"
            ]
        ],
        "info": "This is a `change` node that modifies an incoming message by setting the value of `complete` property to `false`. The modified message is then sent to the node's output wires."
    },
    {
        "id": "40663c267e076c78",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "\"False Properties\"",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 120,
        "wires": [
            [
                "e00be323f0003974"
            ]
        ],
        "info": "This node is a Change node that sets two properties in the incoming message to false - \"willComplete\" and \"complete\". The resulting message is then outputted to the connected wire."
    },
    {
        "id": "f8bdadc87267634b",
        "type": "function",
        "z": "657c8f0e9df6242e",
        "name": "\"Substring Logger\"",
        "func": "msg.payload = msg.payload.substring(0, msg.payload.length / 5)\nnode.log(\"msg.payload.length \"+ msg.payload.length  );\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ],
        "info": "This is a Function node that takes the input message payload and returns a new message with the same payload, but only the first 20% of the original payload as a string. It also logs the length of the modified payload."
    },
    {
        "id": "b8a97edc759eb948",
        "type": "subflow:237429fb2a5a7712",
        "z": "d66a7c662b619014",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "a57074888a023788"
            ]
        ]
    },
    {
        "id": "36b8184a08d13132",
        "type": "function",
        "z": "d66a7c662b619014",
        "name": "assemble-payloads",
        "func": "msg.payload = msg.full.data.choices.map(({message},i) => \n`---OPTION ${i} START---\\n${message.content}\\n---OPTION ${i} END---\\n`).join('')\n\nmsg.payload = `Here are ${msg.full.data.choices.length} options:\\n${msg.payload}`\n\nmsg.history[msg.history.length - 1].content = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "56543d4e523ebe7f"
            ]
        ],
        "info": "This is a function node that takes an input message containing an array of choices with messages and assembles them into a string. It then outputs the message with a new \"payload\" property that contains the combined string of all the choices, along with some additional information. Finally, the function updates the last entry in the message history with this new payload value."
    },
    {
        "id": "56543d4e523ebe7f",
        "type": "template",
        "z": "d66a7c662b619014",
        "name": "Template node.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Please compare and evaluate the options, and synthesize them into a single best answer",
        "output": "str",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "e5607ee4eaaa50d5"
            ]
        ],
        "info": "The Template node takes a Mustache/Handlebars template and uses it to generate a new message based on the input message and flow context. It then passes the resulting message to the next node in the flow. In this specific example, it generates a new message containing the text \"Please compare and evaluate the options, and synthesize them into a single best answer\"."
    },
    {
        "id": "fec09085fa1a30ec",
        "type": "subflow:237429fb2a5a7712",
        "z": "d66a7c662b619014",
        "name": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "20a76c3c2e5a2985"
            ]
        ]
    },
    {
        "id": "8e5d03e6e7f3bb64",
        "type": "change",
        "z": "d66a7c662b619014",
        "name": "\"Env2Msg\"",
        "rules": [
            {
                "t": "set",
                "p": "n",
                "pt": "msg",
                "to": "n",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "b8a97edc759eb948"
            ]
        ],
        "info": "This is a Change node in Node-RED that sets the value of the message property \"n\" to the value of the environment variable \"n\". The modified message is then sent to the output wire."
    },
    {
        "id": "e5607ee4eaaa50d5",
        "type": "change",
        "z": "d66a7c662b619014",
        "name": "\"Delete-Key\"",
        "rules": [
            {
                "t": "delete",
                "p": "n",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "fec09085fa1a30ec"
            ]
        ],
        "info": "This change node removes the key/value pair with the key 'n' from the message payload."
    },
    {
        "id": "a57074888a023788",
        "type": "subflow:520a10812173e701",
        "z": "d66a7c662b619014",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "36b8184a08d13132"
            ]
        ]
    },
    {
        "id": "20a76c3c2e5a2985",
        "type": "subflow:a25be0e127fc9e24",
        "z": "d66a7c662b619014",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 220,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bccea17a75c2795e",
        "type": "function",
        "z": "788598196e86646c",
        "name": "\"System Message to History\"",
        "func": "msg.history = msg.history || []\nif (!msg.system){\n    return msg;\n}\n\nif (msg.history[0] && msg.history[0].role === 'system'){\n    msg.history = msg.history.slice(1)\n}\n\n\nmsg.history = [{\n    role: 'system',\n    content: msg.system\n}].concat(msg.history);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            []
        ],
        "info": "This is a function node that sets a system message into the message history. It checks if the input message has a \"system\" value and if it does, it adds it to the message history. It also keeps a history of the last messages that were added with a \"system\" role, and removes the oldest one if there are more than one. The resulting message is passed forward with the updated message history."
    },
    {
        "id": "8b156f3f879bad59",
        "type": "file in",
        "z": "0da2717d76f314c6",
        "name": "File In node.",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "cf9ef8b14dd35b82"
            ]
        ],
        "info": "This is a file input node that reads the contents of a file in utf8 format and sends the data to the specified output wire. The file path and name are defined in the node's configuration."
    },
    {
        "id": "cf9ef8b14dd35b82",
        "type": "json",
        "z": "0da2717d76f314c6",
        "name": "JSON parser.",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "ad78713cb0a6df80"
            ]
        ],
        "info": "This is a JSON node in Node-RED which can be used to parse JSON strings. It takes in a payload and outputs it to a different node for further processing."
    },
    {
        "id": "ad78713cb0a6df80",
        "type": "split",
        "z": "0da2717d76f314c6",
        "name": "\"Split\"",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "352b07a97db83983"
            ]
        ],
        "info": "This is a split node which takes in a string and splits it into multiple message objects based on a specified delimiter (\"\\n\" in this case). Each separated message is then passed on to the next connected node."
    },
    {
        "id": "80e5304f2999ce6b",
        "type": "join",
        "z": "0da2717d76f314c6",
        "name": "\"Join\" node.",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 230,
        "y": 780,
        "wires": [
            [
                "7cbbf9d31cb04d05"
            ]
        ],
        "info": "This is a \"join\" node in Node-RED that concatenates messages from multiple inputs into a single message. The node can be configured to join messages based on a common topic or on a specified number of messages. It can also be set to output the concatenated messages as an array or an object."
    },
    {
        "id": "080cad2872ab96ce",
        "type": "json",
        "z": "0da2717d76f314c6",
        "name": "JSON node.",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 420,
        "wires": [
            [
                "3e54165e7294db19"
            ]
        ],
        "info": "This is a JSON node, which converts the input message payload into a JSON formatted string. The formatted string is then sent to the single output connected to it."
    },
    {
        "id": "4c1404f306ef020a",
        "type": "file",
        "z": "0da2717d76f314c6",
        "name": "\"File Writer\"",
        "filename": "/data/flowinfo.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 270,
        "y": 860,
        "wires": [
            []
        ],
        "info": "The \"file\" node writes a JSON object to a specified file location on the filesystem. The file can be either overwritten or appended to, depending on the configuration. The node has no input wires and sends no output wires."
    },
    {
        "id": "7cbbf9d31cb04d05",
        "type": "json",
        "z": "0da2717d76f314c6",
        "name": "\"JSON converter\"",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 820,
        "wires": [
            [
                "4c1404f306ef020a"
            ]
        ],
        "info": "This is a JSON node that takes in data as input and converts it into a JSON object. It then passes the output, the JSON object, to the next node in the flow."
    },
    {
        "id": "3e54165e7294db19",
        "type": "subflow:237429fb2a5a7712",
        "z": "0da2717d76f314c6",
        "name": "",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "72e95d8de98b7b98"
            ]
        ]
    },
    {
        "id": "408fdd3b394de382",
        "type": "template",
        "z": "0da2717d76f314c6",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYour job is to write documentation.\nThe user will provide you with a json string of a node-red node.\nYou will analyze it and respond with a terse description of what the node does.\nYou should assume that the audience already knows that it's a node-red node, and what type it is.\nFocus on the general behavior, not the specific implementation.\nfor function nodes, focus on describing the function\nfor other nodes, assume we already are familiar with the type of node, try and describe what it's doing at a higher level based on the configuration\n",
        "output": "str",
        "x": 280,
        "y": 340,
        "wires": [
            [
                "d7466f149b33b961"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "d7466f149b33b961",
        "type": "subflow:788598196e86646c",
        "z": "0da2717d76f314c6",
        "name": "",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "080cad2872ab96ce"
            ]
        ]
    },
    {
        "id": "c003a05da5c1d6b6",
        "type": "switch",
        "z": "0da2717d76f314c6",
        "name": "\"Type Ignore Switch\"",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "link.*|subflow.*|junction|tab|status",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 260,
        "wires": [
            [
                "97cebd272ffda79e"
            ],
            [
                "8c111b3dbf792ca6"
            ]
        ],
        "info": "This switch node directs the input messages to two different output wires based on whether the message property \"payload.type\" matches a regular expression containing specific strings or not. It ignores messages with values such as \"link\", \"subflow\", \"junction\", \"tab\" and \"status\" and sends them through the first output wire, and passes all other messages through the second output wire."
    },
    {
        "id": "352b07a97db83983",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "\"Change Message Node\"",
        "rules": [
            {
                "t": "set",
                "p": "node",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.info",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.name",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 220,
        "wires": [
            [
                "c003a05da5c1d6b6"
            ]
        ],
        "info": "This is a Change node that sets the value of the \"node\" property in the message object to the value of the \"payload\" property. The new message is then passed on to the node connected to its output."
    },
    {
        "id": "a7b4d25950105f75",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "ChangeNode.",
        "rules": [
            {
                "t": "set",
                "p": "node.info",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "history",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 580,
        "wires": [
            [
                "50495c457b07dafa"
            ]
        ],
        "info": "This is a \"change\" node that modifies the incoming message object before passing it to the next node. It sets the `node.info` property of the message to the value of the `payload` property, and deletes the `history` property if it exists. Then it sends the modified message to the output wire."
    },
    {
        "id": "abc59e2895a6bd61",
        "type": "subflow:237429fb2a5a7712",
        "z": "0da2717d76f314c6",
        "name": "",
        "x": 240,
        "y": 660,
        "wires": [
            [
                "3501eb14ac590776"
            ]
        ]
    },
    {
        "id": "3501eb14ac590776",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "\"Set-Node-Name\"",
        "rules": [
            {
                "t": "set",
                "p": "node.name",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 700,
        "wires": [
            [
                "c372f6322d121463"
            ]
        ],
        "info": "This is a change node that sets the message property `node.name` to the message payload. The modified message is then passed on to the next node connected to its output wire."
    },
    {
        "id": "c372f6322d121463",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "\"Set Payload\"",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "node",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 740,
        "wires": [
            [
                "80e5304f2999ce6b"
            ]
        ],
        "info": "This is a \"change\" node in Node-RED. It sets the payload of the input message to the string \"node\" and passes it on to the next node."
    },
    {
        "id": "8c111b3dbf792ca6",
        "type": "switch",
        "z": "0da2717d76f314c6",
        "name": "\"ignore-info-switch\"",
        "property": "payload.info",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "97cebd272ffda79e"
            ],
            [
                "408fdd3b394de382"
            ]
        ],
        "info": "This is a \"Switch\" node that evaluates the value of `msg.payload.info`. \n\nIf `msg.payload.info` is not empty, the node will output to the first output (the top one).\n\nIf `msg.payload.info` is empty, the node will output to the second output (the bottom one)."
    },
    {
        "id": "50495c457b07dafa",
        "type": "subflow:788598196e86646c",
        "z": "0da2717d76f314c6",
        "name": "",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "abc59e2895a6bd61"
            ]
        ]
    },
    {
        "id": "72e95d8de98b7b98",
        "type": "template",
        "z": "0da2717d76f314c6",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYour job is to come up with names for node red flows\nThe user will provide you with a description of a node.\nYou will analyze it and respond with a short name that will help convey it's purpose when displayed in the visual node-red editor.\nYou should assume that the audience already knows that it's a node-red node, and what type it is.\nexample of good names:\n- set msg.payload to the json string of msg.nodes\n- route based on msg.error.message\n- compress history\nexamples of bad names:\n- change msg.payload \n- msg.error.message switch node\n- change history array node.\n\nyou must respond only with the name, omitting quotation marks.",
        "output": "str",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "a7b4d25950105f75"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "414ddee1287efb66",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "941765e8bb2c32d6",
        "name": "flowcoder",
        "env": [
            {
                "name": "num_copies",
                "value": "3",
                "type": "num"
            }
        ],
        "x": 120,
        "y": 240,
        "wires": [
            [
                "99b359093fa5ee99"
            ]
        ]
    },
    {
        "id": "733c94970d337f9c",
        "type": "inject",
        "z": "941765e8bb2c32d6",
        "name": "inject node.",
        "props": [
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.7",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a701ddb8190d147a"
            ]
        ],
        "info": "This is an \"inject\" node in Node-RED that immediately sends a message with predefined properties when it receives a trigger signal, such as a button press. The message includes the properties \"min_tokens\", \"temperature\", and \"topic\" with their respective values of \"2000\", \"0.7\", and an empty string (since \"vt\":\"str\" means the value is of string type), and is sent to the next node connected to its output."
    },
    {
        "id": "c13f6114b4ebbbcc",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "SubflowByType",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I need a node-red subflow according to the following Specification:\n\nmsg.payload starts as an array of node-red node objects with the following properties:\n\nid,\ntype,\nz (optional)\n\nI want this to be transformed into an array of new objects, one for each 'subflow' type in the incoming message.\n\nthe new objects should have:\nid: the id of the subflow\nnodes: a deep clone of the subflow node, and all nodes with the subflows 'id' as their 'z' property\n\ntype: 'subflow'\n\nplease provide me with a valid, syntactically correct JSON string that I can use to import the subflow above",
        "output": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ],
        "info": "This is a node that takes an array of node objects with specific properties, and transforms them into an array of new objects that are grouped by their 'subflow' type. Each new object has an id and a deep clone of the subflow node, and all nodes with the subflow's 'id' as their 'z' property. The output is a valid, syntactically correct JSON string that can be used to import the subflow."
    },
    {
        "id": "99b359093fa5ee99",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 120,
        "y": 280,
        "wires": [],
        "info": "This is a debug node in Node-RED that outputs the payload of incoming messages to the debug sidebar. It can be activated or deactivated and can also output to the status bar."
    },
    {
        "id": "a701ddb8190d147a",
        "type": "subflow:3624ea24a7bdeaa4",
        "z": "941765e8bb2c32d6",
        "name": "set node-red review",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "c13f6114b4ebbbcc"
            ]
        ]
    },
    {
        "id": "ffc06a5a5bbea58f",
        "type": "batch",
        "z": "941765e8bb2c32d6",
        "name": "Batcher.",
        "mode": "count",
        "count": 10,
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 370,
        "y": 180,
        "wires": [
            []
        ],
        "info": "This is a batch node that collects and groups incoming messages into batches of a fixed count or size. The number of messages in each batch is specified by the \"count\" parameter, and the batches are emitted at a fixed interval set by \"interval\". If there are not enough messages to form a complete batch, the node will wait until more messages arrive, unless \"allowEmptySequence\" is set to true. The grouped messages are then sent out of the node. The \"mode\" parameter determines whether the batches are formed based on the count of messages or the size of their payload."
    },
    {
        "id": "8c1cba224d949d09",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "\"GPT4 Limit Delay\"",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "13",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 280,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ],
        "info": "This is a `delay` node that waits for a specified time interval or rate before forwarding an incoming message. This node limits the input rate to 13 messages per second, which can be further adjusted with random fluctuations. It has two output wires. If the `drop` option is enabled, this node may drop incoming messages if they arrive too quickly."
    },
    {
        "id": "4b735d4be9323117",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "\"Turbo Limit\"",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 280,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ],
        "info": "This delay node called \"turbo limit\" slows down the rate of messages flowing through it. It emits each incoming message after a random delay that is configured to be between 5 and 20 seconds. The time between each message is configured to be a fixed rate of 1 message per 5 seconds. It has an option to drop messages if the queue is full and an option to allow multiple messages with the same timestamp to be sent through without losing one."
    },
    {
        "id": "b98332fdc0290246",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "Topic-based Switch Node",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpt4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turbo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "8c1cba224d949d09"
            ],
            [
                "4b735d4be9323117"
            ]
        ],
        "info": "This is a switch node that routes messages based on their topic property. If the topic property is equal to \"gpt4\", it will send the message to the first output. If the topic property is equal to \"turbo\", it will send the message to the second output. It has two outputs and the option to repair messages is turned off."
    },
    {
        "id": "f2342d49916a4e23",
        "type": "link in",
        "z": "e961334cde89144c",
        "name": "link in 1",
        "links": [],
        "x": 65,
        "y": 180,
        "wires": [
            [
                "b636b9ea5bf45435"
            ]
        ]
    },
    {
        "id": "9f4d0154bcaa5bdb",
        "type": "link out",
        "z": "e961334cde89144c",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 605,
        "y": 480,
        "wires": []
    },
    {
        "id": "1d0773bcf3416404",
        "type": "chatgpt",
        "z": "e961334cde89144c",
        "name": "\"OpenAI chatbot node\"",
        "Organization": " ",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "56380579ca248c30",
                "d2ee1fb0b75e93b6"
            ]
        ],
        "info": "This is a custom node called \"chatgpt\" that appears to integrate with the OpenAI API. It likely allows users to create a chat interface and leverage the power of GPT (Generative Pre-trained Transformer) models to generate responses. The node has configuration parameters such as the organization name, a topic, and a base URL to connect to the OpenAI API. The node also has two output wires, suggesting it may output a response to either one or both wires."
    },
    {
        "id": "09ae223c8021bfb1",
        "type": "catch",
        "z": "e961334cde89144c",
        "name": "\"Catch Node\"",
        "scope": [
            "1d0773bcf3416404"
        ],
        "uncaught": false,
        "x": 390,
        "y": 40,
        "wires": [
            [
                "45d0a3a5f2e2b024"
            ]
        ],
        "info": "This is a Catch node in Node-RED. It is used to catch errors that may occur during the execution of the flow, within the specified scope. When an error is caught, it can be passed on to subsequent nodes for handling. By default, it catches all errors within the current flow."
    },
    {
        "id": "56380579ca248c30",
        "type": "file",
        "z": "e961334cde89144c",
        "name": "\"File\"",
        "filename": "/data/gptlog.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 320,
        "wires": [
            []
        ],
        "info": "This is a \"file\" node in node-red that writes data to a file specified by the given file path and name. The node can either append new data to the end of an existing file or overwrite an existing file with new data. The node does not create the directory if it does not already exist. The node does not encode the data in any specific format. The node has no outputs and just writes the input data to the specified file."
    },
    {
        "id": "dd2038bc71721c1f",
        "type": "change",
        "z": "e961334cde89144c",
        "name": "Delete Error Node",
        "rules": [
            {
                "t": "delete",
                "p": "error",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ],
        "info": "This is a \"Change\" node that deletes the \"error\" property from the incoming message object. The modified message is then sent out to the next node connected to it."
    },
    {
        "id": "b722eb5e7dd70f13",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "Known Errors Switch",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "maximum context length",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "429",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "502",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "read ECONNRESET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Rate limit reached",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "cb040ea047dc84fb"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "0e15e195386e7615"
            ],
            [
                "742d10fb144f3c99"
            ]
        ],
        "info": "This is a switch node that checks for known error messages in the input message's error.message property. If the error message matches any of the given values, the node will route the message to the corresponding output. If the error message does not match any of them, the node will route the message to the \"else\" output. The node has 6 outputs in total."
    },
    {
        "id": "d2ee1fb0b75e93b6",
        "type": "subflow:f9e0ec91.e767e",
        "z": "e961334cde89144c",
        "name": "minify JSON in history",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "2d60fcbd28eb92c7"
            ]
        ]
    },
    {
        "id": "2d60fcbd28eb92c7",
        "type": "change",
        "z": "e961334cde89144c",
        "name": "\"clear max_tokens\"",
        "rules": [
            {
                "t": "delete",
                "p": "max_tokens",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "d5f444de1f8ceabb"
            ]
        ],
        "info": "This is a \"change\" node in node-red that removes the \"max_tokens\" property from the incoming message object. The modified message is then outputted to the next node connected to its output."
    },
    {
        "id": "d5f444de1f8ceabb",
        "type": "subflow:a25be0e127fc9e24",
        "z": "e961334cde89144c",
        "name": "restore topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "9f4d0154bcaa5bdb"
            ]
        ]
    },
    {
        "id": "5d459fc8-eec7-4ace-94e5-b653c47e5061",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "Token Headroom Node",
        "func": "const encode = gpt3Encoder.encode;\nmsg.topic = msg.topic || 'turbo';\nif (!msg.max_tokens) {\n    let sum = (msg.history || []).filter(e => e).reduce((acc, cur) => acc + encode(cur.content).length, 0);\n    sum += encode(msg.payload).length;\n    sum += 300; // give the encoder some wiggle room\n    node.log('token sum: ' + sum);\n    if (env.auto4\n    && (msg.topic !== 'gpt4') \n    // @ts-ignore\n    && (4096 - sum < (msg.min_tokens || 0))) {\n        msg.topic = 'gpt4'\n    }\n\n    // if (env.get('auto4')\n    // && (msg.topic == 'gpt4')\n    // && (4096 - sum > (msg.min_tokens || 0))){\n    //     msg.topic = 'turbo';\n    // }\n    \n    msg.max_tokens = ((msg.topic === 'gpt4') ? 8192 : 4096) - sum;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 170,
        "y": 220,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ],
        "info": "This function node ensures that there is enough space for a GPT-3 token, filters the message history, and calculates the maximum number of tokens allowed, and sets the `msg.max_tokens` property accordingly. Additionally, it checks whether the `msg.topic` is `gpt4` and automatically switches to `gpt4` if there is not enough headroom in `turbo`. The max token limit is 8192 for `gpt4` and 4096 for `turbo`."
    },
    {
        "id": "b636b9ea5bf45435",
        "type": "subflow:520a10812173e701",
        "z": "e961334cde89144c",
        "name": "stash topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "5d459fc8-eec7-4ace-94e5-b653c47e5061"
            ]
        ]
    },
    {
        "id": "cb040ea047dc84fb",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "Token Overage Fixer.",
        "func": "function extractNumbersFromString(str) {\n    const regex = /\\d+/g; // Regular expression to match one or more digits\n    const matches = str.match(regex); // Extract all numbers from the string\n\n    const result = {\n        maximumContextLength: parseInt(matches[0]),\n        requestedTokens: parseInt(matches[1]),\n        tokensInMessages: parseInt(matches[2]),\n        tokensInCompletion: parseInt(matches[3])\n    };\n\n    return result;\n}\n\nconst values = extractNumbersFromString(msg.error.message);\nconsole.log('values', values)\nconst overage = values.tokensInCompletion - (values.requestedTokens - values.maximumContextLength);\nif (values.tokensInCompletion - msg.min_tokens < overage) {\n    // we just miscalculated, but we're still good\n    msg.max_tokens = values.tokensInCompletion - overage\n} else if (msg.auto4 && msg.topic === 'turbo') {\n    // upgrade model\n    msg.topic = 'gpt4'\n} else {\n    //we fucked\n    throw new Error('token overage')\n}\n\nmsg.history.pop()\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 160,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ],
        "info": "This is a function node that extracts various values from a string contained in the input message, performs a calculation using those values and then sets properties on the output message based on the result of the calculation. If the calculation results in an error, then an error  will be thrown."
    },
    {
        "id": "e66c7e2b9c2807aa",
        "type": "debug",
        "z": "e961334cde89144c",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 100,
        "wires": [],
        "info": "This is a Debug Node, which is used for testing and debugging purposes in Node-RED. When a message passes through this node, it will display the message payload, along with other properties, such as the flow ID and timestamp, in the debug tab of the Node-RED editor. It can be used to examine the structure and content of a message as it flows through a flow."
    },
    {
        "id": "45d0a3a5f2e2b024",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "\"clean-history\"",
        "func": "if (msg.history){\n    const seen = new Set()\n    msg.history = msg.history.filter(item => {\n        if (seen.has(item.content)){\n            return false;\n        }\n        seen.add(item.content)\n        return true;\n    })\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "b722eb5e7dd70f13",
                "dd3b4001dfae1c23"
            ]
        ],
        "info": "This is a function node that removes duplicate entries from a history array in the input data object of the message. It does this by creating a Set of unique content, and then filters out any duplicate content in the history array. The filtered message is then passed to the two connected nodes."
    },
    {
        "id": "dd3b4001dfae1c23",
        "type": "debug",
        "z": "e961334cde89144c",
        "name": "Node Name: Debug Node.",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 60,
        "wires": [],
        "info": "This is a debug node in Node-RED that prints all incoming messages to the console output log. It has an option to send the message to the sidebar instead of the console, and another option to send a status message to indicate its current state. The node can be activated or deactivated. It has no outputs and is typically used for debugging and troubleshooting purposes."
    },
    {
        "id": "742d10fb144f3c99",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "error message switch node",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "That model is currently overloaded with other requests",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 890,
        "y": 60,
        "wires": [
            [],
            [],
            [
                "e66c7e2b9c2807aa"
            ]
        ],
        "info": "This is a switch node that checks the value of the \"error.message\" property in the incoming message. There are three rules that dictate which output to forward the message to: If the message contains the string \"That model is currently overloaded with other requests\", it goes to the first output; If the message is equal to the string \"400\", it goes to the second output; For all other messages, it goes to the third output. The \"ignore duplicates\" name suggests that this node is likely used to filter out or handle repeated error messages."
    },
    {
        "id": "d65872b05ad84bb5",
        "type": "catch",
        "z": "e961334cde89144c",
        "name": "Error Catcher.",
        "scope": null,
        "uncaught": true,
        "x": 640,
        "y": 20,
        "wires": [
            [
                "e66c7e2b9c2807aa"
            ]
        ],
        "info": "The \"catch\" node is used to handle errors that occur within the flow. It allows you to catch errors and route them to another flow for further processing or logging. In this specific case, the node is configured to catch uncaught errors and send them to the \"e66c7e2b9c2807aa\" node."
    },
    {
        "id": "0e15e195386e7615",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "\"RateLimitDelay\"",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 160,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ],
        "info": "This is a delay node with rate limiting capabilities. It delays any incoming messages by a specified amount of time (1 minute in this case) and allows a maximum rate of 1 message per second. The node can also introduce a random delay of 1 to 5 seconds between messages. The \"drop\" and \"allowrate\" options toggle whether messages will be dropped or queued up respectively if the maximum rate is exceeded. The node has one output."
    },
    {
        "id": "278361a6a29eb45b",
        "type": "subflow:d295481a52b8fd83",
        "z": "e961334cde89144c",
        "name": "",
        "x": 140,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f4f6fa24ca217587",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "JSON Extract Node.",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "ed65351c21590e04"
            ]
        ],
        "info": "This is a JSON node that takes a message object as input and extracts its payload property, which it then outputs to the next node in the flow."
    },
    {
        "id": "ed65351c21590e04",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "Rule setter.",
        "rules": [
            {
                "t": "set",
                "p": "requirements",
                "pt": "msg",
                "to": "payload.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "turbo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "javascript",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "task_id",
                "pt": "msg",
                "to": "payload.task_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "testString",
                "pt": "msg",
                "to": "payload.test",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "min_tokens",
                "pt": "msg",
                "to": "1000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "8d53a1abefddfbf2"
            ]
        ],
        "info": "The `change` node sets several properties in the message payload based on pre-defined rules and sends the updated message to its output."
    },
    {
        "id": "8d53a1abefddfbf2",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "Template Wrapper.",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "here are the requirements for a function i need you to write in javascript:\n\n{{{requirements}}} //...\n\nmake sure that you give me the whole function, and that the name matches.",
        "output": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "65d8c0dd542c67cc"
            ]
        ],
        "info": "This is a `template` node that generates a message to be sent downstream. It takes the message from the `requirements` field and concatenates it with a message in a specific format. The resulting string is then passed to the next node."
    },
    {
        "id": "922590827a20da6a",
        "type": "subflow:50df1246bdaf5119",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62612d04c38cb1a4",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "\"Assertion Test Function Node\"",
        "func": "console.assert = (bool) => { if (!bool) throw new Error('assert!') }\n\ntry{\n    console.log('payload:', msg.payload)\n    console.log('test:', msg.testString)\n    const test = new Function('console',msg.payload + '\\n' + msg.testString)\n    test(console)\n    msg.pass = true;\n} catch (e) {\n    msg.testError = e.message;\n    msg.pass = false;\n}\n\nmsg.payload = {\n    flow: msg.flow || 'chatgpt',\n    model: msg.topic,\n    pass: msg.pass,\n    task: msg.task_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "084093a3278f4f92"
            ]
        ],
        "info": "This is a Function node with a name \"test\". It logs the input payload and a \"testString\" property of the input message object to the console, then compiles the payload and testString into a function using the Function constructor. It invokes the new function with the console object and stores the result of the assertion in a \"pass\" property of the output message object. If the assertion fails, it catches the error and stores the error message in a \"testError\" property of the output message object. Finally, it returns an output message object with properties \"flow\", \"model\", \"pass\", and \"task\", which are passed in from the input message object."
    },
    {
        "id": "b8010df720742aef",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "\"Auto-sum join\"",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "$A + pass",
        "reduceInit": "0",
        "reduceInitType": "num",
        "reduceFixup": "$A/$N",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "4d96dd6356493577",
                "75992a64fd9b37f1"
            ]
        ],
        "info": "This is a \"join\" node that will accumulate messages and join them together into one message, separated by newline characters. It will wait for all input messages to arrive before outputting the joined message. The input messages will be combined using the \"reduce\" function, which here is adding up the values of the \"pass\" properties in each message. The resulting sum will be divided by the number of input messages, so that the output message will contain the average of the \"pass\" values."
    },
    {
        "id": "183a83919e31ea2f",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "\"template\"",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "",
        "output": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "68aa97abce13538f"
            ]
        ],
        "info": "This is a Template node in Node-RED that takes a payload message, applies a Handlebars template to it, and outputs the resulting string. The specific template to be applied is defined by the user. The output is then sent to the next node in the flow via a wire."
    },
    {
        "id": "d7ff3df8b8bca72b",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "\"Index Switch\"",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "f4f6fa24ca217587"
            ]
        ],
        "info": "This is a \"switch\" node which takes an input message and checks the value of the \"parts.index\" property. If it's less than 1000, then the message is passed to its output wire, otherwise nothing is outputted."
    },
    {
        "id": "4d94c61aec9614a2",
        "type": "inject",
        "z": "f297cec495c6b8be",
        "name": "\"Inject\"",
        "props": [
            {
                "p": "language",
                "v": "javascript",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "183a83919e31ea2f"
            ]
        ],
        "info": "This is an \"inject\" node which injects a message into the flow with specified properties as defined in the \"props\" array. In this case, it triggers the sending of a message to the node connected through the output wire with a \"language\" property set to \"javascript\"."
    },
    {
        "id": "2d59b8905d9a2034",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "Split node.",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "d7ff3df8b8bca72b"
            ]
        ],
        "info": "This is a \"split\" node in Node-RED. It splits incoming messages into multiple messages based on the specified delimiter."
    },
    {
        "id": "30bf3f577ffc38e2",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "Error Catch Node",
        "scope": [
            "922590827a20da6a"
        ],
        "uncaught": false,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ],
        "info": "This is a catch node in Node-RED. It is used to catch errors that occur in any downstream nodes on the same flow. Once an error is caught, it can be handled in a variety of ways depending on the user's specific requirements."
    },
    {
        "id": "a596c13563210cd3",
        "type": "file",
        "z": "f297cec495c6b8be",
        "name": "file writer.",
        "filename": "/data/bench.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 910,
        "y": 620,
        "wires": [
            [
                "75992a64fd9b37f1"
            ]
        ],
        "info": "This node saves the input payload as a string in the specified file path. If the file already exists, it will be overwritten. The node can also create a new file if the specified file path does not exist. The encoding can be set to the desired format, and a newline can be appended to the payload before it's written to the file. The output of this node is the input payload."
    },
    {
        "id": "75992a64fd9b37f1",
        "type": "debug",
        "z": "f297cec495c6b8be",
        "name": "Debug 4.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": [],
        "info": "This is a debug node in Node-RED, which displays messages passing through the associated wires during runtime for debugging purposes."
    },
    {
        "id": "6ccea9b424e51207",
        "type": "subflow:237429fb2a5a7712",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 380,
        "y": 680,
        "wires": [
            [
                "49f531afe4600028"
            ]
        ]
    },
    {
        "id": "b3dc275d4210ec42",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "\"Force GPT4 Change\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "32d8cfeb8705d916"
            ]
        ],
        "info": "This is a \"change\" node which takes an input message and modifies its \"topic\" property to be the string \"gpt4\". The modified message is then output to the node's single output wire."
    },
    {
        "id": "355dc2522a499301",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "\"Force GPT4\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ]
        ],
        "info": "This is a \"change\" node in Node-RED that modifies the incoming message by setting its topic to \"gpt4\". The modified message is then passed on to the next node connected to the output wires."
    },
    {
        "id": "49f531afe4600028",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f297cec495c6b8be",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "f98edf899c38d504"
            ]
        ]
    },
    {
        "id": "f98edf899c38d504",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "\"Filter JavaScript Code Block\"",
        "func": "console.log('parsed code:', msg.parts)\nmsg.payload = msg.payload\n                .filter(({type}) => ['javascript'].indexOf(type) >= 0)\n\nif (msg.payload.length > 1){\n  msg.payload = `throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')`\n  return [null, msg]\n} else if (msg.payload.length < 1){\n  msg.payload = `throw new Error('no code blocks detected, please obey the formatting instructions and return your answer inside a markdown code block.')`\n  return [null, msg]\n} else {\n  msg.payload = msg.payload[0].content; \n  return [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "62612d04c38cb1a4"
            ],
            [
                "62612d04c38cb1a4"
            ]
        ],
        "info": "This is a Function node that filters out any non-JavaScript parts in its input message payload and returns the first JavaScript code block as the new message payload. If there are no code blocks in the input message or there are multiple code blocks, the node will throw an error. The filtered JavaScript code block is then passed as message payload to both of its output wires."
    },
    {
        "id": "62355c1dd139219c",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f297cec495c6b8be",
        "name": "bundle prompt",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "fc173ba8f27163d1",
        "type": "subflow:1254546b0e9fb57c",
        "z": "f297cec495c6b8be",
        "name": "wrap format",
        "x": 390,
        "y": 600,
        "wires": [
            [
                "62355c1dd139219c"
            ]
        ]
    },
    {
        "id": "32d8cfeb8705d916",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "fc173ba8f27163d1"
            ]
        ]
    },
    {
        "id": "90bfb9ae3c54bda3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "\"Tag Flow with smartgpt\"",
        "rules": [
            {
                "t": "set",
                "p": "flow",
                "pt": "msg",
                "to": "smartgpt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ],
        "info": "The \"change\" node with the ID \"90bfb9ae3c54bda3\" adds a new property to the message object with the key \"flow\" and value \"smartgpt\". Then, it passes the modified message to the node with the ID \"922590827a20da6a\" through the wires."
    },
    {
        "id": "1e835fdc3f636679",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "catch node",
        "scope": [
            "6ccea9b424e51207"
        ],
        "uncaught": false,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ],
        "info": "This is a Catch node that is used to catch any errors that occur within the flow of the linked node (indicated by the \"scope\" property). If an error occurs, it will send the error message to the output wire. This can be useful for debugging and handling errors within a specific part of the flow."
    },
    {
        "id": "b0fd40f4cbec0c92",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "Split node.",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "aa85c030e8d55e76"
            ]
        ],
        "info": "This node splits an input message into separate messages based on a specified delimiter. The delimiter can be a string or a specific length of characters, and the output messages can be sent as an array or independently."
    },
    {
        "id": "aa85c030e8d55e76",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "Index Switch Node.",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ],
            [
                "355dc2522a499301"
            ],
            [
                "b3dc275d4210ec42"
            ],
            [
                "32d8cfeb8705d916"
            ]
        ],
        "info": "This is a switch node that looks at the value of `msg.parts.index`, which could be of type string. The node checks the value and sends the message to one of the four outputs based on the equality condition met by the rule."
    },
    {
        "id": "65d8c0dd542c67cc",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "\"Clone Payload Four Times\"",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 360,
        "wires": [
            [
                "aec1f52637b20998"
            ]
        ],
        "info": "This is a function node that takes a message payload and creates a new message payload with the input message payload cloned four times in an array. The new message is then output to the next node in the flow."
    },
    {
        "id": "084093a3278f4f92",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "\"Auto Join Node\"",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "29c04591edb50ab3",
                "75992a64fd9b37f1"
            ]
        ],
        "info": "This is a Join node that creates an object from the message payloads, joins them together using a delimiter `\\\\n`. The accumulated objects are then sent out when either the count or timeout condition is met."
    },
    {
        "id": "aec1f52637b20998",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "Set Sequence Node.",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b0fd40f4cbec0c92"
            ]
        ],
        "info": "This is a \"change\" node in Node-RED that takes in a message and sets a new property \"sequence\" in the message object, with a value of \"parts\". This new property is then passed on to the next connected node."
    },
    {
        "id": "29c04591edb50ab3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "Set Parts Node.",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 500,
        "wires": [
            [
                "b8010df720742aef"
            ]
        ],
        "info": "This is a change node that sets the `parts` attribute of the incoming message payload to the string value `\"sequence\"`. The modified message is then passed on to the next node in the flow."
    },
    {
        "id": "4d96dd6356493577",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "json-to-string",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 870,
        "y": 580,
        "wires": [
            [
                "a596c13563210cd3"
            ]
        ],
        "info": "This is a JSON node that takes a payload as input and converts it to a string. The output will still be in JSON format, but as a string rather than a JSON object."
    },
    {
        "id": "68aa97abce13538f",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "Split Node.",
        "func": "msg.payload = msg.payload.split('\\n').filter(_ => _)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 120,
        "wires": [
            [
                "2d59b8905d9a2034"
            ]
        ],
        "info": "This is a function node that splits the incoming message payload by newlines, removes any empty strings from the resulting array, and passes along the modified payload to the next node."
    },
    {
        "id": "1f104ae03f736fc7",
        "type": "subflow:8843d7f92416211de9ebb963ff4ce28125932878",
        "z": "064c17312433ce15",
        "name": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "d97a19209a785803"
            ]
        ]
    },
    {
        "id": "b433c835d854e271",
        "type": "file in",
        "z": "064c17312433ce15",
        "name": "File-In",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "3fb29f9dbf599fa0"
            ]
        ],
        "info": "This is a \"file in\" node. It reads the contents of a file specified in the node configuration and outputs the content as a message to the next node in the flow."
    },
    {
        "id": "3fb29f9dbf599fa0",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "\"JSON Convert\"",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "fd82d1078959f5bb"
            ]
        ],
        "info": "This is a JSON node that is used to convert data into JSON format. It receives input data via the \"payload\" property and outputs the JSON formatted result."
    },
    {
        "id": "3fc0a9eb4623c177",
        "type": "inject",
        "z": "064c17312433ce15",
        "name": "Inject Node.",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "b433c835d854e271"
            ]
        ],
        "info": "This is an \"inject\" node that sends a message with predefined properties (payload, topic, temperature, language, and min_tokens) when triggered by an inject button or event. The message is sent to the node with ID \"b433c835d854e271\" for further processing."
    },
    {
        "id": "d97a19209a785803",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "JSON-pass node",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6ee86c3a03682354"
            ]
        ],
        "info": "This is a JSON node that takes the payload from the input message and passes it on to the next node in the flow. It can also optionally format the output as a pretty-printed string."
    },
    {
        "id": "6ee86c3a03682354",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "Split Node.",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "761e9408e6850b23"
            ]
        ],
        "info": "This is a \"split\" node in Node-RED. It splits a message payload into separate message parts using a specific delimiter or separator. In this case, the delimiter is a new line character (\"\\n\"). The output messages are sent out through the single wire attached to the node's output."
    },
    {
        "id": "761e9408e6850b23",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "Sort-Eligible-For-Doc.",
        "func": "if (msg.payload.nodes.filter(node => node.id === msg.payload.id).pop().info) {\n    return [null,msg];\n}\n\nconst undocd = msg.payload.nodes.filter(node => {\n    if (!node.type.startsWith('subflow:')) return false;\n\n    const z = node.type.split(':')[1]\n    const subflow = msg.flows.filter(node => node.id === z).pop()\n    if (subflow.info) return false;\n    return true;\n})\n\n\n\nif (undocd.length){\n    return [null, msg];\n}\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "dae7e91edc72c83d"
            ],
            [
                "2e410a19acc23c63"
            ]
        ],
        "info": "This function node is checking if the current node and all the subflow nodes it is connected to have a property called \"info\" in the node configuration. If any node is eligible for documentation, it sends the message to the output 1. If all nodes have \"info\" defined, it sends the message to output 2."
    },
    {
        "id": "bf4826fb44e15c5e",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "\"Set Flows from Payload\"",
        "rules": [
            {
                "t": "set",
                "p": "flows",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 200,
        "wires": [
            [
                "1f104ae03f736fc7"
            ]
        ],
        "info": "This is a node that changes a property of a message it receives. Specifically, it sets the \"flows\" property of the message to the \"payload\" property of the same message. The modified message is then sent to the node connected to its output wires."
    },
    {
        "id": "17c4c2465ba4c355",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "\"Doc Generator\"",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nPlease provide a brief html document to describe it:\n\nstart with a brief description of no more than three sentences,\n\nuse the following three sections as necessary: inputs, outputs, and details\n\nhere's an example document that describes the \"read file\" subflow:\n\n```html\n<p>Reads the contents of a file as either a string or binary buffer.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be read can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>payload <span class=\"property-type\">string | buffer</span></dt>\n    <dd>The contents of the file as either a string or binary buffer.</dd>\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>If not configured in the node, this optional property sets the name of the file to be read.</dd>\n</dl>\n<h3>Details</h3>\n<p>The filename should be an absolute path, otherwise it will be relative to\nthe working directory of the Node-RED process.</p>\n<p>On Windows, path separators may need to be escaped, for example: <code>\\\\Users\\\\myUser</code>.</p>\n<p>Optionally, a text file can be split into lines, outputting one message per line, or a binary file\nsplit into smaller buffer chunks - the chunk size being operating system dependant, but typically 64k (Linux/Mac) or 41k (Windows).</p>\n<p>When split into multiple messages, each message will have a <code>parts</code>\nproperty set, forming a complete message sequence.</p>\n<p>Encoding of input data can be specified from list of encodings if output format is string.</p>\n<p>Errors should be caught and handled using a Catch node.</p>\n```\n\ninputs/outputs should refer only to properties on messages that move through the flow. put environment variable descriptions into the 'details' section.\n\ntake care to be sure that the behavior you report is actually what the subflow does.\n\nremember to respond with html.",
        "output": "str",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "5ac8e1eb22d9be16"
            ]
        ],
        "info": "This is a node of type \"template\", which generates a custom text message based on its input. The message will contain some basic information about a provided node-red subflow, and request a brief html document describing it, focused on its inputs, outputs, and details. The example given describes a \"read file\" subflow, and demonstrates the desired structure of the provided html document."
    },
    {
        "id": "dae7e91edc72c83d",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "JSON Extract Node",
        "property": "payload.nodes",
        "action": "str",
        "pretty": false,
        "x": 530,
        "y": 80,
        "wires": [
            [
                "5412bb9f8505ec2d"
            ]
        ],
        "info": "This is a \"json\" node that takes an input message, extracts the \"nodes\" property from its payload (which is expected to be in the form of a JSON object), and converts it to a string (if it isn't already a string). The modified message is then passed to its output."
    },
    {
        "id": "5db7cfe60d82dc48",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 780,
        "wires": [],
        "info": "This is a \"Debug\" node that can be used to output message data to a debug console or status display in the Node-RED editor. It is set to \"active\" and will emit any incoming messages to its output wires."
    },
    {
        "id": "5412bb9f8505ec2d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "Subflow Payload Node Changer",
        "rules": [
            {
                "t": "set",
                "p": "subflow",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.nodes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 121.25,
        "wires": [
            [
                "651c8b081f5d322f"
            ]
        ],
        "info": "This is a change node that sets the message's subflow property to the payload, and sets the message's payload property to the nodes property of the payload."
    },
    {
        "id": "16e7fb7b2bc1fd73",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "\"Schema Generator\"",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected input message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 870,
        "y": 380,
        "wires": [
            [
                "04838b8e66b73717"
            ]
        ],
        "info": "This is a Template node that takes a message object and applies a Handlebars template to it to produce a string output. The output is a draft-06 JSON schema representing the expected input message format based on the properties used and set in the node's upstream flows. The node discards anything from \"env.get\" as they go elsewhere."
    },
    {
        "id": "1c58af75659287c4",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "\"Schema Out\"",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected output message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "1a45745cdcdcc2a0"
            ]
        ],
        "info": "This is a Template node that takes in a message object and uses a handlebars template to generate a string output. The output string includes information about a subflow and some facts about it, and it requests a response in the form of a JSON schema that represents the expected output message format. Properties observed in the flow will be included in the schema, and anything identified as coming from \"env.get\" will be ignored."
    },
    {
        "id": "1a45745cdcdcc2a0",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "\"Schema-Output-Delete\"",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "outputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ],
        "info": "This is a Change node. It updates the `msg.key` property to the value `outputSchema` and deletes the `msg.format` property. The updated message is then outputted to the single wire connected to it."
    },
    {
        "id": "04838b8e66b73717",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "\"Schema-Setter\"",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "inputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 420,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ],
        "info": "This is a change node. It sets the \"key\" property of the incoming message to the string \"inputSchema\", then deletes the \"format\" property. The modified message is then passed to the node's output."
    },
    {
        "id": "5ac8e1eb22d9be16",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "\"Modify\"",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "info",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 420,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ]
        ],
        "info": "This is a Change node that modifies the message payload by setting the value of the \"key\" property to \"info\" and deleting the \"format\" property. The modified message is then passed on to the next node in the flow."
    },
    {
        "id": "faec021f67110605",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "Cloner.",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 245,
        "wires": [
            [
                "9021cf925783a560"
            ]
        ],
        "info": "This is a function node that takes in a message payload and clones it three times before sending it to the next node."
    },
    {
        "id": "7ec6901fd576cd8c",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "\"mux payload\"",
        "func": "msg.parseError = msg.parseError || 0\nif (!msg.payload[0] || msg.payload.length > 1){\n    msg.payload = `I was unable to parse your output, please wrap your final result inside a codeblock according to github flavored markdown.`\n    msg.parseError++\n    if (msg.parseError > 3){\n        return [msg, null]\n    }\n}\nlet value;\ntry {\n    value = msg.key === 'info' ? msg.payload : JSON.parse(msg.payload);\n} catch (e){\n    msg.parseError++\n    //ignore\n    msg.payload = 'I was unable to parse your output, please ensure you are giving me a valid JSON schema inside a single markdown code block'\n    if (msg.parseError > 3) {\n        return [msg, null]\n    }\n}\n\n\nmsg.payload = {\n    key: msg.key,\n    id: msg.subflow.id,\n    value\n}\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ],
            [
                "add40d01a5910b28"
            ]
        ],
        "info": "This is a function node that takes in a message object and parses its payload, storing the result in a new object. If the payload is empty or contains more than one value, an error message is returned. If the payload is not a valid JSON, there will also be an error message. Otherwise, the parsed payload is stored in a new payload object along with the keys of the original message object, and passed to the next node in the flow."
    },
    {
        "id": "678fd0992d3a0f8a",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "Split node.",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 327.5,
        "wires": [
            [
                "a47dc97cf90527f1"
            ]
        ],
        "info": "This is a \"split\" node that takes an input string and splits it into separate messages based on a specified delimiter. In this case, the delimiter is a newline character \"\\n\". The resulting messages are then passed to the next node for further processing."
    },
    {
        "id": "49c6cd17167fda13",
        "type": "switch",
        "z": "064c17312433ce15",
        "name": "\"Switch by Index Node\"",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 990,
        "y": 320,
        "wires": [
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ]
        ],
        "info": "This is a switch node which examines the value of the \"parts.index\" property of the input message and routes it to one of three outputs based on whether the value is equal to 0, 1, or 2."
    },
    {
        "id": "9021cf925783a560",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "sequence setter",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 286.25,
        "wires": [
            [
                "678fd0992d3a0f8a"
            ]
        ],
        "info": "This node is called \"change\" and is used to modify the content of the input message. In this specific case, it sets the value of `msg.sequence` to the value of `msg.parts`. Once this modification is complete, the node sends the modified message to the next node connected to it."
    },
    {
        "id": "3a05ecf93cf9ab5d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "Set parts to sequence node.",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 575,
        "wires": [
            [
                "2e410a19acc23c63"
            ]
        ],
        "info": "This is a \"Change\" node, which changes the message payload according to the specified rules. In this case, it sets the `parts` property of the message to the value of `sequence`. The modified message is then sent to the next node in the flow."
    },
    {
        "id": "2e410a19acc23c63",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "Auto-Join Node.",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 530,
        "y": 616.25,
        "wires": [
            [
                "2cd00d0c53ecf4fb",
                "53ef31f6afecb1f0"
            ]
        ],
        "info": "This is a \"join\" node in node-red that combines messages with the same topic into a single message. The node can output the messages as a single array or join them into an object. The \"accumulate\" option can be set to true to accumulate messages until a timeout is reached."
    },
    {
        "id": "add40d01a5910b28",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "\"Topic-based Join Node\"",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 530,
        "y": 533.75,
        "wires": [
            [
                "3a05ecf93cf9ab5d",
                "8a22d3df8f823101"
            ]
        ],
        "info": "This is a \"join\" node that combines multiple messages into a single message based on a common topic. The combined messages are output as an array or object, depending on the configuration. The \"joiner\" parameter determines how the messages are concatenated in the final output. There is also an option to accumulate messages over time, and a timeout parameter that can be used to automatically release accumulated messages. The node has two output wires for sending the joined output."
    },
    {
        "id": "2cd00d0c53ecf4fb",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "\"Merge Docs\"",
        "func": "msg.payload.filter(Array.isArray).forEach(arr => {\n    arr.forEach(item => {\n        if (item && item.id && item.key && item.value !== undefined) {\n            console.log('item', item)\n            let flow = msg.flows.find(flow => flow.id === item.id);\n            if (flow) {\n                flow[item.key] = item.value;\n            }\n        }\n    });\n});\n\nmsg.payload = msg.flows;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 657.5,
        "wires": [
            [
                "0b0814f0b4085a24"
            ]
        ],
        "info": "This is a function node that takes in a message object with a payload property consisting of an array of objects. It searches for objects with specific properties (id, key, value) and assigns the value to the corresponding key in the message flows object. The node then sends the updated flows object as its payload to its output."
    },
    {
        "id": "965d9cce35236045",
        "type": "file",
        "z": "064c17312433ce15",
        "name": "File node.",
        "filename": "/data/projects/red-gpt-project/flows.dox.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 740,
        "wires": [
            [
                "5db7cfe60d82dc48"
            ]
        ],
        "info": "This is a \"file\" node in node-red. It writes data to a file specified by the user and can overwrite the existing file contents if specified. The filename can be either a static string or can be dynamic, specified by a previous node in the flow. The \"appendNewline\" property adds a new line character at the end of each write operation. If specified, it can create a new directory and the \"encoding\" property specifies the character encoding used for writing to the file. The node outputs the data written to the file, passed through \"wires.\""
    },
    {
        "id": "0b0814f0b4085a24",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "JSON to String Converter.",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 530,
        "y": 698.75,
        "wires": [
            [
                "965d9cce35236045"
            ]
        ],
        "info": "This node is a JSON node that converts a JSON object in the input message payload to a string. The output will be a string message with the JSON data."
    },
    {
        "id": "5c0a5b90e1f9a2a9",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "\"Catch node named confgpt\"",
        "scope": [
            "afdc81229134a1c7"
        ],
        "uncaught": false,
        "x": 90,
        "y": 440,
        "wires": [
            [
                "b561ced84cd69718",
                "add40d01a5910b28"
            ]
        ],
        "info": "This is a Catch node in node-red. It is named \"confgpt\" and is set to catch errors specifically within the scope of another node with an ID of afdc81229134a1c7. When an error is caught, it will send the error message to two different output nodes."
    },
    {
        "id": "b561ced84cd69718",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 480,
        "wires": [],
        "info": "This is a node that displays messages in the debug sidebar of the Node-RED user interface. It receives messages from its input and forwards them to the debug sidebar. It has options to send messages to the debug console instead, or to the status bar. It is often used for debugging and troubleshooting flows."
    },
    {
        "id": "36739576145f65c6",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "Catch node.",
        "scope": null,
        "uncaught": true,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "cd54a881ed9ca306"
            ]
        ],
        "info": "This is a Catch node. It is used to catch any unhandled errors or runtime exceptions that occur during flow execution. When an exception is caught, the node outputs an error message containing details of the error to connected nodes. The \"scope\" property is set to null, indicating that the node will catch errors from all nodes in the flow. The \"name\" property is set to \"confgpt\", which is likely a reference to some element in the application."
    },
    {
        "id": "cd54a881ed9ca306",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Node Name: \"Debug Node\"",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 680,
        "wires": [],
        "info": "This is a \"Debug\" node which is used for debugging purposes within a Node-RED flow. It will output any messages it receives to the console or sidebar depending on the settings, making it easier to track down errors in the flow. In this particular instance, this debug node is set to output all messages it receives without applying any filtering criteria."
    },
    {
        "id": "55ed6ffd1603d999",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "064c17312433ce15",
        "name": "",
        "x": 540,
        "y": 203.75,
        "wires": [
            [
                "faec021f67110605"
            ]
        ]
    },
    {
        "id": "651c8b081f5d322f",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "Template Node",
        "field": "context",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "we're working with node-red, trying to understand flows before we import them.\n",
        "output": "str",
        "x": 550,
        "y": 162.5,
        "wires": [
            [
                "55ed6ffd1603d999"
            ]
        ],
        "info": "This is a node that sets the `context` property of the incoming message to a specific string template using handlebars syntax. The resulting message is then passed to the node(s) connected to its output."
    },
    {
        "id": "a47dc97cf90527f1",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "\"Clone History Array Function\"",
        "func": "msg.history = JSON.parse(JSON.stringify(msg.history || []))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "49c6cd17167fda13"
            ]
        ],
        "info": "This is a function node that declares a function named \"function 2\". The function deep clones the input message's \"history\" array (as long as it exists)  and returns the message object unchanged. The cloned \"history\" array is then available in subsequent nodes."
    },
    {
        "id": "8a22d3df8f823101",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug 5 Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 540,
        "wires": [],
        "info": "This is a debug node in Node-RED. It displays messages on the debug sidebar and/or status bar of the Node-RED editor. The message can come from any previous node in the flow that is connected to this debug node."
    },
    {
        "id": "53ef31f6afecb1f0",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug Node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 620,
        "wires": [],
        "info": "This is a debug node in Node-RED. It is used to display messages in the debug sidebar of the editor. The messages can be sent from the output of another node in the flow. This node has a toggle option to output the message to the console or the status bar."
    },
    {
        "id": "f9ed70c1b56a8ed7",
        "type": "subflow:50df1246bdaf5119",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "7ec6901fd576cd8c"
            ]
        ]
    },
    {
        "id": "272d17a387e30363",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 20,
        "wires": [],
        "info": "This is a debug node that can be used to display the message properties in the debug tab of the Node-RED editor or in the sidebar of the dashboard. When a message is passed to it, it will output the message payload and other optional fields in the debug panel. It does not modify the message or pass it on to any downstream nodes."
    },
    {
        "id": "6561f76ff8addfbc",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "\"Debug 10 Node\"",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 120,
        "wires": [],
        "info": "This is a debug node in Node-RED, which can be used to display a message payload and/or status in the debug sidebar, the debug tab of the editor, or the console. In this specific example, the debug node is named \"debug 10\", and is currently active. When a message arrives at the node, it will output the message payload to either the sidebar or the console, depending on the node settings. The setting to \"Complete\" specifies that the entire message payload will be outputted. The node does not modify the message in any way and simply provides a mechanism for debugging and monitoring data flowing through the connected nodes."
    },
    {
        "id": "fe14d1df072c2e42",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "Debug 11.",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 160,
        "wires": [],
        "info": "This is a debug node that displays the message payload on the console or sidebar. It is commonly used for debugging and testing flow behavior."
    },
    {
        "id": "cd4c326a3811b3e0",
        "type": "subflow:657c8f0e9df6242e",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 40,
        "wires": [
            [
                "6561f76ff8addfbc"
            ]
        ]
    },
    {
        "id": "fd82d1078959f5bb",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "Template Node.",
        "field": "context",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "we're working our way through a node-red flows.json file\n\nwe can't work on it all at once, so I'm giving you a chunk of it here.\n\nDo your best to follow the rest of the instructions with node-red in mind.\n\nour end goal is to try and infer a description of the entire project from its pieces.\n\nmake use of node id's where available so we can compare notes with each other when we have insight into different nodes in the overall flow.",
        "output": "str",
        "x": 390,
        "y": 40,
        "wires": [
            [
                "cd4c326a3811b3e0"
            ]
        ],
        "info": "The template node sets a msg context to a handlebars template outputting a string message."
    },
    {
        "id": "3f4b4b20e1f7bbd2",
        "type": "inject",
        "z": "eeba88e77478c844",
        "name": "\"Inject\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "ef960b97bda8d6fb"
            ]
        ],
        "info": "This is an inject node that generates a date and sends it downstream, along with several properties in the message object including topic, temperature, language, and min_tokens."
    },
    {
        "id": "7685c12228ceb9c0",
        "type": "debug",
        "z": "eeba88e77478c844",
        "name": "Debug Node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 220,
        "wires": [],
        "info": "This is a debug node that outputs the entire message to the debug sidebar. It is active and has no impact on the status bar."
    },
    {
        "id": "a474ad0b3977327b",
        "type": "debug",
        "z": "eeba88e77478c844",
        "name": "Debug Node.",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 540,
        "wires": [],
        "info": "This is a Debug node in Node-RED that can be used to display the content of the message on the debug sidebar. It has the option to output the message payload to the console or status bar."
    },
    {
        "id": "ef960b97bda8d6fb",
        "type": "subflow:0da2717d76f314c6",
        "z": "eeba88e77478c844",
        "name": "",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "7685c12228ceb9c0"
            ]
        ]
    }
]