[
    {
        "id": "941765e8bb2c32d6",
        "type": "tab",
        "label": "Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e961334cde89144c",
        "type": "tab",
        "label": "gpt queue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f297cec495c6b8be",
        "type": "tab",
        "label": "Benchmark",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "064c17312433ce15",
        "type": "tab",
        "label": "Document",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eeba88e77478c844",
        "type": "tab",
        "label": "Reflection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8dfc33ccdf4bd813",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d295481a52b8fd83",
        "type": "subflow",
        "name": "squash history",
        "info": "\n<p>Combines history data from the start index and most recent index into a new history array.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">start <span class=\"property-type\">number</span></dt>\n    <dd>The index of the starting history value. It can be set as an environment variable in the subflow properties. Default value is 0.</dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>history <span class=\"property-type\">array</span></dt>\n    <dd>An array containing two elements - the starting history value based on the specified index, and the most recent history value.</dd>\n</dl>\n<h3>Details</h3>\n<p>The subflow first retrieves the 'start' value from the environment variables. The starting history value is fetched based on this index, and the latest history value is retrieved as well. The function then creates a new array containing these two values and sets it as the output message 'history' property.</p>\n",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 40,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a25be0e127fc9e24",
        "type": "subflow",
        "name": "stash pop",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "depth",
                "type": "num",
                "value": "1"
            },
            {
                "name": "apply",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "f9e0ec91.e767e",
        "type": "subflow",
        "name": "Minify JSON",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "237429fb2a5a7712",
        "type": "subflow",
        "name": "confgpt",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "7be18892c7b30810"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 140,
                "wires": [
                    {
                        "id": "0e8a88234ef86bb0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "auto4",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02409038fd9362ee",
        "type": "subflow",
        "name": "step by step",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "587cc92797acd5f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 180,
                "wires": [
                    {
                        "id": "4c18e4ef1378f85f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 320,
            "y": 40,
            "wires": [
                {
                    "id": "b9ef7df646a61456",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "520a10812173e701",
        "type": "subflow",
        "name": "stash",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "clear",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "50df1246bdaf5119",
        "type": "subflow",
        "name": "smartcoder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "7cfc8986c5d0b0e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 560,
                "wires": [
                    {
                        "id": "1eaa0d485c0ce940",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 40,
            "wires": [
                {
                    "id": "ef3a21ae34f6475f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7d91a580a2c7c19",
        "type": "subflow",
        "name": "codeblocks",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "blockTypes",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "f8d5a5a4f2b87c52",
        "type": "subflow",
        "name": "flow",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 120,
                "y": 340,
                "wires": [
                    {
                        "id": "95f92e2896b1f816"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 540,
                "wires": [
                    {
                        "id": "6f3eb41d26f826f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "inputLabels": [
            "flow to check"
        ],
        "outputLabels": [
            "valid flow"
        ],
        "status": {
            "x": 420,
            "y": 60,
            "wires": [
                {
                    "id": "9d93e67707347e32",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1254546b0e9fb57c",
        "type": "subflow",
        "name": "bundle formatting",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 260,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "f6dd154f310aa615",
        "type": "subflow",
        "name": "engineer",
        "info": "",
        "category": "persona prompt",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "9f31d45ecb1d3482",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "schema",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "63dba49296c3a9e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "cf072eee9e78f126",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "13d4ac7b7c9898ae",
        "type": "subflow",
        "name": "codeblock",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "a5f18db0d45889f2",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7da9bb553d44f56a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "bb67c6f583a80cc4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "f16c08b0c74d892d",
        "type": "subflow",
        "name": "bundle prompt",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red-dashboard/ui_toast.png"
    },
    {
        "id": "b53b3b7e24a3e4e7",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "coders",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "15470b359beaf8ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 320,
                "wires": [
                    {
                        "id": "8b97ebde3ffd9ecc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "str",
                "value": "3"
            }
        ],
        "meta": {
            "module": "gpt-subflows",
            "version": "0.0.1"
        },
        "color": "#DDAA99",
        "status": {
            "x": 280,
            "y": 40,
            "wires": [
                {
                    "id": "f89c539d2436d4b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "3624ea24a7bdeaa4",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "review prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8843d7f92416211de9ebb963ff4ce28125932878",
        "type": "subflow",
        "name": "Transform nodes into subflows",
        "info": "<details>\n  <summary>Click me</summary>\n\n  ### Heading\n  1. Foo\n  2. Bar\n     * Baz\n     * Qux\n\n  ### Some Code\n  ```js\n  function logSomething(something) {\n    console.log('Something', something);\n  }\n  ```\n</details>",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 220,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Node List"
        ],
        "outputLabels": [
            "Subflows"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "a9cb3f5fc1c3e1b8",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": []
            }
        ]
    },
    {
        "id": "bf9fecd68e29a50a",
        "type": "subflow",
        "name": "analyzer",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "64cb2cf8b2438912"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 380,
                "wires": [
                    {
                        "id": "ec6d7c68553d97b3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48101654b91252fc",
        "type": "subflow",
        "name": "planner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": []
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bfe4dee01d61e0c2",
        "type": "subflow",
        "name": "scanner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "d1331f209c505041"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 160,
                "wires": [
                    {
                        "id": "73176ac6586b6585",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "657c8f0e9df6242e",
        "type": "subflow",
        "name": "summariser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 40,
                "wires": [
                    {
                        "id": "684254331f69bb61"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 480,
                "wires": [
                    {
                        "id": "036e8e789347f95f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d66a7c662b619014",
        "type": "subflow",
        "name": "multigpt",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "8e5d03e6e7f3bb64"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 360,
                "wires": [
                    {
                        "id": "20a76c3c2e5a2985",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "n",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "788598196e86646c",
        "type": "subflow",
        "name": "systemGPT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "7c5c4777d1c8db04"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "bccea17a75c2795e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0da2717d76f314c6",
        "type": "subflow",
        "name": "get info",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 40,
                "wires": [
                    {
                        "id": "c003a05da5c1d6b6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 280,
                "wires": [
                    {
                        "id": "c372f6322d121463",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b4725684f126c9cb",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "in": [
            {
                "x": 180,
                "y": 40,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 520,
                "wires": []
            }
        ]
    },
    {
        "id": "f7b093dd272f8bac",
        "type": "subflow",
        "name": "node describer",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "408fdd3b394de382"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 140,
                "wires": [
                    {
                        "id": "d7466f149b33b961",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2063789a2cb5749b",
        "type": "subflow",
        "name": "name functions",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "cdcf2d5167b70bad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 300,
                "wires": [
                    {
                        "id": "b6722223de78c720",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dfdc2ac9780b331a",
        "type": "subflow",
        "name": "split subflows",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "c0024d1c868deb0b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 280,
                "wires": [
                    {
                        "id": "bc94ddf8ede5ecfd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "85c03d0a20f04b60",
        "type": "subflow",
        "name": "join subflows",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d3d8cb380e40deea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 200,
                "wires": [
                    {
                        "id": "a56164e07e433c62",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d158fb9598ddc8a1",
        "type": "subflow",
        "name": "split clones",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "ae3d7438a247de56"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 120,
                "wires": [
                    {
                        "id": "bca3521325b8599e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "quantity",
                "type": "str",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3007bc4599c68441",
        "type": "subflow",
        "name": "join clones",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 60,
                "wires": [
                    {
                        "id": "e59b627aa23eb618"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 100,
                "wires": [
                    {
                        "id": "e4d6633250606e0d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "80a84193bc2e4430",
        "type": "subflow",
        "name": "check cache",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "a4edc57e00ce9ee8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 380,
                "wires": [
                    {
                        "id": "7ad188968d3bb2cf",
                        "port": 0
                    }
                ]
            },
            {
                "x": 440,
                "y": 260,
                "wires": [
                    {
                        "id": "74fd3bc92e6aa498",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "cacheName",
                "type": "str",
                "value": "gpt"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 40,
            "wires": [
                {
                    "id": "e88e460e71e02bb0",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "28a00f5c49227e1c",
        "type": "subflow",
        "name": "set cache",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "a1a125392352c133"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 360,
                "wires": [
                    {
                        "id": "470b923644652c32",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "cacheName",
                "type": "str",
                "value": "gpt"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "411e0c8d5e99f249",
        "type": "subflow",
        "name": "get cache path",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 140,
                "wires": [
                    {
                        "id": "19da1f8da33d41e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 180,
                "wires": [
                    {
                        "id": "80eb58f6db13f19f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "cacheName",
                "type": "env",
                "value": "cacheName"
            },
            {
                "name": "skipHash",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d7affcdf704b9b54",
        "type": "group",
        "z": "e961334cde89144c",
        "name": "api error recovery",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "09ae223c8021bfb1",
            "dd2038bc71721c1f",
            "b722eb5e7dd70f13",
            "cb040ea047dc84fb",
            "e66c7e2b9c2807aa",
            "45d0a3a5f2e2b024",
            "742d10fb144f3c99",
            "3518c753fac83bd6",
            "c8ed6299a7db1bac",
            "cc62956c3b81303f",
            "e65ce5e8e7852e8e",
            "140b2019757a5c1a"
        ],
        "x": 394,
        "y": 279,
        "w": 452,
        "h": 302
    },
    {
        "id": "f391c50d5db87eaa",
        "type": "group",
        "z": "e961334cde89144c",
        "name": "queue",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8c1cba224d949d09",
            "4b735d4be9323117",
            "b98332fdc0290246",
            "88777962fcded1b0",
            "c005622c337802e1"
        ],
        "x": 394,
        "y": 39,
        "w": 352,
        "h": 222
    },
    {
        "id": "0e6093de46259473",
        "type": "group",
        "z": "e961334cde89144c",
        "name": "preprocess",
        "style": {
            "label": true,
            "color": "#000000",
            "stroke": "#a4a4a4",
            "fill": "#e3f3d3",
            "label-position": "ne"
        },
        "nodes": [
            "5d459fc8-eec7-4ace-94e5-b653c47e5061",
            "b636b9ea5bf45435",
            "a355772753b77403"
        ],
        "x": 174,
        "y": 39,
        "w": 192,
        "h": 162
    },
    {
        "id": "cef1df36791a4d09",
        "type": "group",
        "z": "e961334cde89144c",
        "name": "postprocess",
        "style": {
            "label": true,
            "stroke": "#a4a4a4",
            "fill": "#e3f3d3",
            "color": "#000000",
            "label-position": "ne"
        },
        "nodes": [
            "d2ee1fb0b75e93b6",
            "2d60fcbd28eb92c7",
            "d5f444de1f8ceabb",
            "199a0f0b9465c0f4"
        ],
        "x": 114,
        "y": 299,
        "w": 252,
        "h": 202
    },
    {
        "id": "1f25593ab1ca5615",
        "type": "group",
        "z": "eeba88e77478c844",
        "name": "final output",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000"
        },
        "nodes": [
            "80e5304f2999ce6b",
            "4c1404f306ef020a",
            "7cbbf9d31cb04d05",
            "04701d65f0532579",
            "fba28f405a72bc42",
            "83d6617f69790dd5",
            "b619ecd827a40d17"
        ],
        "x": 54,
        "y": 539,
        "w": 352,
        "h": 282
    },
    {
        "id": "f7178adeaceda352",
        "type": "group",
        "z": "eeba88e77478c844",
        "name": "function node",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "c57ce8a3bf952ff6",
            "11383ea466e70e4b",
            "944ac83066925c0c",
            "1aab229baa275120",
            "c6ddec5c7bd294ce",
            "3bd4d0e7955f70cc",
            "19f0c2acb9f72112"
        ],
        "x": 474,
        "y": 99,
        "w": 572,
        "h": 202
    },
    {
        "id": "5bc27646deb5dff2",
        "type": "group",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "postprocess",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000",
            "label-position": "ne"
        },
        "nodes": [
            "fa37baf5d5d210ae",
            "a9a4aa9e75fae5a9",
            "940f5d5f10860b2b",
            "97640565b3603875",
            "cf28e4a3eb7a131c"
        ],
        "x": 714,
        "y": 1199,
        "w": 372,
        "h": 162
    },
    {
        "id": "d98aa00cb0e639fe",
        "type": "group",
        "z": "eeba88e77478c844",
        "name": "subflows and groups",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "5bc27646deb5dff2",
            "ced0597ce1f434c4",
            "0dc88fbb1e7d8a7d",
            "84ac9bcf508717e9",
            "87f661e4d4efc5c4",
            "90dbd16a6272716d"
        ],
        "x": 468,
        "y": 328,
        "w": 864,
        "h": 1059
    },
    {
        "id": "ced0597ce1f434c4",
        "type": "group",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "info",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9c9950e4acd7fd46",
            "b0fd7fa108cd260f",
            "606d1f8ad57a1a47",
            "048dc877cecba570",
            "264931e378e4a5a7",
            "02fd2ca519599bb4",
            "8712dd2d74b9b5a4",
            "ca17dfeec586fc35",
            "1acd06752cd9811e",
            "b3c1417704b4555c"
        ],
        "x": 1024,
        "y": 799,
        "w": 282,
        "h": 362
    },
    {
        "id": "0dc88fbb1e7d8a7d",
        "type": "group",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "schemas",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cfc30936557757fa",
            "a6a16491f928d8e9",
            "0e180a35fb2b1b7b",
            "6e8a7fd523247b5d",
            "c008dae24103c0c1",
            "88e3d673a22d3c22",
            "bcedaf9d77b92544",
            "7b5a3f0b1690ca11",
            "6eed1c925de3d5cc",
            "0daab422e6bba4dc",
            "b59e9d87cb236291",
            "ca5c4b601f4e38bb",
            "ec635034eef78b6a"
        ],
        "x": 494,
        "y": 799,
        "w": 492,
        "h": 362
    },
    {
        "id": "87f661e4d4efc5c4",
        "type": "group",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "preprocess",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bf7d4c2d39fa90ca",
            "9b387c61d994431e",
            "7792dd5704da3bef",
            "59dbcd23223ecfd4",
            "e95ef67408de2621",
            "0ea75df7d4ee86bd",
            "27c5b82991ce39e0",
            "9a82ffcaf81e87b6",
            "149e5cf088fd6f36",
            "86ab4ec6100a8634",
            "d3a22aa601d47859",
            "763888ff65c3b5cc",
            "244956339585c478",
            "94717d300902b787"
        ],
        "x": 674,
        "y": 354,
        "w": 472,
        "h": 407
    },
    {
        "id": "ef4838b57d8a8292",
        "type": "group",
        "z": "eeba88e77478c844",
        "name": "read flows",
        "style": {
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000",
            "label-position": "ne"
        },
        "nodes": [
            "8b156f3f879bad59",
            "cf9ef8b14dd35b82",
            "ad78713cb0a6df80",
            "9a75803b6cd59345",
            "695eb4b6b7f37008",
            "7fbe99868dadc648",
            "873a38de083427d1",
            "4a10e423688295dc",
            "3fbb22fa17ec34e4",
            "8697b44a8370bc2a",
            "e529869f40e67cec",
            "496544489779fd2a",
            "97f2373daf2bd0cc"
        ],
        "x": 54,
        "y": 99,
        "w": 392,
        "h": 402
    },
    {
        "id": "c8ed6299a7db1bac",
        "type": "junction",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "x": 600,
        "y": 360,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ]
    },
    {
        "id": "bb3eea2eeff7495c",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ]
    },
    {
        "id": "7933d60af84f3844",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 980,
        "y": 440,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ]
    },
    {
        "id": "6d9fb5aa70b87fab",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1240,
        "y": 440,
        "wires": [
            [
                "f9ed70c1b56a8ed7"
            ]
        ]
    },
    {
        "id": "56eeed36b16f302e",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "1c58af75659287c4",
                "16e7fb7b2bc1fd73",
                "17c4c2465ba4c355"
            ]
        ]
    },
    {
        "id": "1eb0bc16cb04fae2",
        "type": "junction",
        "z": "657c8f0e9df6242e",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ]
    },
    {
        "id": "97cebd272ffda79e",
        "type": "junction",
        "z": "0da2717d76f314c6",
        "x": 500,
        "y": 100,
        "wires": [
            [
                "66242fd6d641dc63"
            ]
        ]
    },
    {
        "id": "66242fd6d641dc63",
        "type": "junction",
        "z": "0da2717d76f314c6",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "c372f6322d121463"
            ]
        ]
    },
    {
        "id": "a2ad850716bad89c",
        "type": "junction",
        "z": "2063789a2cb5749b",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "b6722223de78c720"
            ]
        ]
    },
    {
        "id": "b6722223de78c720",
        "type": "junction",
        "z": "2063789a2cb5749b",
        "x": 420,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e459a940eb380922",
        "type": "junction",
        "z": "8dfc33ccdf4bd813",
        "x": 380,
        "y": 460,
        "wires": [
            [
                "ea36d9338cfd3626"
            ]
        ]
    },
    {
        "id": "ea36d9338cfd3626",
        "type": "junction",
        "z": "8dfc33ccdf4bd813",
        "x": 380,
        "y": 140,
        "wires": [
            [
                "6f88846e3073cd41"
            ]
        ]
    },
    {
        "id": "6f88846e3073cd41",
        "type": "junction",
        "z": "8dfc33ccdf4bd813",
        "x": 380,
        "y": 60,
        "wires": [
            [
                "b74d4d377fba494c"
            ]
        ]
    },
    {
        "id": "cc62956c3b81303f",
        "type": "junction",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "x": 820,
        "y": 400,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ]
    },
    {
        "id": "727f976298cfc490",
        "type": "junction",
        "z": "e961334cde89144c",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "199a0f0b9465c0f4"
            ]
        ]
    },
    {
        "id": "ee40332abda7c3ae",
        "type": "junction",
        "z": "e961334cde89144c",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "ccf1e2dee73ee384",
        "type": "junction",
        "z": "e961334cde89144c",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "727f976298cfc490"
            ]
        ]
    },
    {
        "id": "e65ce5e8e7852e8e",
        "type": "junction",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "x": 420,
        "y": 360,
        "wires": [
            [
                "b722eb5e7dd70f13"
            ]
        ]
    },
    {
        "id": "244956339585c478",
        "type": "junction",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "x": 1120,
        "y": 380,
        "wires": [
            [
                "27c5b82991ce39e0"
            ]
        ]
    },
    {
        "id": "07ae0da70cee4ba6",
        "type": "function",
        "z": "d295481a52b8fd83",
        "name": "function 1",
        "func": "msg.history = [msg.history[env.get('start')],msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "40226d5093552176",
        "type": "function",
        "z": "a25be0e127fc9e24",
        "name": "pop",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nlet depth = env.get('depth')\n\nwhile (depth){\n    const stash = msg.stash[key].pop()\n    if (env.get('apply')){\n        msg[key] = stash;\n    }\n    // @ts-ignore\n    depth--;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ffdcd61d.64da38",
        "type": "function",
        "z": "f9e0ec91.e767e",
        "name": "minify-json",
        "func": "const inputList = Array.isArray(msg.history) ? msg.history : [];\n\ninputList.forEach((item) => {\n  item.content = item.content.replace(/```.*\\n([\\s\\S]*?)\\n```/g, (match, codeBlock) => {\n      try {\n          const regex = /(\\n|\\\\n|\\r)\\s*/g; // note the 'g' flag for global replacement\n          return '```json\\n' + codeBlock.replace(regex, ''); + '\\n```';\n      } catch (error) {\n          return match;\n      }\n  });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0e8a88234ef86bb0",
        "type": "link call",
        "z": "237429fb2a5a7712",
        "name": "gpt queue",
        "links": [
            "f2342d49916a4e23"
        ],
        "linkType": "static",
        "timeout": "36001",
        "x": 370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7be18892c7b30810",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auto4",
                "pt": "msg",
                "to": "auto4",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "0e8a88234ef86bb0"
            ]
        ]
    },
    {
        "id": "587cc92797acd5f3",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "last line",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "94270be7a7e81ed1"
            ]
        ]
    },
    {
        "id": "94270be7a7e81ed1",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "02498ebad85fca04"
            ]
        ]
    },
    {
        "id": "4c18e4ef1378f85f",
        "type": "subflow:d295481a52b8fd83",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc85a1ac4b1b979e",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "bundle",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "now put it all together according to the original question.\n\nbe sure to obey the formatting rules.",
        "output": "str",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "5392474c6ec89e72"
            ]
        ]
    },
    {
        "id": "02498ebad85fca04",
        "type": "switch",
        "z": "02409038fd9362ee",
        "name": "bundle?",
        "property": "bundle",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "bc85a1ac4b1b979e"
            ],
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "5392474c6ec89e72",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "b9ef7df646a61456",
        "type": "status",
        "z": "02409038fd9362ee",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dd186aa6a265fc5d",
        "type": "function",
        "z": "520a10812173e701",
        "name": "stash key value ",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nmsg.stash[key].push(JSON.parse(JSON.stringify(msg[key] || '')))\nif (env.get('clear')) {\n    msg[key] = undefined;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "31d7c39f9a6c8c97",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "merge answers",
        "func": "msg.history = [msg.history[0], msg.history[1]]\n\nmsg.history[1].content = `\nhere are ${msg.payload.length} possible solutions:\n${msg.payload.map((t, i) => `\n---${i} START---\n${t}\n---${i} END---\n`).join('\\n')}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "b446b41f8155ed4f"
            ]
        ]
    },
    {
        "id": "83096e44fc2c289e",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "review",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert reviewer and researcher.\n\nThe results above have yet to be deployed.\n\n1 List the issues with each option, ranking each by severity focus on:\n1.1 problems that may prevent it from working.\n1.2 failures to deliver on the specifications of the request.\n2 List what each option gets right, and which takes the overall best approach.\n3 synthesize a complete and robust solution.\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "2fba30a10931ca0c"
            ]
        ]
    },
    {
        "id": "189d162c7a1def8e",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "copy",
        "func": "const num_copies = msg.num_copies || env.get(\"num_copies\") || 1;\nconst copies = [];\nfor(let i = 0; i < num_copies; i++){\n    copies.push(msg.payload);\n}\n\nmsg.payload = copies;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "95fe1a4f7ccf06fb"
            ]
        ]
    },
    {
        "id": "95fe1a4f7ccf06fb",
        "type": "split",
        "z": "50df1246bdaf5119",
        "name": "split copies",
        "splt": "",
        "spltType": "msg",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "4604e40b24b33cb3"
            ]
        ]
    },
    {
        "id": "0e3ce1809b54fad7",
        "type": "join",
        "z": "50df1246bdaf5119",
        "name": "join copies",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "31d7c39f9a6c8c97"
            ]
        ]
    },
    {
        "id": "ef3a21ae34f6475f",
        "type": "status",
        "z": "50df1246bdaf5119",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1c0f8158f5a82cc5",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "schema failure",
        "scope": [
            "86c1b1c593519bdf"
        ],
        "uncaught": false,
        "x": 360,
        "y": 200,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "ec40afea20b4c218",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "empty/multiple",
        "scope": [
            "eef683f2fb7c7a34"
        ],
        "uncaught": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "b34ce9b36761fd82",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{{error.message}}}",
        "output": "str",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "8e7320419df91165"
            ]
        ]
    },
    {
        "id": "8e7320419df91165",
        "type": "subflow:520a10812173e701",
        "z": "50df1246bdaf5119",
        "name": "stash temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "165d1423d6343a0a"
            ]
        ]
    },
    {
        "id": "165d1423d6343a0a",
        "type": "change",
        "z": "50df1246bdaf5119",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 240,
        "wires": [
            [
                "0b7031b9cee904dc"
            ]
        ]
    },
    {
        "id": "0b7031b9cee904dc",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "96069e8a8601f3f2"
            ]
        ]
    },
    {
        "id": "96069e8a8601f3f2",
        "type": "subflow:a25be0e127fc9e24",
        "z": "50df1246bdaf5119",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "bde788de03976b97"
            ]
        ]
    },
    {
        "id": "bde788de03976b97",
        "type": "subflow:d295481a52b8fd83",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "447868e0429fdc8c",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "50df1246bdaf5119",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "eef683f2fb7c7a34"
            ]
        ]
    },
    {
        "id": "eef683f2fb7c7a34",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "get result",
        "func": "console.log('parsed code:', msg.payload)\nmsg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nif (msg.payload.length > 1){\n  throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')\n}\n\nif (msg.payload.length < 1){\n  throw new Error(`no code blocks detected, please obey the formatting instructions:\\n${msg.format}`)\n}\n\nmsg.payload = msg.payload[0].content;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "393f19cb21285e5c"
            ]
        ]
    },
    {
        "id": "393f19cb21285e5c",
        "type": "switch",
        "z": "50df1246bdaf5119",
        "name": "",
        "property": "schema",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 480,
        "wires": [
            [
                "86c1b1c593519bdf"
            ],
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "86c1b1c593519bdf",
        "type": "json",
        "z": "50df1246bdaf5119",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "c24941818a42ca98",
        "type": "subflow:f16c08b0c74d892d",
        "z": "50df1246bdaf5119",
        "name": "bundle prompt",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "189d162c7a1def8e"
            ]
        ]
    },
    {
        "id": "4c1e24c203e0aef7",
        "type": "subflow:1254546b0e9fb57c",
        "z": "50df1246bdaf5119",
        "name": "wrap format",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c24941818a42ca98"
            ]
        ]
    },
    {
        "id": "7cfc8986c5d0b0e2",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "4c1e24c203e0aef7"
            ]
        ]
    },
    {
        "id": "1eaa0d485c0ce940",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "test",
        "func": "if (!msg.test){\n    return msg;\n}\n\nmsg.test(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "77b5dc952d57e266",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "smartGPTish",
        "info": "this column is a coding specific variant of the smartgpt approach",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "6f31904da5faaece",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "parse errors",
        "info": "these are two variants of a parse error:\n\nempty/multiple means we didn't get a markdown code block, or we got too many to be sure which is what we're after. ",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "4604e40b24b33cb3",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "0e3ce1809b54fad7"
            ]
        ]
    },
    {
        "id": "2fba30a10931ca0c",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "b446b41f8155ed4f",
        "type": "subflow:f9e0ec91.e767e",
        "z": "50df1246bdaf5119",
        "name": "minify JSON in history",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "83096e44fc2c289e"
            ]
        ]
    },
    {
        "id": "bc9b2bca5d9d9220",
        "type": "function",
        "z": "b7d91a580a2c7c19",
        "name": "Extract Code Blocks",
        "func": "function extractCodeBlocks(text, blockTypes) {\n  const results = [];\n  const allBlocks = !blockTypes || blockTypes.length === 0;\n\n  let codeBlockRegex;\n  if (allBlocks) {\n    codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)\\n```/g;\n  } else {\n    const regexStr = blockTypes.map((type) => type).join('|');\n    codeBlockRegex = new RegExp(`\\`\\`\\`(${regexStr})\\n([\\\\s\\\\S]*?)\\\\n\\`\\`\\``, 'g');\n    // const jsonBlockRegex = new RegExp(`\\`\\`\\`((json))\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'g');\n    // console.log('manual match?', jsonBlockRegex.exec(text))\n  }\n\n  let match;\n  while ((match = codeBlockRegex.exec(text)) !== null) {\n    // console.log('got match', match);\n    const type = match[1];\n    const content = match[2];\n    results.push({ type, content });\n  }\n\n  return results;\n}\n\nconst text = msg.payload;\n\nconst blockTypes = (env.get('blockTypes') || '').split(',').filter(t => t);\n// console.log('extract', text, blockTypes)\nmsg.payload = extractCodeBlocks(text, blockTypes);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9d93e67707347e32",
        "type": "status",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "95f92e2896b1f816",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse json codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "869689982e74b4dc"
            ]
        ]
    },
    {
        "id": "869689982e74b4dc",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "get result",
        "func": "msg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nmsg.payload = null;\nfor (const {content} of potentials){\n  try {\n    const obj = JSON.parse(content)\n    if (Array.isArray(obj) && obj.every(v => v.id && v.type)){\n      // is likely a node-red flow\n      if (msg.payload) {\n        throw new Error('multiple potential node-red flows detected, we need exactly one.')\n      } else {\n        msg.payload = JSON.stringify(obj)\n      }\n    }\n  } catch (e) {\n    //ignore\n  }\n}\n\nif (!msg.payload){\n  throw new Error('no valid node-red flows detected, remember: must be inside a github flavored markdown block and follow the JSON schema')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "b2728fc75e03f928"
            ]
        ]
    },
    {
        "id": "25e9760c313f1739",
        "type": "json",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "6f3eb41d26f826f2"
            ]
        ]
    },
    {
        "id": "2c5ea07fe592c94f",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{error.message}}\n\nremember, you need to follow these formatting instructions:\n\n{{format}}",
        "output": "str",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "90655d2d5bb817cc"
            ]
        ]
    },
    {
        "id": "06989b788e021dca",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "empty/multiple",
        "scope": [
            "869689982e74b4dc"
        ],
        "uncaught": false,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "719bb2e65b5f411f",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "schema failure",
        "scope": [
            "25e9760c313f1739"
        ],
        "uncaught": false,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "b2728fc75e03f928",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "f8d5a5a4f2b87c52",
        "name": "set node-red schema",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "25e9760c313f1739"
            ]
        ]
    },
    {
        "id": "64d95ba33b6a42ce",
        "type": "subflow:237429fb2a5a7712",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "bb659029013a4888"
            ]
        ]
    },
    {
        "id": "384314168ce8ee86",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "64d95ba33b6a42ce"
            ]
        ]
    },
    {
        "id": "6f3eb41d26f826f2",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "clear schema",
        "rules": [
            {
                "t": "delete",
                "p": "schema",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "schemaString",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "912fae5cd133c953",
        "type": "subflow:d295481a52b8fd83",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "95f92e2896b1f816"
            ]
        ]
    },
    {
        "id": "90655d2d5bb817cc",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash temp",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "bb659029013a4888",
        "type": "subflow:a25be0e127fc9e24",
        "z": "f8d5a5a4f2b87c52",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "912fae5cd133c953"
            ]
        ]
    },
    {
        "id": "12256771ca410bc7",
        "type": "template",
        "z": "1254546b0e9fb57c",
        "name": "format meta instructions",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response will follow these formatting rules:\n{{{format}}}\n{{#schemaString}}\n\nAdditionally, here's a JSON schema reference you will conform to:\n{{{schemaString}}}\n{{/schemaString}}",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d973d3ca1dc6855f",
        "type": "template",
        "z": "f6dd154f310aa615",
        "name": "expert engineer",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert {{language}} software engineer at the top of your game.\nYou are known for writing clean, clear code.\n{{persona}}",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "287a8289c0d9a5d0",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f6dd154f310aa615",
        "name": "",
        "x": 220,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63dba49296c3a9e4",
        "type": "template",
        "z": "9f31d45ecb1d3482",
        "name": "set validation schema",
        "field": "schema",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\"id\", \"type\"],\n    \"properties\": {\n      \"nodes\": {\n        \"not\": {\n          \"type\": \"array\"\n        }\n      },\n      \"status\": {\n        \"not\":{\n          \"type\": \"object\"\n        }\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"info\": {\n        \"type\": \"string\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"in\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"wires\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"out\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"port\": {\n                    \"type\": \"number\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"env\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"type\": {\n              \"type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"meta\": {\n        \"type\": \"object\",\n        \"required\": [],\n        \"properties\": {}\n      },\n      \"color\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
        "output": "json",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cf072eee9e78f126"
            ]
        ]
    },
    {
        "id": "cf072eee9e78f126",
        "type": "change",
        "z": "9f31d45ecb1d3482",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schemaString",
                "pt": "msg",
                "to": "$string(schema)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "31d816170cfa7a8f",
        "type": "template",
        "z": "13d4ac7b7c9898ae",
        "name": "codeblock",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Put the primary output inside a github flavored markdown code block, with an appropriate language label\n{{{format}}}",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb67c6f583a80cc4",
        "type": "template",
        "z": "a5f18db0d45889f2",
        "name": "flow",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your output will be a valid, parseable, node-red array, suitable for import:\nhere's an example:\n\n```json\n[{\"id\":\"13d4ac7b7c9898ae\",\"type\":\"subflow\",\"name\":\"codeblock\",\"info\":\"\",\"category\":\"format\",\"in\":[{\"x\":80,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\"}]}],\"out\":[{\"x\":300,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\",\"port\":0}]}],\"env\":[],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-archive\"},{\"id\":\"31d816170cfa7a8f\",\"type\":\"template\",\"z\":\"13d4ac7b7c9898ae\",\"name\":\"codeblock\",\"field\":\"format\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Put the primary output inside a github flavored markdown code block, with an appropriate language label\\n\\n{{{format}}}\",\"output\":\"str\",\"x\":190,\"y\":100,\"wires\":[[]]}]\n```",
        "output": "str",
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7da9bb553d44f56a",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "bb67c6f583a80cc4"
            ]
        ]
    },
    {
        "id": "c306926b9536fe15",
        "type": "template",
        "z": "f16c08b0c74d892d",
        "name": "set task to payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\n{{{requirements}}}\n\n{{{format}}}\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f89c539d2436d4b8",
        "type": "status",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1a48d7a00270d882",
        "type": "subflow:a5f18db0d45889f2",
        "z": "b53b3b7e24a3e4e7",
        "name": "set format",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "69979c46ebfcda56"
            ]
        ]
    },
    {
        "id": "69c4727b24bef714",
        "type": "subflow:f6dd154f310aa615",
        "z": "b53b3b7e24a3e4e7",
        "name": "set persona",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "1a48d7a00270d882"
            ]
        ]
    },
    {
        "id": "8b97ebde3ffd9ecc",
        "type": "subflow:50df1246bdaf5119",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "env": [
            {
                "name": "num_copies",
                "value": "num_copies",
                "type": "env"
            },
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "15470b359beaf8ad",
        "type": "change",
        "z": "b53b3b7e24a3e4e7",
        "name": "set language",
        "rules": [
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "node-red and javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "69c4727b24bef714"
            ]
        ]
    },
    {
        "id": "006a7cb1b7f3bec3",
        "type": "comment",
        "z": "b53b3b7e24a3e4e7",
        "name": "TODO: put this column inside smartcoder",
        "info": "most of this right hand column should be refactored into \"smartcoder\" and be paramaterized.",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "69979c46ebfcda56",
        "type": "template",
        "z": "b53b3b7e24a3e4e7",
        "name": "set review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "8b97ebde3ffd9ecc"
            ]
        ]
    },
    {
        "id": "76bd320aab4ecae2",
        "type": "template",
        "z": "3624ea24a7bdeaa4",
        "name": "node-red review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d0475e52f2f9d8e9",
        "type": "function",
        "z": "8843d7f92416211de9ebb963ff4ce28125932878",
        "name": "transform nodes",
        "func": "var subflows = msg.payload.sort(({type}) => type === 'subflow')\n                        .reduce(function(acc, node) {\n    if (node.type === \"subflow\") {\n        acc[node.id] = { id: node.id, nodes: [node] };\n    } else if (node.z && acc[node.z]) {\n        acc[node.z].nodes.push(node);\n    }\n    return acc;\n}, {});\n\nvar result = Object.values(subflows).map(\n    function(subflow) {\n        return {id: subflow.id,type: \"subflow\",nodes: JSON.parse(JSON.stringify(subflow.nodes))};\n    }\n);\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cf791c6d0c28776a",
        "type": "subflow:237429fb2a5a7712",
        "z": "a9cb3f5fc1c3e1b8",
        "name": "",
        "x": 320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "417ff54d16e93866",
        "type": "template",
        "z": "bf9fecd68e29a50a",
        "name": "set payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "d127214359ceeb96"
            ]
        ]
    },
    {
        "id": "64cb2cf8b2438912",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "stash payload",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "417ff54d16e93866"
            ]
        ]
    },
    {
        "id": "c7cbd7f5c3cbdaa8",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "restore payload",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "cfc30e5be9fe3f3e"
            ]
        ]
    },
    {
        "id": "4d88bceb18e53451",
        "type": "change",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "c7cbd7f5c3cbdaa8"
            ]
        ]
    },
    {
        "id": "cfc30e5be9fe3f3e",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "clear history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "ec6d7c68553d97b3"
            ]
        ]
    },
    {
        "id": "d127214359ceeb96",
        "type": "subflow:237429fb2a5a7712",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "4d88bceb18e53451"
            ]
        ]
    },
    {
        "id": "ec6d7c68553d97b3",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 240,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "54aae0f36c581409",
        "type": "template",
        "z": "48101654b91252fc",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "3e0c33f17172fc85"
            ]
        ]
    },
    {
        "id": "3e0c33f17172fc85",
        "type": "link call",
        "z": "48101654b91252fc",
        "name": "gpt queue",
        "links": [],
        "linkType": "static",
        "timeout": "3600",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "f6821c700cf97b2f"
            ]
        ]
    },
    {
        "id": "16ea30faba5cfc3c",
        "type": "subflow:520a10812173e701",
        "z": "48101654b91252fc",
        "name": "",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "54aae0f36c581409"
            ]
        ]
    },
    {
        "id": "9bd6b5f18d3a0ecc",
        "type": "subflow:a25be0e127fc9e24",
        "z": "48101654b91252fc",
        "name": "",
        "x": 240,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f6821c700cf97b2f",
        "type": "change",
        "z": "48101654b91252fc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "9bd6b5f18d3a0ecc"
            ]
        ]
    },
    {
        "id": "92fd8467775c1835",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "73176ac6586b6585"
            ]
        ]
    },
    {
        "id": "d1331f209c505041",
        "type": "split",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "92fd8467775c1835"
            ]
        ]
    },
    {
        "id": "73176ac6586b6585",
        "type": "join",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "de2f72edd32ba706",
        "type": "template",
        "z": "657c8f0e9df6242e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a concise yet expressive analyst. You are good at synthesizing and summarizing observations.\n\n{{{context}}}\n\nhere is the subject matter:\n{{{payload}}}\n\nYou have just been presented with the following pieces of analysis of a larger work:\n{{{analysis}}}\n\nPlease give a summary of the relevant information.",
        "output": "str",
        "x": 260,
        "y": 320,
        "wires": [
            [
                "eefbfc8dd8aecccf"
            ]
        ]
    },
    {
        "id": "eefbfc8dd8aecccf",
        "type": "subflow:237429fb2a5a7712",
        "z": "657c8f0e9df6242e",
        "name": "",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "99961076a36af9ed",
                "1ccb9174383664e1"
            ]
        ]
    },
    {
        "id": "99961076a36af9ed",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "recombine",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "04a9a0c8084ec082",
                "036e8e789347f95f"
            ]
        ]
    },
    {
        "id": "627a5403fe4f266f",
        "type": "batch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "mode": "count",
        "count": "2",
        "overlap": "1",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "a401ef68997c6b2a"
            ]
        ]
    },
    {
        "id": "081d39183e2323d2",
        "type": "split",
        "z": "657c8f0e9df6242e",
        "name": "",
        "splt": "2000",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "6f07e77c85840df0"
            ]
        ]
    },
    {
        "id": "a401ef68997c6b2a",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 240,
        "wires": [
            [
                "0c3087c33362c56c"
            ]
        ]
    },
    {
        "id": "1bf095ea109bae31",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 160,
        "wires": [
            [
                "627a5403fe4f266f",
                "1b0a1216ae61c7a3"
            ]
        ]
    },
    {
        "id": "e00be323f0003974",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "parts.count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$sum([parts.index,1])",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "1bf095ea109bae31"
            ],
            [
                "627a5403fe4f266f"
            ]
        ]
    },
    {
        "id": "0c3087c33362c56c",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "willComplete",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "8d02872f841e29bf"
            ]
        ]
    },
    {
        "id": "036e8e789347f95f",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "2000",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "e94dc57b47a49387"
            ],
            [
                "1eb0bc16cb04fae2",
                "92ac0da2b13b0b14"
            ]
        ]
    },
    {
        "id": "e94dc57b47a49387",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 460,
        "wires": []
    },
    {
        "id": "4efd493223b29ffe",
        "type": "catch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "4962c2ab1cf86f48"
            ]
        ]
    },
    {
        "id": "4962c2ab1cf86f48",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "summarizer error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "1b0a1216ae61c7a3",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "complete msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_msgid",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "6f07e77c85840df0",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "657c8f0e9df6242e",
        "name": "",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "de2f72edd32ba706"
            ]
        ]
    },
    {
        "id": "8d02872f841e29bf",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6f07e77c85840df0"
            ]
        ]
    },
    {
        "id": "04a9a0c8084ec082",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "combined",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_msgid",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 400,
        "wires": []
    },
    {
        "id": "1ccb9174383664e1",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "chunk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "92ac0da2b13b0b14",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "cycle",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 520,
        "wires": []
    },
    {
        "id": "684254331f69bb61",
        "type": "json",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "f8bdadc87267634b"
            ]
        ]
    },
    {
        "id": "887bb48be4e86542",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "036e8e789347f95f"
            ]
        ]
    },
    {
        "id": "40663c267e076c78",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 120,
        "wires": [
            [
                "e00be323f0003974"
            ]
        ]
    },
    {
        "id": "f8bdadc87267634b",
        "type": "function",
        "z": "657c8f0e9df6242e",
        "name": "function 3",
        "func": "msg.payload = msg.payload.substring(0, msg.payload.length / 5)\nnode.log(\"msg.payload.length \"+ msg.payload.length  );\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ]
    },
    {
        "id": "b8a97edc759eb948",
        "type": "subflow:237429fb2a5a7712",
        "z": "d66a7c662b619014",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "a57074888a023788"
            ]
        ]
    },
    {
        "id": "36b8184a08d13132",
        "type": "function",
        "z": "d66a7c662b619014",
        "name": "assemble payloads",
        "func": "msg.payload = msg.full.data.choices.map(({message},i) => \n`---OPTION ${i} START---\\n${message.content}\\n---OPTION ${i} END---\\n`).join('')\n\nmsg.payload = `Here are ${msg.full.data.choices.length} options:\\n${msg.payload}`\n\nmsg.history[msg.history.length - 1].content = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "56543d4e523ebe7f"
            ]
        ]
    },
    {
        "id": "56543d4e523ebe7f",
        "type": "template",
        "z": "d66a7c662b619014",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Please compare and evaluate the options, and synthesize them into a single best answer",
        "output": "str",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "e5607ee4eaaa50d5"
            ]
        ]
    },
    {
        "id": "fec09085fa1a30ec",
        "type": "subflow:237429fb2a5a7712",
        "z": "d66a7c662b619014",
        "name": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "20a76c3c2e5a2985"
            ]
        ]
    },
    {
        "id": "8e5d03e6e7f3bb64",
        "type": "change",
        "z": "d66a7c662b619014",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "n",
                "pt": "msg",
                "to": "n",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "b8a97edc759eb948"
            ]
        ]
    },
    {
        "id": "e5607ee4eaaa50d5",
        "type": "change",
        "z": "d66a7c662b619014",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "n",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "fec09085fa1a30ec"
            ]
        ]
    },
    {
        "id": "a57074888a023788",
        "type": "subflow:520a10812173e701",
        "z": "d66a7c662b619014",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "36b8184a08d13132"
            ]
        ]
    },
    {
        "id": "20a76c3c2e5a2985",
        "type": "subflow:a25be0e127fc9e24",
        "z": "d66a7c662b619014",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 220,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "bccea17a75c2795e",
        "type": "function",
        "z": "788598196e86646c",
        "name": "set system message into history",
        "func": "msg.history = [{\n    role: 'system',\n    content: msg.system\n}]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7c5c4777d1c8db04",
        "type": "json",
        "z": "788598196e86646c",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "bccea17a75c2795e"
            ]
        ]
    },
    {
        "id": "080cad2872ab96ce",
        "type": "json",
        "z": "0da2717d76f314c6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "3e54165e7294db19"
            ]
        ]
    },
    {
        "id": "3e54165e7294db19",
        "type": "subflow:237429fb2a5a7712",
        "z": "0da2717d76f314c6",
        "name": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "a7b4d25950105f75"
            ]
        ]
    },
    {
        "id": "c003a05da5c1d6b6",
        "type": "switch",
        "z": "0da2717d76f314c6",
        "name": "ignore types",
        "property": "node.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "link.*|subflow.*|junction|tab|status",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "97cebd272ffda79e"
            ],
            [
                "8c111b3dbf792ca6"
            ]
        ]
    },
    {
        "id": "a7b4d25950105f75",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "node.info",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "history",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 240,
        "wires": [
            [
                "c372f6322d121463"
            ]
        ]
    },
    {
        "id": "c372f6322d121463",
        "type": "change",
        "z": "0da2717d76f314c6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "node",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8c111b3dbf792ca6",
        "type": "switch",
        "z": "0da2717d76f314c6",
        "name": "ignore info",
        "property": "node.info",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 120,
        "wires": [
            [
                "97cebd272ffda79e"
            ],
            [
                "080cad2872ab96ce"
            ]
        ]
    },
    {
        "id": "408fdd3b394de382",
        "type": "template",
        "z": "f7b093dd272f8bac",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYour job is to write documentation.\nThe user will provide you with a json string of a node-red node or subflow.\nYou must analyze it and respond with a brief description of what the node or subflow does.",
        "output": "str",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "d7466f149b33b961"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "d7466f149b33b961",
        "type": "subflow:788598196e86646c",
        "z": "f7b093dd272f8bac",
        "name": "",
        "x": 210,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6f0b43126a3d3089",
        "type": "change",
        "z": "2063789a2cb5749b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$string(node)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 140,
        "wires": [
            [
                "6451da63a4bc4c3f"
            ]
        ]
    },
    {
        "id": "abc59e2895a6bd61",
        "type": "subflow:237429fb2a5a7712",
        "z": "2063789a2cb5749b",
        "name": "",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "3501eb14ac590776"
            ]
        ]
    },
    {
        "id": "50495c457b07dafa",
        "type": "subflow:788598196e86646c",
        "z": "2063789a2cb5749b",
        "name": "",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "abc59e2895a6bd61"
            ]
        ]
    },
    {
        "id": "1c07d510078ca6e5",
        "type": "switch",
        "z": "2063789a2cb5749b",
        "name": "check name empty",
        "property": "node.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "a2ad850716bad89c"
            ],
            [
                "6f0b43126a3d3089"
            ]
        ]
    },
    {
        "id": "6451da63a4bc4c3f",
        "type": "template",
        "z": "2063789a2cb5749b",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYour job is to name nodes such that they will be understandable at a glance.\nThe user will provide you with a description of a function node.\nYou must respond with a short (< 10 word) name for the node, based on the description.\nreturn only the name, do not include quotation marks.\n",
        "output": "str",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "50495c457b07dafa"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "cdcf2d5167b70bad",
        "type": "switch",
        "z": "2063789a2cb5749b",
        "name": "check is function",
        "property": "node.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "a2ad850716bad89c"
            ],
            [
                "1c07d510078ca6e5"
            ]
        ]
    },
    {
        "id": "3501eb14ac590776",
        "type": "change",
        "z": "2063789a2cb5749b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "node.name",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 300,
        "wires": [
            [
                "b6722223de78c720"
            ]
        ]
    },
    {
        "id": "b25ae66c23eb2da6",
        "type": "function",
        "z": "dfdc2ac9780b331a",
        "name": "transform nodes",
        "func": "var subflows = msg.payload.sort(({type}) => type === 'subflow')\n                        .reduce(function(acc, node) {\n    if (node.type === \"subflow\") {\n        acc[node.id] = { id: node.id, nodes: [node] };\n    } else if (node.z && acc[node.z]) {\n        acc[node.z].nodes.push(node);\n    }\n    return acc;\n}, {});\n\nvar result = Object.values(subflows).map(\n    function(subflow) {\n        return {id: subflow.id,type: \"subflow\",nodes: JSON.parse(JSON.stringify(subflow.nodes))};\n    }\n);\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "5c2bb6d93f88063a"
            ]
        ]
    },
    {
        "id": "e4d65da9a06af7b9",
        "type": "split",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "81c9f3c403cf7a7a"
            ]
        ]
    },
    {
        "id": "bc94ddf8ede5ecfd",
        "type": "change",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$string(subflow.nodes)",
                "tot": "jsonata",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c0024d1c868deb0b",
        "type": "json",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 190,
        "y": 40,
        "wires": [
            [
                "85824bb90ccdb5ad"
            ]
        ]
    },
    {
        "id": "85824bb90ccdb5ad",
        "type": "change",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "flows",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "b25ae66c23eb2da6"
            ]
        ]
    },
    {
        "id": "5c2bb6d93f88063a",
        "type": "subflow:520a10812173e701",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "parts",
                "type": "str"
            }
        ],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "e4d65da9a06af7b9"
            ]
        ]
    },
    {
        "id": "81c9f3c403cf7a7a",
        "type": "change",
        "z": "dfdc2ac9780b331a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subflow",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 240,
        "wires": [
            [
                "bc94ddf8ede5ecfd"
            ]
        ]
    },
    {
        "id": "57c769c25e9556c1",
        "type": "function",
        "z": "85c03d0a20f04b60",
        "name": "map info into flows",
        "func": "for (const inner of msg.payload) {\n    for (const { id, key, content } of inner){\n        msg.flows = msg.flows.map(node => {\n            if (node.id === id){\n                node[key] = content;\n            }\n\n            return node;\n        })\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "e3296a3158dbf064"
            ]
        ]
    },
    {
        "id": "d3d8cb380e40deea",
        "type": "join",
        "z": "85c03d0a20f04b60",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 40,
        "wires": [
            [
                "bae3e029bd0e0875"
            ]
        ]
    },
    {
        "id": "e3296a3158dbf064",
        "type": "change",
        "z": "85c03d0a20f04b60",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "flows",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "a56164e07e433c62"
            ]
        ]
    },
    {
        "id": "a56164e07e433c62",
        "type": "json",
        "z": "85c03d0a20f04b60",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bae3e029bd0e0875",
        "type": "subflow:a25be0e127fc9e24",
        "z": "85c03d0a20f04b60",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "parts",
                "type": "str"
            }
        ],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "57c769c25e9556c1"
            ]
        ]
    },
    {
        "id": "bca3521325b8599e",
        "type": "split",
        "z": "d158fb9598ddc8a1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 170,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ae3d7438a247de56",
        "type": "function",
        "z": "d158fb9598ddc8a1",
        "name": "clone",
        "func": "const payload = []\n\n// @ts-ignore\nfor (let i = 0; i < env.get('quantity'); i++){\n    payload.push(JSON.parse(JSON.stringify(msg.payload)))\n}\n\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 40,
        "wires": [
            [
                "b11f55ace9353766"
            ]
        ]
    },
    {
        "id": "b11f55ace9353766",
        "type": "subflow:520a10812173e701",
        "z": "d158fb9598ddc8a1",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "parts",
                "type": "str"
            }
        ],
        "x": 170,
        "y": 80,
        "wires": [
            [
                "bca3521325b8599e"
            ]
        ]
    },
    {
        "id": "e59b627aa23eb618",
        "type": "join",
        "z": "3007bc4599c68441",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "e4d6633250606e0d"
            ]
        ]
    },
    {
        "id": "e4d6633250606e0d",
        "type": "subflow:a25be0e127fc9e24",
        "z": "3007bc4599c68441",
        "name": "",
        "env": [
            {
                "name": "key",
                "value": "parts",
                "type": "str"
            }
        ],
        "x": 160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a7cf5100c8c7fecb",
        "type": "file in",
        "z": "80a84193bc2e4430",
        "name": "cache hit",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "f74815a576c072c6"
            ]
        ]
    },
    {
        "id": "f7b65bbb6bfb6669",
        "type": "catch",
        "z": "80a84193bc2e4430",
        "name": "cache miss",
        "scope": [
            "a7cf5100c8c7fecb",
            "f74815a576c072c6"
        ],
        "uncaught": false,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "860f8fd641e8d824"
            ]
        ]
    },
    {
        "id": "7ad188968d3bb2cf",
        "type": "change",
        "z": "80a84193bc2e4430",
        "name": "remove errors",
        "rules": [
            {
                "t": "delete",
                "p": "error",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_error",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a4edc57e00ce9ee8",
        "type": "subflow:411e0c8d5e99f249",
        "z": "80a84193bc2e4430",
        "name": "",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "7e207e98c29a6262"
            ]
        ]
    },
    {
        "id": "f74815a576c072c6",
        "type": "function",
        "z": "80a84193bc2e4430",
        "name": "parse hit",
        "func": "let hits = flow.get('hits') || 0\nhits++\nflow.set('hits', hits)\nnode.status({ fill: \"green\", shape: \"dot\", text: `${hits}` });\n\nlet rval = JSON.parse(msg.payload)\nrval._linkSource = msg._linkSource;\nreturn rval;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 220,
        "wires": [
            [
                "74fd3bc92e6aa498"
            ]
        ]
    },
    {
        "id": "e88e460e71e02bb0",
        "type": "status",
        "z": "80a84193bc2e4430",
        "name": "",
        "scope": null,
        "x": 260,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7e207e98c29a6262",
        "type": "subflow:520a10812173e701",
        "z": "80a84193bc2e4430",
        "name": "",
        "x": 250,
        "y": 140,
        "wires": [
            [
                "a7cf5100c8c7fecb"
            ]
        ]
    },
    {
        "id": "860f8fd641e8d824",
        "type": "subflow:a25be0e127fc9e24",
        "z": "80a84193bc2e4430",
        "name": "",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "7ad188968d3bb2cf"
            ]
        ]
    },
    {
        "id": "74fd3bc92e6aa498",
        "type": "subflow:a25be0e127fc9e24",
        "z": "80a84193bc2e4430",
        "name": "",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 260,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "07443dbd076220b3",
        "type": "file",
        "z": "28a00f5c49227e1c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "1c2d4b76a7e0d513"
            ]
        ]
    },
    {
        "id": "470b923644652c32",
        "type": "change",
        "z": "28a00f5c49227e1c",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "hash",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a125392352c133",
        "type": "subflow:411e0c8d5e99f249",
        "z": "28a00f5c49227e1c",
        "name": "",
        "env": [
            {
                "name": "skipHash",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "2254ae343f93c143"
            ]
        ]
    },
    {
        "id": "5e6bb07d897ef6c2",
        "type": "function",
        "z": "28a00f5c49227e1c",
        "name": "function 8",
        "func": "msg.payload = jsonStringifySafe(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonStringifySafe",
                "module": "json-stringify-safe"
            }
        ],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "07443dbd076220b3"
            ]
        ]
    },
    {
        "id": "1c2d4b76a7e0d513",
        "type": "subflow:a25be0e127fc9e24",
        "z": "28a00f5c49227e1c",
        "name": "",
        "x": 340,
        "y": 320,
        "wires": [
            [
                "470b923644652c32"
            ]
        ]
    },
    {
        "id": "2254ae343f93c143",
        "type": "subflow:520a10812173e701",
        "z": "28a00f5c49227e1c",
        "name": "",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "5e6bb07d897ef6c2"
            ]
        ]
    },
    {
        "id": "32af23ccef06dd55",
        "type": "function",
        "z": "411e0c8d5e99f249",
        "name": "hash msg",
        "func": "function computeSHA256(_obj) {\n    const {history, temperature, payload, n, max_tokens} = _obj\n    const obj = { history, temperature, payload, n, max_tokens };\n    const jsonString = jsonStringifySafe(obj);\n    const hash = crypto.createHash('sha256');\n    hash.update(jsonString);\n    return hash.digest('hex');\n}\n\nmsg.hash = undefined;\nmsg.hash = computeSHA256(msg);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            },
            {
                "var": "jsonStringifySafe",
                "module": "json-stringify-safe"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "80eb58f6db13f19f"
            ]
        ]
    },
    {
        "id": "80eb58f6db13f19f",
        "type": "change",
        "z": "411e0c8d5e99f249",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$join([\"/data/cache/\", $env('cacheName'),\"/\", hash])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "19da1f8da33d41e4",
        "type": "switch",
        "z": "411e0c8d5e99f249",
        "name": "",
        "property": "skipHash",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "32af23ccef06dd55"
            ],
            [
                "80eb58f6db13f19f"
            ]
        ]
    },
    {
        "id": "414ddee1287efb66",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "941765e8bb2c32d6",
        "name": "flowcoder",
        "env": [
            {
                "name": "num_copies",
                "value": "3",
                "type": "num"
            }
        ],
        "x": 120,
        "y": 240,
        "wires": [
            [
                "99b359093fa5ee99"
            ]
        ]
    },
    {
        "id": "733c94970d337f9c",
        "type": "inject",
        "z": "941765e8bb2c32d6",
        "name": "set task props",
        "props": [
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.7",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a701ddb8190d147a"
            ]
        ]
    },
    {
        "id": "c13f6114b4ebbbcc",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I need a node-red subflow according to the following Specification:\n\nmsg.payload starts as an array of node-red node objects with the following properties:\n\nid,\ntype,\nz (optional)\n\nI want this to be transformed into an array of new objects, one for each 'subflow' type in the incoming message.\n\nthe new objects should have:\nid: the id of the subflow\nnodes: a deep clone of the subflow node, and all nodes with the subflows 'id' as their 'z' property\n\ntype: 'subflow'\n\nplease provide me with a valid, syntactically correct JSON string that I can use to import the subflow above",
        "output": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "99b359093fa5ee99",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 120,
        "y": 280,
        "wires": []
    },
    {
        "id": "a701ddb8190d147a",
        "type": "subflow:3624ea24a7bdeaa4",
        "z": "941765e8bb2c32d6",
        "name": "set node-red review",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "c13f6114b4ebbbcc"
            ]
        ]
    },
    {
        "id": "ffc06a5a5bbea58f",
        "type": "batch",
        "z": "941765e8bb2c32d6",
        "name": "",
        "mode": "count",
        "count": 10,
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8c1cba224d949d09",
        "type": "delay",
        "z": "e961334cde89144c",
        "g": "f391c50d5db87eaa",
        "name": "gpt4 limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "13",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "88777962fcded1b0"
            ]
        ]
    },
    {
        "id": "4b735d4be9323117",
        "type": "delay",
        "z": "e961334cde89144c",
        "g": "f391c50d5db87eaa",
        "name": "turbo limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "15",
        "nbRateUnits": "60",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 120,
        "wires": [
            [
                "88777962fcded1b0"
            ]
        ]
    },
    {
        "id": "b98332fdc0290246",
        "type": "switch",
        "z": "e961334cde89144c",
        "g": "f391c50d5db87eaa",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpt4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turbo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 80,
        "wires": [
            [
                "8c1cba224d949d09"
            ],
            [
                "4b735d4be9323117"
            ]
        ]
    },
    {
        "id": "f2342d49916a4e23",
        "type": "link in",
        "z": "e961334cde89144c",
        "name": "gpt in",
        "links": [],
        "x": 75,
        "y": 80,
        "wires": [
            [
                "b636b9ea5bf45435"
            ]
        ]
    },
    {
        "id": "9f4d0154bcaa5bdb",
        "type": "link out",
        "z": "e961334cde89144c",
        "name": "gpt out",
        "mode": "return",
        "links": [],
        "x": 355,
        "y": 540,
        "wires": []
    },
    {
        "id": "1d0773bcf3416404",
        "type": "chatgpt",
        "z": "e961334cde89144c",
        "name": "",
        "Organization": " ",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "727f976298cfc490"
            ]
        ]
    },
    {
        "id": "09ae223c8021bfb1",
        "type": "catch",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "catch gpt errors",
        "scope": [
            "1d0773bcf3416404"
        ],
        "uncaught": false,
        "x": 500,
        "y": 320,
        "wires": [
            [
                "45d0a3a5f2e2b024"
            ]
        ]
    },
    {
        "id": "dd2038bc71721c1f",
        "type": "change",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "error",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 360,
        "wires": [
            [
                "ee40332abda7c3ae"
            ]
        ]
    },
    {
        "id": "b722eb5e7dd70f13",
        "type": "switch",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "known errors",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "429",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "502",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "read ECONNRESET",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "socket hang up",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Rate limit reached",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "maximum context length",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 510,
        "y": 400,
        "wires": [
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "3518c753fac83bd6"
            ],
            [
                "cb040ea047dc84fb"
            ],
            [
                "742d10fb144f3c99"
            ]
        ]
    },
    {
        "id": "d2ee1fb0b75e93b6",
        "type": "subflow:f9e0ec91.e767e",
        "z": "e961334cde89144c",
        "g": "cef1df36791a4d09",
        "name": "minify JSON in history",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "2d60fcbd28eb92c7"
            ]
        ]
    },
    {
        "id": "2d60fcbd28eb92c7",
        "type": "change",
        "z": "e961334cde89144c",
        "g": "cef1df36791a4d09",
        "name": "clear max_tokens",
        "rules": [
            {
                "t": "delete",
                "p": "max_tokens",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 420,
        "wires": [
            [
                "d5f444de1f8ceabb"
            ]
        ]
    },
    {
        "id": "d5f444de1f8ceabb",
        "type": "subflow:a25be0e127fc9e24",
        "z": "e961334cde89144c",
        "g": "cef1df36791a4d09",
        "name": "restore topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "9f4d0154bcaa5bdb"
            ]
        ]
    },
    {
        "id": "5d459fc8-eec7-4ace-94e5-b653c47e5061",
        "type": "function",
        "z": "e961334cde89144c",
        "g": "0e6093de46259473",
        "name": "headroom",
        "func": "const encode = gpt3Encoder.encode;\nmsg.topic = msg.topic || 'turbo';\nif (!msg.max_tokens) {\n    let sum = (msg.history || []).filter(e => e).reduce((acc, cur) => acc + encode(cur.content).length, 0);\n    sum += encode(msg.payload).length;\n    sum += 300; // give the encoder some wiggle room\n    node.log('token sum: ' + sum);\n    if (env.auto4\n    && (msg.topic !== 'gpt4') \n    // @ts-ignore\n    && (4096 - sum < (msg.min_tokens || 0))) {\n        msg.topic = 'gpt4'\n    }\n\n    // if (env.get('auto4')\n    // && (msg.topic == 'gpt4')\n    // && (4096 - sum > (msg.min_tokens || 0))){\n    //     msg.topic = 'turbo';\n    // }\n    \n    msg.max_tokens = ((msg.topic === 'gpt4') ? 8192 : 4096) - sum;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "a355772753b77403"
            ]
        ]
    },
    {
        "id": "b636b9ea5bf45435",
        "type": "subflow:520a10812173e701",
        "z": "e961334cde89144c",
        "g": "0e6093de46259473",
        "name": "stash topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "5d459fc8-eec7-4ace-94e5-b653c47e5061"
            ]
        ]
    },
    {
        "id": "cb040ea047dc84fb",
        "type": "function",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "fix token overage",
        "func": "function extractNumbersFromString(str) {\n    const regex = /\\d+/g; // Regular expression to match one or more digits\n    const matches = str.match(regex); // Extract all numbers from the string\n\n    const result = {\n        maximumContextLength: parseInt(matches[0]),\n        requestedTokens: parseInt(matches[1]),\n        tokensInMessages: parseInt(matches[2]),\n        tokensInCompletion: parseInt(matches[3])\n    };\n\n    return result;\n}\n\nconst values = extractNumbersFromString(msg.error.message);\nconsole.log('values', values)\nconst overage = values.tokensInCompletion - (values.requestedTokens - values.maximumContextLength);\nif (values.tokensInCompletion - msg.min_tokens < overage) {\n    // we just miscalculated, but we're still good\n    msg.max_tokens = values.tokensInCompletion - overage\n} else if (msg.auto4 && msg.topic === 'turbo') {\n    // upgrade model\n    msg.topic = 'gpt4'\n} else if (values.tokensInCompletion > overage) {\n    msg.max_tokens = values.tokensInCompletion - overage;\n} else {\n    // bail\n    msg.payload = 'unrecoverable token overage'\n    return [null, msg];\n}\n\nmsg.history.pop()\n\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 440,
        "wires": [
            [
                "cc62956c3b81303f"
            ],
            [
                "e66c7e2b9c2807aa"
            ]
        ]
    },
    {
        "id": "e66c7e2b9c2807aa",
        "type": "debug",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "fatal",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 520,
        "wires": []
    },
    {
        "id": "45d0a3a5f2e2b024",
        "type": "function",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "clean history",
        "func": "if (msg.history){\n    const seen = new Set()\n    msg.history = msg.history.filter(item => {\n        if (seen.has(item.content)){\n            return false;\n        }\n        seen.add(item.content)\n        return true;\n    })\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "e65ce5e8e7852e8e"
            ]
        ]
    },
    {
        "id": "742d10fb144f3c99",
        "type": "switch",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "ignore duplicates",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "That model is currently overloaded with other requests",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 480,
        "wires": [
            [],
            [],
            [
                "e66c7e2b9c2807aa"
            ]
        ]
    },
    {
        "id": "3518c753fac83bd6",
        "type": "function",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "set rate limit",
        "func": "flow.set(\"rate_limit_encountered\", true);\nnode.status({ fill: \"red\", shape: \"dot\", text: \"Rate limit encountered\" });\nsetTimeout(() => {\n    flow.set(\"rate_limit_encountered\", false);\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Rate limit expired\" });\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 400,
        "wires": [
            [
                "cc62956c3b81303f"
            ]
        ]
    },
    {
        "id": "88777962fcded1b0",
        "type": "function",
        "z": "e961334cde89144c",
        "g": "f391c50d5db87eaa",
        "name": "rate limit hit checker",
        "func": "var rateLimitEncountered = flow.get(\"rate_limit_encountered\") || false;\nif (rateLimitEncountered) {\n    // If a rate limit has been encountered, pause for 30 seconds\n    msg.delay = 30000;\n} \n// Reset the rate limit encountered flag\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "c005622c337802e1"
            ]
        ]
    },
    {
        "id": "c005622c337802e1",
        "type": "delay",
        "z": "e961334cde89144c",
        "g": "f391c50d5db87eaa",
        "name": "rate limit hit queue",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "13",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "1d0773bcf3416404"
            ]
        ]
    },
    {
        "id": "a355772753b77403",
        "type": "subflow:80a84193bc2e4430",
        "z": "e961334cde89144c",
        "g": "0e6093de46259473",
        "name": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "b98332fdc0290246"
            ],
            [
                "ccf1e2dee73ee384"
            ]
        ]
    },
    {
        "id": "199a0f0b9465c0f4",
        "type": "subflow:28a00f5c49227e1c",
        "z": "e961334cde89144c",
        "g": "cef1df36791a4d09",
        "name": "",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "d2ee1fb0b75e93b6"
            ]
        ]
    },
    {
        "id": "140b2019757a5c1a",
        "type": "catch",
        "z": "e961334cde89144c",
        "g": "d7affcdf704b9b54",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 520,
        "y": 540,
        "wires": [
            [
                "e66c7e2b9c2807aa"
            ]
        ]
    },
    {
        "id": "f4f6fa24ca217587",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "ed65351c21590e04"
            ]
        ]
    },
    {
        "id": "ed65351c21590e04",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "requirements",
                "pt": "msg",
                "to": "payload.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "turbo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "javascript",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "task_id",
                "pt": "msg",
                "to": "payload.task_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "testString",
                "pt": "msg",
                "to": "payload.test",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "min_tokens",
                "pt": "msg",
                "to": "1000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "8d53a1abefddfbf2"
            ]
        ]
    },
    {
        "id": "8d53a1abefddfbf2",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "wrap requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "here are the requirements for a function i need you to write in javascript:\n\n{{{requirements}}} //...\n\nmake sure that you give me the whole function, and that the name matches.",
        "output": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "65d8c0dd542c67cc"
            ]
        ]
    },
    {
        "id": "922590827a20da6a",
        "type": "subflow:50df1246bdaf5119",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62612d04c38cb1a4",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "test",
        "func": "console.assert = (bool) => { if (!bool) throw new Error('assert!') }\n\ntry{\n    console.log('payload:', msg.payload)\n    console.log('test:', msg.testString)\n    const test = new Function('console',msg.payload + '\\n' + msg.testString)\n    test(console)\n    msg.pass = true;\n} catch (e) {\n    msg.testError = e.message;\n    msg.pass = false;\n}\n\nmsg.payload = {\n    flow: msg.flow || 'chatgpt',\n    model: msg.topic,\n    pass: msg.pass,\n    task: msg.task_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "084093a3278f4f92"
            ]
        ]
    },
    {
        "id": "b8010df720742aef",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "sum test passes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "$A + pass",
        "reduceInit": "0",
        "reduceInitType": "num",
        "reduceFixup": "$A/$N",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "4d96dd6356493577",
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "183a83919e31ea2f",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "humaneval",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "",
        "output": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "68aa97abce13538f"
            ]
        ]
    },
    {
        "id": "d7ff3df8b8bca72b",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "f4f6fa24ca217587"
            ]
        ]
    },
    {
        "id": "4d94c61aec9614a2",
        "type": "inject",
        "z": "f297cec495c6b8be",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "javascript",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "183a83919e31ea2f"
            ]
        ]
    },
    {
        "id": "2d59b8905d9a2034",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "d7ff3df8b8bca72b"
            ]
        ]
    },
    {
        "id": "30bf3f577ffc38e2",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "",
        "scope": [
            "922590827a20da6a"
        ],
        "uncaught": false,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ]
    },
    {
        "id": "a596c13563210cd3",
        "type": "file",
        "z": "f297cec495c6b8be",
        "name": "",
        "filename": "/data/bench.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 910,
        "y": 620,
        "wires": [
            [
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "75992a64fd9b37f1",
        "type": "debug",
        "z": "f297cec495c6b8be",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "6ccea9b424e51207",
        "type": "subflow:237429fb2a5a7712",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 380,
        "y": 680,
        "wires": [
            [
                "49f531afe4600028"
            ]
        ]
    },
    {
        "id": "b3dc275d4210ec42",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "355dc2522a499301",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ]
        ]
    },
    {
        "id": "49f531afe4600028",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f297cec495c6b8be",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "f98edf899c38d504"
            ]
        ]
    },
    {
        "id": "f98edf899c38d504",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "get result",
        "func": "console.log('parsed code:', msg.parts)\nmsg.payload = msg.payload\n                .filter(({type}) => ['javascript'].indexOf(type) >= 0)\n\nif (msg.payload.length > 1){\n  msg.payload = `throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')`\n  return [null, msg]\n} else if (msg.payload.length < 1){\n  msg.payload = `throw new Error('no code blocks detected, please obey the formatting instructions and return your answer inside a markdown code block.')`\n  return [null, msg]\n} else {\n  msg.payload = msg.payload[0].content; \n  return [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "62612d04c38cb1a4"
            ],
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62355c1dd139219c",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f297cec495c6b8be",
        "name": "bundle prompt",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "fc173ba8f27163d1",
        "type": "subflow:1254546b0e9fb57c",
        "z": "f297cec495c6b8be",
        "name": "wrap format",
        "x": 390,
        "y": 600,
        "wires": [
            [
                "62355c1dd139219c"
            ]
        ]
    },
    {
        "id": "32d8cfeb8705d916",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "fc173ba8f27163d1"
            ]
        ]
    },
    {
        "id": "90bfb9ae3c54bda3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "tag smartgpt",
        "rules": [
            {
                "t": "set",
                "p": "flow",
                "pt": "msg",
                "to": "smartgpt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ]
    },
    {
        "id": "1e835fdc3f636679",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "",
        "scope": [
            "6ccea9b424e51207"
        ],
        "uncaught": false,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "b0fd40f4cbec0c92",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "aa85c030e8d55e76"
            ]
        ]
    },
    {
        "id": "aa85c030e8d55e76",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ],
            [
                "355dc2522a499301"
            ],
            [
                "b3dc275d4210ec42"
            ],
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "65d8c0dd542c67cc",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "clone",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 360,
        "wires": [
            [
                "aec1f52637b20998"
            ]
        ]
    },
    {
        "id": "084093a3278f4f92",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "29c04591edb50ab3",
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "aec1f52637b20998",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b0fd40f4cbec0c92"
            ]
        ]
    },
    {
        "id": "29c04591edb50ab3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 500,
        "wires": [
            [
                "b8010df720742aef"
            ]
        ]
    },
    {
        "id": "4d96dd6356493577",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 870,
        "y": 580,
        "wires": [
            [
                "a596c13563210cd3"
            ]
        ]
    },
    {
        "id": "68aa97abce13538f",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "split",
        "func": "msg.payload = msg.payload.split('\\n').filter(_ => _)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 120,
        "wires": [
            [
                "2d59b8905d9a2034"
            ]
        ]
    },
    {
        "id": "1f104ae03f736fc7",
        "type": "subflow:8843d7f92416211de9ebb963ff4ce28125932878",
        "z": "064c17312433ce15",
        "name": "",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "d97a19209a785803"
            ]
        ]
    },
    {
        "id": "b433c835d854e271",
        "type": "file in",
        "z": "064c17312433ce15",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 260,
        "y": 140,
        "wires": [
            [
                "3fb29f9dbf599fa0"
            ]
        ]
    },
    {
        "id": "3fb29f9dbf599fa0",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "bf4826fb44e15c5e"
            ]
        ]
    },
    {
        "id": "3fc0a9eb4623c177",
        "type": "inject",
        "z": "064c17312433ce15",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "b433c835d854e271"
            ]
        ]
    },
    {
        "id": "d97a19209a785803",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 300,
        "wires": [
            [
                "6ee86c3a03682354"
            ]
        ]
    },
    {
        "id": "6ee86c3a03682354",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "761e9408e6850b23"
            ]
        ]
    },
    {
        "id": "761e9408e6850b23",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "sort eligible for doc",
        "func": "if (msg.payload.nodes.filter(node => node.id === msg.payload.id).pop().info) {\n    return [msg,null];\n}\n\nconst undocd = msg.payload.nodes.filter(node => {\n    if (node.info) return false;\n\n    if (node.type.startsWith('subflow:')) {\n        const definition = msg.flows.filter(_node => _node.id === node.type.split(':').pop()).pop()\n        if (definition.info){\n            node.info = definition.info\n            return false;\n        }\n    };\n\n    if (['junction','status'].indexOf(node.type) > -1){\n        return false;\n    }\n\n    if (node.type === 'subflow'){\n        return false;\n    }\n\n    return true;\n})\n\n\n\nif (undocd.length){\n    return [ msg,null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 380,
        "wires": [
            [],
            [
                "2e410a19acc23c63",
                "dae7e91edc72c83d"
            ]
        ]
    },
    {
        "id": "bf4826fb44e15c5e",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "flows",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 220,
        "wires": [
            [
                "1f104ae03f736fc7"
            ]
        ]
    },
    {
        "id": "17c4c2465ba4c355",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "documentation",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nPlease provide a brief html document to describe it:\n\nstart with a brief description of no more than three sentences,\n\nuse the following three sections as necessary: inputs, outputs, and details\n\nhere's an example document that describes the \"read file\" subflow:\n\n```html\n<p>Reads the contents of a file as either a string or binary buffer.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be read can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>payload <span class=\"property-type\">string | buffer</span></dt>\n    <dd>The contents of the file as either a string or binary buffer.</dd>\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>If not configured in the node, this optional property sets the name of the file to be read.</dd>\n</dl>\n<h3>Details</h3>\n<p>The filename should be an absolute path, otherwise it will be relative to\nthe working directory of the Node-RED process.</p>\n<p>On Windows, path separators may need to be escaped, for example: <code>\\\\Users\\\\myUser</code>.</p>\n<p>Optionally, a text file can be split into lines, outputting one message per line, or a binary file\nsplit into smaller buffer chunks - the chunk size being operating system dependant, but typically 64k (Linux/Mac) or 41k (Windows).</p>\n<p>When split into multiple messages, each message will have a <code>parts</code>\nproperty set, forming a complete message sequence.</p>\n<p>Encoding of input data can be specified from list of encodings if output format is string.</p>\n<p>Errors should be caught and handled using a Catch node.</p>\n```\n\ninputs/outputs should refer only to properties on messages that move through the flow. put environment variable descriptions into the 'details' section.\n\ntake care to be sure that the behavior you report is actually what the subflow does.\n\nremember to respond with html.",
        "output": "str",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "5ac8e1eb22d9be16"
            ]
        ]
    },
    {
        "id": "dae7e91edc72c83d",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload.nodes",
        "action": "str",
        "pretty": false,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "5412bb9f8505ec2d"
            ]
        ]
    },
    {
        "id": "5db7cfe60d82dc48",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 780,
        "wires": []
    },
    {
        "id": "5412bb9f8505ec2d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subflow",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.nodes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 461.25,
        "wires": [
            [
                "651c8b081f5d322f"
            ]
        ]
    },
    {
        "id": "16e7fb7b2bc1fd73",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "schema in",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected input message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 870,
        "y": 380,
        "wires": [
            [
                "04838b8e66b73717"
            ]
        ]
    },
    {
        "id": "1c58af75659287c4",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "schema out",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected output message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "1a45745cdcdcc2a0"
            ]
        ]
    },
    {
        "id": "1a45745cdcdcc2a0",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "outputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ]
    },
    {
        "id": "04838b8e66b73717",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "inputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 420,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ]
    },
    {
        "id": "5ac8e1eb22d9be16",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "info",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 420,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ]
        ]
    },
    {
        "id": "faec021f67110605",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "clone",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 580,
        "wires": [
            [
                "9021cf925783a560"
            ]
        ]
    },
    {
        "id": "7ec6901fd576cd8c",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "mux payload",
        "func": "msg.parseError = msg.parseError || 0\nif (!msg.payload[0] || msg.payload.length > 1){\n    msg.payload = `I was unable to parse your output, please wrap your final result inside a codeblock according to github flavored markdown.`\n    msg.parseError++\n    if (msg.parseError > 3){\n        return [msg, null]\n    }\n}\nlet value;\ntry {\n    value = msg.key === 'info' ? msg.payload : JSON.parse(msg.payload);\n} catch (e){\n    msg.parseError++\n    //ignore\n    msg.payload = 'I was unable to parse your output, please ensure you are giving me a valid JSON schema inside a single markdown code block'\n    if (msg.parseError > 3) {\n        return [msg, null]\n    }\n}\n\n\nmsg.payload = {\n    key: msg.key,\n    id: msg.subflow.id,\n    value\n}\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ],
            [
                "add40d01a5910b28"
            ]
        ]
    },
    {
        "id": "678fd0992d3a0f8a",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 327.5,
        "wires": [
            [
                "a47dc97cf90527f1"
            ]
        ]
    },
    {
        "id": "49c6cd17167fda13",
        "type": "switch",
        "z": "064c17312433ce15",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 990,
        "y": 320,
        "wires": [
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ]
        ]
    },
    {
        "id": "9021cf925783a560",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 286.25,
        "wires": [
            [
                "678fd0992d3a0f8a"
            ]
        ]
    },
    {
        "id": "3a05ecf93cf9ab5d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 575,
        "wires": [
            [
                "2e410a19acc23c63"
            ]
        ]
    },
    {
        "id": "2e410a19acc23c63",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 530,
        "y": 616.25,
        "wires": [
            [
                "2cd00d0c53ecf4fb",
                "53ef31f6afecb1f0"
            ]
        ]
    },
    {
        "id": "add40d01a5910b28",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 530,
        "y": 533.75,
        "wires": [
            [
                "3a05ecf93cf9ab5d",
                "8a22d3df8f823101"
            ]
        ]
    },
    {
        "id": "2cd00d0c53ecf4fb",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "merge docs",
        "func": "msg.payload.filter(Array.isArray).forEach(arr => {\n    arr.forEach(item => {\n        if (item && item.id && item.key && item.value !== undefined) {\n            console.log('item', item)\n            let flow = msg.flows.find(flow => flow.id === item.id);\n            if (flow) {\n                flow[item.key] = item.value;\n            }\n        }\n    });\n});\n\nmsg.payload = msg.flows;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 657.5,
        "wires": [
            [
                "0b0814f0b4085a24"
            ]
        ]
    },
    {
        "id": "965d9cce35236045",
        "type": "file",
        "z": "064c17312433ce15",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.dox.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 740,
        "wires": [
            [
                "5db7cfe60d82dc48"
            ]
        ]
    },
    {
        "id": "0b0814f0b4085a24",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 530,
        "y": 698.75,
        "wires": [
            [
                "965d9cce35236045"
            ]
        ]
    },
    {
        "id": "5c0a5b90e1f9a2a9",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "confgpt",
        "scope": [
            "afdc81229134a1c7"
        ],
        "uncaught": false,
        "x": 730,
        "y": 500,
        "wires": [
            [
                "b561ced84cd69718",
                "add40d01a5910b28"
            ]
        ]
    },
    {
        "id": "b561ced84cd69718",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "documentation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 480,
        "wires": []
    },
    {
        "id": "36739576145f65c6",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "confgpt",
        "scope": null,
        "uncaught": true,
        "x": 550,
        "y": 240,
        "wires": [
            [
                "cd54a881ed9ca306"
            ]
        ]
    },
    {
        "id": "cd54a881ed9ca306",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "all doc errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 240,
        "wires": []
    },
    {
        "id": "55ed6ffd1603d999",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "064c17312433ce15",
        "name": "",
        "x": 160,
        "y": 543.75,
        "wires": [
            [
                "faec021f67110605"
            ]
        ]
    },
    {
        "id": "651c8b081f5d322f",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "set context",
        "field": "context",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "we're working with node-red, trying to understand flows before we import them.\n",
        "output": "str",
        "x": 170,
        "y": 502.5,
        "wires": [
            [
                "55ed6ffd1603d999"
            ]
        ]
    },
    {
        "id": "a47dc97cf90527f1",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "function 2",
        "func": "msg.history = JSON.parse(JSON.stringify(msg.history || []))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "49c6cd17167fda13"
            ]
        ]
    },
    {
        "id": "8a22d3df8f823101",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 540,
        "wires": []
    },
    {
        "id": "53ef31f6afecb1f0",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9ed70c1b56a8ed7",
        "type": "subflow:50df1246bdaf5119",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "7ec6901fd576cd8c"
            ]
        ]
    },
    {
        "id": "272d17a387e30363",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 20,
        "wires": []
    },
    {
        "id": "6561f76ff8addfbc",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "fe14d1df072c2e42",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd4c326a3811b3e0",
        "type": "subflow:657c8f0e9df6242e",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 40,
        "wires": [
            [
                "6561f76ff8addfbc"
            ]
        ]
    },
    {
        "id": "fd82d1078959f5bb",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "set context",
        "field": "context",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "we're working our way through a node-red flows.json file\n\nwe can't work on it all at once, so I'm giving you a chunk of it here.\n\nDo your best to follow the rest of the instructions with node-red in mind.\n\nour end goal is to try and infer a description of the entire project from its pieces.\n\nmake use of node id's where available so we can compare notes with each other when we have insight into different nodes in the overall flow.",
        "output": "str",
        "x": 390,
        "y": 40,
        "wires": [
            [
                "cd4c326a3811b3e0"
            ]
        ]
    },
    {
        "id": "3f4b4b20e1f7bbd2",
        "type": "inject",
        "z": "eeba88e77478c844",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "8b156f3f879bad59"
            ]
        ]
    },
    {
        "id": "8b156f3f879bad59",
        "type": "file in",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 240,
        "y": 140,
        "wires": [
            [
                "cf9ef8b14dd35b82"
            ]
        ]
    },
    {
        "id": "cf9ef8b14dd35b82",
        "type": "json",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "496544489779fd2a"
            ]
        ]
    },
    {
        "id": "ad78713cb0a6df80",
        "type": "split",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "9a75803b6cd59345",
                "97f2373daf2bd0cc"
            ]
        ]
    },
    {
        "id": "80e5304f2999ce6b",
        "type": "join",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 190,
        "y": 660,
        "wires": [
            [
                "7cbbf9d31cb04d05"
            ]
        ]
    },
    {
        "id": "4c1404f306ef020a",
        "type": "file",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "",
        "filename": "/data/flows.documented.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 260,
        "y": 740,
        "wires": [
            [
                "04701d65f0532579"
            ]
        ]
    },
    {
        "id": "7cbbf9d31cb04d05",
        "type": "json",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "4c1404f306ef020a"
            ]
        ]
    },
    {
        "id": "bf7d4c2d39fa90ca",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nThe user will provide you with a json string of a node-red subflow.\n\nanalyze the subflow and respond with a detailed description of:\n- a description of every node in the subflow, including input and output.\n  - the name or id of the node\n  - the type of the node, \n    - if the node is a function node, include an analysis of the javascript in the \"func\" property\n  - how the node is configured \n  - the node(s) it recieves messages from.\n    - Note: nodes do not list in their own JSON what nodes they recieve messages from. you'll have to inspect the other nodes for output id that matches the node\n  - the node(s) it sends messages to.\n- all environment variables that may be set on instances of the subflow\n- all necessary and optional properties on incoming messages.\n- all properties that may exist on outgoing messages\n- all properties that are touched during the flow\n\nfinally, end with a summary description of the subflow, based on the detailed information you've gathered.\n\norganize your response in sections.",
        "output": "str",
        "x": 800,
        "y": 500,
        "wires": [
            [
                "9b387c61d994431e"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "9b387c61d994431e",
        "type": "subflow:788598196e86646c",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "x": 770,
        "y": 540,
        "wires": [
            [
                "7792dd5704da3bef"
            ]
        ]
    },
    {
        "id": "9a75803b6cd59345",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "node",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "8697b44a8370bc2a"
            ]
        ]
    },
    {
        "id": "7792dd5704da3bef",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "x": 760,
        "y": 580,
        "wires": [
            [
                "0ea75df7d4ee86bd"
            ]
        ]
    },
    {
        "id": "025f8888c4bf0d76",
        "type": "catch",
        "z": "eeba88e77478c844",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 60,
        "wires": [
            [
                "902c148d976a5ff0"
            ]
        ]
    },
    {
        "id": "902c148d976a5ff0",
        "type": "debug",
        "z": "eeba88e77478c844",
        "name": "doc error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "59dbcd23223ecfd4",
        "type": "subflow:d158fb9598ddc8a1",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "x": 770,
        "y": 660,
        "wires": [
            [
                "e95ef67408de2621"
            ]
        ]
    },
    {
        "id": "e95ef67408de2621",
        "type": "switch",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 750,
        "y": 700,
        "wires": [
            [
                "86ab4ec6100a8634"
            ],
            [
                "d3a22aa601d47859"
            ],
            [
                "763888ff65c3b5cc"
            ]
        ]
    },
    {
        "id": "9c9950e4acd7fd46",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "tag info",
        "rules": [
            {
                "t": "set",
                "p": "tag",
                "pt": "msg",
                "to": "info",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 840,
        "wires": [
            [
                "b0fd7fa108cd260f"
            ]
        ]
    },
    {
        "id": "cfc30936557757fa",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "tag output",
        "rules": [
            {
                "t": "set",
                "p": "tag",
                "pt": "msg",
                "to": "outputSchema",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 840,
        "wires": [
            [
                "0e180a35fb2b1b7b"
            ]
        ]
    },
    {
        "id": "a6a16491f928d8e9",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "tag input",
        "rules": [
            {
                "t": "set",
                "p": "tag",
                "pt": "msg",
                "to": "inputSchema",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 840,
        "wires": [
            [
                "6e8a7fd523247b5d"
            ]
        ]
    },
    {
        "id": "b0fd7fa108cd260f",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "system info",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nThe user will provide you with a detailed analysis of a node-red subflow.\n\nrespond with a user focused description of the subflow with the following structure:\n- A brief description of the functionality of the subflow as a whole\n- An \"Input\" section describing the input message requirements and how they're used\n- An \"Output\" section describing the output message properties and what they are\n- A \"Details\" section with instructions on how to use any environment variables, as well as any other relevant information for someone who wishes to use the subflow.\n\nplease respond only with the user focused description, without preamble or postscript",
        "output": "str",
        "x": 1170,
        "y": 880,
        "wires": [
            [
                "b3c1417704b4555c"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "0e180a35fb2b1b7b",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "system output",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nThe user will provide you with a detailed description of a node-red subflow.\n\nrespond with a JSON schema to validate outgoing messages from the subflow:\n- make sure that it includes all required properties\n- make sure that it includes any optional properties that are present in the flow\n\nrespond with ONLY the valid JSON text, without preamble or postscript.\nthe first character in your response should be '{'",
        "output": "str",
        "x": 880,
        "y": 880,
        "wires": [
            [
                "c008dae24103c0c1"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "6e8a7fd523247b5d",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "system input",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nThe user will provide you with a detailed description of a node-red subflow.\n\nrespond with a thorough JSON schema to validate incoming messages to the subflow:\n- make sure that it includes all required properties\n- make sure that it includes any optional properties that are present in the flow\n\nrespond with ONLY the valid JSON text, without preamble or postscript.\nthe first character in your response should be '{'",
        "output": "str",
        "x": 630,
        "y": 880,
        "wires": [
            [
                "c008dae24103c0c1"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "c008dae24103c0c1",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "try 5 times",
        "rules": [
            {
                "t": "set",
                "p": "n",
                "pt": "msg",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 920,
        "wires": [
            [
                "88e3d673a22d3c22"
            ]
        ]
    },
    {
        "id": "606d1f8ad57a1a47",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "",
        "x": 1160,
        "y": 960,
        "wires": [
            [
                "048dc877cecba570"
            ]
        ]
    },
    {
        "id": "88e3d673a22d3c22",
        "type": "subflow:788598196e86646c",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "",
        "x": 790,
        "y": 960,
        "wires": [
            [
                "bcedaf9d77b92544"
            ]
        ]
    },
    {
        "id": "bcedaf9d77b92544",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "",
        "x": 780,
        "y": 1000,
        "wires": [
            [
                "7b5a3f0b1690ca11"
            ]
        ]
    },
    {
        "id": "048dc877cecba570",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "set userdoc",
        "rules": [
            {
                "t": "set",
                "p": "description",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 1000,
        "wires": [
            [
                "264931e378e4a5a7"
            ]
        ]
    },
    {
        "id": "7b5a3f0b1690ca11",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "system input",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in JSON schema.\nThe user will provide you with multiple JSON schemas corresponding to an input message.\nYour job is to judge which is the most thorough\n\nrespond with a copy of the most thorough schema.\n\nrespond with ONLY the valid JSON text, without preamble or postscript.\nthe first character in your response should be '{'",
        "output": "str",
        "x": 790,
        "y": 1040,
        "wires": [
            [
                "6eed1c925de3d5cc"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "264931e378e4a5a7",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "format",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an html formatter.\nThe user will present you with a piece of documentation\n\nyou must respond with an html representation of the document\n\nhere is an example for css and structure reference:\n\n<p>Reads the contents of a file as either a string or binary buffer.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be read can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>payload <span class=\"property-type\">string | buffer</span></dt>\n    <dd>The contents of the file as either a string or binary buffer.</dd>\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>If not configured in the node, this optional property sets the name of the file to be read.</dd>\n</dl>\n<h3>Details</h3>\n<p>The filename should be an absolute path, otherwise it will be relative to\nthe working directory of the Node-RED process.</p>\n<p>On Windows, path separators may need to be escaped, for example: <code>\\\\Users\\\\myUser</code>.</p>\n<p>Optionally, a text file can be split into lines, outputting one message per line, or a binary file\nsplit into smaller buffer chunks - the chunk size being operating system dependant, but typically 64k (Linux/Mac) or 41k (Windows).</p>\n<p>When split into multiple messages, each message will have a <code>parts</code>\nproperty set, forming a complete message sequence.</p>\n<p>Encoding of input data can be specified from list of encodings if output format is string.</p>\n<p>Errors should be caught and handled using a Catch node.</p>\n\n\nrespond with ONLY the valid HTML, without preamble or postscript. the first character in your respose should be '<'",
        "output": "str",
        "x": 1150,
        "y": 1040,
        "wires": [
            [
                "02fd2ca519599bb4"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "6eed1c925de3d5cc",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "combine options",
        "func": "function extractJsonString(str) {\n    const firstIndex = str.indexOf('{');\n    const lastIndex = str.lastIndexOf('}');\n\n    if (firstIndex !== -1 && lastIndex !== -1) {\n        return str.substring(firstIndex, lastIndex + 1);\n    } else {\n        return \"No valid JSON substring found in input string.\";\n    }\n}\n\nconst options = []\nfor (const { message } of msg.full.data.choices) {\n    try {\n        const content = JSON.parse(extractJsonString(message.content));\n        ajv.compile(content);\n        options.push(content);\n    } catch (e) {\n        // ignore\n    }\n}\n\nmsg.payload = options.map((schema,i) => \n`---OPTION ${i} START---\n${JSON.stringify(schema)}\n---OPTION ${i} END---`).join('\\n')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ajv",
                "module": "ajv"
            }
        ],
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "0daab422e6bba4dc"
            ]
        ]
    },
    {
        "id": "02fd2ca519599bb4",
        "type": "subflow:788598196e86646c",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "",
        "x": 1170,
        "y": 1080,
        "wires": [
            [
                "8712dd2d74b9b5a4"
            ]
        ]
    },
    {
        "id": "0daab422e6bba4dc",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "",
        "x": 780,
        "y": 1120,
        "wires": [
            [
                "ec635034eef78b6a"
            ]
        ]
    },
    {
        "id": "8712dd2d74b9b5a4",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "",
        "x": 1160,
        "y": 1120,
        "wires": [
            [
                "1acd06752cd9811e"
            ]
        ]
    },
    {
        "id": "0ea75df7d4ee86bd",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "node.description",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "59dbcd23223ecfd4"
            ]
        ]
    },
    {
        "id": "695eb4b6b7f37008",
        "type": "switch",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "property": "node.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "subflow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "3fbb22fa17ec34e4"
            ],
            [
                "3fbb22fa17ec34e4"
            ],
            [
                "4a10e423688295dc"
            ],
            [
                "873a38de083427d1"
            ]
        ]
    },
    {
        "id": "04701d65f0532579",
        "type": "debug",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 780,
        "wires": []
    },
    {
        "id": "fba28f405a72bc42",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "merge into flows",
        "links": [
            "7fbe99868dadc648",
            "873a38de083427d1",
            "3bd4d0e7955f70cc",
            "90dbd16a6272716d"
        ],
        "x": 95,
        "y": 580,
        "wires": [
            [
                "83d6617f69790dd5"
            ]
        ]
    },
    {
        "id": "c57ce8a3bf952ff6",
        "type": "template",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "set system message",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYour job is to write documentation.\nThe user will provide you with a json string of a node-red function node.\nYou must analyze it and respond with a brief description of what the function does.",
        "output": "str",
        "x": 660,
        "y": 140,
        "wires": [
            [
                "11383ea466e70e4b"
            ]
        ],
        "info": "test it hey hey"
    },
    {
        "id": "11383ea466e70e4b",
        "type": "subflow:788598196e86646c",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "944ac83066925c0c",
                "19f0c2acb9f72112"
            ]
        ]
    },
    {
        "id": "944ac83066925c0c",
        "type": "subflow:237429fb2a5a7712",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "1aab229baa275120",
                "19f0c2acb9f72112"
            ]
        ]
    },
    {
        "id": "1aab229baa275120",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "node.info",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "history",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "3bd4d0e7955f70cc"
            ]
        ]
    },
    {
        "id": "7fbe99868dadc648",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "fba28f405a72bc42"
        ],
        "x": 305,
        "y": 380,
        "wires": []
    },
    {
        "id": "873a38de083427d1",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "skip",
        "mode": "link",
        "links": [
            "fba28f405a72bc42"
        ],
        "x": 305,
        "y": 460,
        "wires": []
    },
    {
        "id": "c6ddec5c7bd294ce",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "link in 4",
        "links": [
            "4a10e423688295dc"
        ],
        "x": 515,
        "y": 140,
        "wires": [
            [
                "c57ce8a3bf952ff6"
            ]
        ]
    },
    {
        "id": "4a10e423688295dc",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "c6ddec5c7bd294ce"
        ],
        "x": 365,
        "y": 440,
        "wires": []
    },
    {
        "id": "3fbb22fa17ec34e4",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "84ac9bcf508717e9"
        ],
        "x": 305,
        "y": 420,
        "wires": []
    },
    {
        "id": "84ac9bcf508717e9",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "link in 5",
        "links": [
            "3fbb22fa17ec34e4"
        ],
        "x": 555,
        "y": 420,
        "wires": [
            [
                "27c5b82991ce39e0"
            ]
        ]
    },
    {
        "id": "83d6617f69790dd5",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "node",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 580,
        "wires": [
            [
                "b619ecd827a40d17",
                "b1075f20d54f61f0"
            ]
        ]
    },
    {
        "id": "3bd4d0e7955f70cc",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "fba28f405a72bc42"
        ],
        "x": 765,
        "y": 260,
        "wires": []
    },
    {
        "id": "8697b44a8370bc2a",
        "type": "change",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload.x",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.y",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.inputSchema",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.outputSchema",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "e529869f40e67cec"
            ]
        ]
    },
    {
        "id": "fa37baf5d5d210ae",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "5bc27646deb5dff2",
        "name": "normalize key/content",
        "func": "const payload = {\n    key: msg.tag\n}\nif (msg.tag === 'info'){\n    payload.content = msg.payload;\n    msg.payload = payload;\n    return msg;\n} \nfunction extractJsonString(str) {\n    const firstIndex = str.indexOf('{');\n    const lastIndex = str.lastIndexOf('}');\n\n    if (firstIndex !== -1 && lastIndex !== -1) {\n        return str.substring(firstIndex, lastIndex + 1);\n    } else {\n        return \"No valid JSON substring found in input string.\";\n    }\n}\n\n\nfor (const {message} of msg.full.data.choices){\n    try {\n        payload.content = JSON.parse(extractJsonString(message.content));\n        ajv.compile(payload.content);\n        break;\n    } catch (e) {\n        // ignore\n    }\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ajv",
                "module": "ajv"
            }
        ],
        "x": 960,
        "y": 1240,
        "wires": [
            [
                "a9a4aa9e75fae5a9"
            ]
        ]
    },
    {
        "id": "a9a4aa9e75fae5a9",
        "type": "subflow:3007bc4599c68441",
        "z": "eeba88e77478c844",
        "g": "5bc27646deb5dff2",
        "name": "",
        "x": 930,
        "y": 1280,
        "wires": [
            [
                "cf28e4a3eb7a131c"
            ]
        ]
    },
    {
        "id": "27c5b82991ce39e0",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "gather nodes",
        "func": "const nodes = [\n    msg.node\n]\n\nconst flows = flow.get('flows')\nif (msg.node.type === 'group'){\n    for (const id of msg.node.nodes) {\n        node.log('find id ' + id);\n        const _node = flows.filter(__node => {\n            node.log('check id ' + id + ' : ' + __node.id)\n            return __node.id == id\n        })[0]\n        nodes.push(_node)\n    }\n} else if (msg.node.type === 'subflow') {\n    for (const node of flows) {\n        if (node.z === msg.node.id) {\n            nodes.push(node)\n        }\n    }\n}\n\n\n\nmsg.payload = JSON.parse(JSON.stringify(nodes))\nmsg.nodes = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 420,
        "wires": [
            [
                "9a82ffcaf81e87b6"
            ]
        ]
    },
    {
        "id": "9a82ffcaf81e87b6",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "sort eligible for doc",
        "func": "const type = msg.payload[0].type;\n\nfor (const node of msg.payload) {\n    if (node.type === type){\n        continue;\n    } else if (node.type.indexOf('subflow:') === 0) {\n        const definitionID = node.type.split(':').pop()\n        const definition = getSubflowDefinition(definitionID)\n        if (!definition.description) {\n            return [msg, null]\n        }\n        node.description = definition.description;\n    } else if (['function','group'].indexOf(node.type) > -1) {\n        if (!node.description) {\n            return [msg, null]\n        }\n    }\n}\n\nreturn [null, msg];\n\nfunction getSubflowDefinition(id) {\n    const flows = flow.get('flows');\n    for (const node of msg.flows) {\n        if (node.id === id) {\n            return node;\n        }\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 790,
        "y": 460,
        "wires": [
            [
                "149e5cf088fd6f36",
                "94717d300902b787"
            ],
            [
                "bf7d4c2d39fa90ca"
            ]
        ]
    },
    {
        "id": "149e5cf088fd6f36",
        "type": "delay",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "244956339585c478"
            ]
        ]
    },
    {
        "id": "86ab4ec6100a8634",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "b59e9d87cb236291"
        ],
        "x": 1005,
        "y": 680,
        "wires": []
    },
    {
        "id": "d3a22aa601d47859",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "ca5c4b601f4e38bb"
        ],
        "x": 945,
        "y": 700,
        "wires": []
    },
    {
        "id": "763888ff65c3b5cc",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "ca17dfeec586fc35"
        ],
        "x": 1005,
        "y": 720,
        "wires": []
    },
    {
        "id": "b59e9d87cb236291",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "link in 6",
        "links": [
            "86ab4ec6100a8634"
        ],
        "x": 535,
        "y": 840,
        "wires": [
            [
                "a6a16491f928d8e9"
            ]
        ]
    },
    {
        "id": "ca5c4b601f4e38bb",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "link in 7",
        "links": [
            "d3a22aa601d47859"
        ],
        "x": 765,
        "y": 840,
        "wires": [
            [
                "cfc30936557757fa"
            ]
        ]
    },
    {
        "id": "ca17dfeec586fc35",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "link in 8",
        "links": [
            "763888ff65c3b5cc"
        ],
        "x": 1065,
        "y": 840,
        "wires": [
            [
                "9c9950e4acd7fd46"
            ]
        ]
    },
    {
        "id": "1acd06752cd9811e",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "97640565b3603875"
        ],
        "x": 1265,
        "y": 1120,
        "wires": []
    },
    {
        "id": "97640565b3603875",
        "type": "link in",
        "z": "eeba88e77478c844",
        "g": "5bc27646deb5dff2",
        "name": "link in 9",
        "links": [
            "1acd06752cd9811e",
            "ec635034eef78b6a"
        ],
        "x": 795,
        "y": 1240,
        "wires": [
            [
                "fa37baf5d5d210ae"
            ]
        ]
    },
    {
        "id": "ec635034eef78b6a",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "0dc88fbb1e7d8a7d",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "97640565b3603875"
        ],
        "x": 935,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cf28e4a3eb7a131c",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "5bc27646deb5dff2",
        "name": "merge values",
        "func": "for (const {key, value} of msg.payload){\n    msg.node[key] = value;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ajv",
                "module": "ajv"
            }
        ],
        "x": 930,
        "y": 1320,
        "wires": [
            [
                "90dbd16a6272716d"
            ]
        ]
    },
    {
        "id": "e529869f40e67cec",
        "type": "switch",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "ignore info",
        "property": "node.info",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "7fbe99868dadc648"
            ],
            [
                "695eb4b6b7f37008"
            ]
        ]
    },
    {
        "id": "b3c1417704b4555c",
        "type": "subflow:788598196e86646c",
        "z": "eeba88e77478c844",
        "g": "ced0597ce1f434c4",
        "name": "",
        "x": 1170,
        "y": 920,
        "wires": [
            [
                "606d1f8ad57a1a47"
            ]
        ]
    },
    {
        "id": "90dbd16a6272716d",
        "type": "link out",
        "z": "eeba88e77478c844",
        "g": "d98aa00cb0e639fe",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "fba28f405a72bc42"
        ],
        "x": 1185,
        "y": 1320,
        "wires": []
    },
    {
        "id": "94717d300902b787",
        "type": "debug",
        "z": "eeba88e77478c844",
        "g": "87f661e4d4efc5c4",
        "name": "log delay",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 480,
        "wires": []
    },
    {
        "id": "b619ecd827a40d17",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "1f25593ab1ca5615",
        "name": "insert node into context",
        "func": "const flows = flow.get('flows').map(_node => {\n    if (_node.id === msg.node.id){\n        node.log('insert ' + node.id)\n        return msg.node;\n    }\n\n    return _node;\n})\n\nflow.set('flows', flows);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 620,
        "wires": [
            [
                "80e5304f2999ce6b"
            ]
        ]
    },
    {
        "id": "19f0c2acb9f72112",
        "type": "debug",
        "z": "eeba88e77478c844",
        "g": "f7178adeaceda352",
        "name": "function doc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "b1075f20d54f61f0",
        "type": "debug",
        "z": "eeba88e77478c844",
        "name": "doc debugger",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "parts.index",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 560,
        "wires": []
    },
    {
        "id": "496544489779fd2a",
        "type": "function",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "function 9",
        "func": "flow.set('flows', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 220,
        "wires": [
            [
                "ad78713cb0a6df80"
            ]
        ]
    },
    {
        "id": "97f2373daf2bd0cc",
        "type": "debug",
        "z": "eeba88e77478c844",
        "g": "ef4838b57d8a8292",
        "name": "doc error",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload.id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 260,
        "wires": []
    },
    {
        "id": "270dcc5c3ccf3876",
        "type": "link in",
        "z": "8dfc33ccdf4bd813",
        "name": "link in 2",
        "links": [],
        "x": 45,
        "y": 60,
        "wires": [
            [
                "1d9f80521e1580fd"
            ]
        ]
    },
    {
        "id": "b74d4d377fba494c",
        "type": "link out",
        "z": "8dfc33ccdf4bd813",
        "name": "link out 2",
        "mode": "link",
        "links": [],
        "x": 425,
        "y": 60,
        "wires": []
    },
    {
        "id": "1b87f89d5033a7ed",
        "type": "subflow:788598196e86646c",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "cae35b9534a7dbbd"
            ]
        ]
    },
    {
        "id": "5edf8f327eee67c4",
        "type": "template",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "field": "system",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red, flow based programming, and javascript.\nYou are also an expert in fuzz testing.\nThe user will provide you with a detailed description of a node-red subflow, as well as JSON schemas for the input and output messages.\n\nrespond with a JSON array containing 10 subarrays:\n- each subarray should contain two objects:\n    - first, a sample input according to the input schema\n    - second, the expected output according to the output schema and the description of how the subflow works\n\nthese pairs you generate will be used to fuzz test the flow, so you should include a variety of samples that cover different cases.\n\nrespond with ONLY the valid JSON text, without preamble or postscript.\nthe first character in your response should be '['",
        "output": "str",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "1b87f89d5033a7ed"
            ]
        ]
    },
    {
        "id": "80d1647716ac9376",
        "type": "subflow:237429fb2a5a7712",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "0b9c110f138ef376"
            ]
        ]
    },
    {
        "id": "c11ad7c7e95eedfc",
        "type": "template",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "# Description:\n{{{subflow.description}}}\n\n# Input Schema:\n{{{subflow.inputSchema}}}\n\n# Output Schema:\n{{{subflow.outputSchema}}}",
        "output": "str",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "df9f3f1188d91ec6"
            ]
        ]
    },
    {
        "id": "df9f3f1188d91ec6",
        "type": "change",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.6",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 380,
        "wires": [
            [
                "80d1647716ac9376"
            ]
        ]
    },
    {
        "id": "0b9c110f138ef376",
        "type": "function",
        "z": "8dfc33ccdf4bd813",
        "name": "parse tests",
        "func": "function extractJsonString(str) {\n    const firstIndex = str.indexOf('[');\n    const lastIndex = str.lastIndexOf(']');\n\n    if (firstIndex !== -1 && lastIndex !== -1) {\n        return str.substring(firstIndex, lastIndex + 1);\n    } else {\n        return \"No valid JSON substring found in input string.\";\n    }\n}\n\ntry {\n    msg.payload = JSON.stringify(JSON.parse(extractJsonString(msg.payload)), null, 4);\n} catch (e) {\n    node.warn(e)\n    // ignore\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "1bdf14738901767b"
            ]
        ]
    },
    {
        "id": "1bdf14738901767b",
        "type": "file",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "e459a940eb380922"
            ]
        ]
    },
    {
        "id": "fac0ecacc82b5e1b",
        "type": "file in",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "ea36d9338cfd3626"
            ]
        ]
    },
    {
        "id": "a55e8e5fafc718c6",
        "type": "change",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$join([\"/data/fuzz/\", subflow.id, \".json\"])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "fac0ecacc82b5e1b"
            ]
        ]
    },
    {
        "id": "20873be0e001b1bd",
        "type": "catch",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "scope": [
            "fac0ecacc82b5e1b"
        ],
        "uncaught": false,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "5edf8f327eee67c4"
            ]
        ]
    },
    {
        "id": "1d9f80521e1580fd",
        "type": "function",
        "z": "8dfc33ccdf4bd813",
        "name": "function 5",
        "func": "const hasNecessary = msg.payload.reduce((a, i) => a && i.content, true)\nif (hasNecessary){\n    for (const {key, content} of msg.payload){\n        msg.subflow[key] = content\n    }\n    return [null, msg];\n} else {\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 60,
        "wires": [
            [
                "6f88846e3073cd41"
            ],
            [
                "a55e8e5fafc718c6"
            ]
        ]
    },
    {
        "id": "cae35b9534a7dbbd",
        "type": "json",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "property": "subflow.inputSchema",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 300,
        "wires": [
            [
                "eff3c180b0ce527b"
            ]
        ]
    },
    {
        "id": "eff3c180b0ce527b",
        "type": "json",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "property": "subflow.outputSchema",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "c11ad7c7e95eedfc"
            ]
        ]
    },
    {
        "id": "85c59508d6d782c6",
        "type": "catch",
        "z": "8dfc33ccdf4bd813",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "5382a75eb35e6e6e"
            ]
        ]
    },
    {
        "id": "5382a75eb35e6e6e",
        "type": "debug",
        "z": "8dfc33ccdf4bd813",
        "name": "fuzz error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    }
]