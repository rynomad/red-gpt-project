[
    {
        "id": "941765e8bb2c32d6",
        "type": "tab",
        "label": "Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e961334cde89144c",
        "type": "tab",
        "label": "gpt queue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f297cec495c6b8be",
        "type": "tab",
        "label": "Benchmark",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "064c17312433ce15",
        "type": "tab",
        "label": "Document",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eeba88e77478c844",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8dfc33ccdf4bd813",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d295481a52b8fd83",
        "type": "subflow",
        "name": "squash history",
        "info": "\n<p>Combines history data from the start index and most recent index into a new history array.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">start <span class=\"property-type\">number</span></dt>\n    <dd>The index of the starting history value. It can be set as an environment variable in the subflow properties. Default value is 0.</dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>history <span class=\"property-type\">array</span></dt>\n    <dd>An array containing two elements - the starting history value based on the specified index, and the most recent history value.</dd>\n</dl>\n<h3>Details</h3>\n<p>The subflow first retrieves the 'start' value from the environment variables. The starting history value is fetched based on this index, and the latest history value is retrieved as well. The function then creates a new array containing these two values and sets it as the output message 'history' property.</p>\n",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 40,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a25be0e127fc9e24",
        "type": "subflow",
        "name": "stash pop",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "depth",
                "type": "num",
                "value": "1"
            },
            {
                "name": "apply",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "f9e0ec91.e767e",
        "type": "subflow",
        "name": "Minify JSON",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "237429fb2a5a7712",
        "type": "subflow",
        "name": "confgpt",
        "info": "<p>Writes <code>msg.payload</code> to a file, either adding to the end or replacing the existing content.\n    Alternatively, it can delete the file.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be updated can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n    <dt class=\"optional\">encoding <span class=\"property-type\">string</span></dt>\n    <dd>If encoding is configured to be set by msg, then this optional property can set the encoding.</dt>\n</dl>\n<h3>Output</h3>\n<p>On completion of write, input message is sent to output port.</p>\n<h3>Details</h3>\n<p>Each message payload will be added to the end of the file, optionally appending\na newline (\\n) character between each one.</p>\n<p>If <code>msg.filename</code> is used the file will be closed after every write.\nFor best performance use a fixed filename.</p>\n<p>It can be configured to overwrite the entire file rather than append. For example,\nwhen writing binary data to a file, such as an image, this option should be used\nand the option to append a newline should be disabled.</p>\n<p>Encoding of data written to a file can be specified from list of encodings.</p>\n<p>Alternatively, this node can be configured to delete the file.</p>",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "7be18892c7b30810"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 140,
                "wires": [
                    {
                        "id": "0e8a88234ef86bb0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "auto4",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02409038fd9362ee",
        "type": "subflow",
        "name": "step by step",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "587cc92797acd5f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 180,
                "wires": [
                    {
                        "id": "4c18e4ef1378f85f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 320,
            "y": 40,
            "wires": [
                {
                    "id": "b9ef7df646a61456",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "520a10812173e701",
        "type": "subflow",
        "name": "stash",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "clear",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "50df1246bdaf5119",
        "type": "subflow",
        "name": "smartcoder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "7cfc8986c5d0b0e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 560,
                "wires": [
                    {
                        "id": "1eaa0d485c0ce940",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 40,
            "wires": [
                {
                    "id": "ef3a21ae34f6475f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7d91a580a2c7c19",
        "type": "subflow",
        "name": "codeblocks",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "blockTypes",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "f8d5a5a4f2b87c52",
        "type": "subflow",
        "name": "flow",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 120,
                "y": 340,
                "wires": [
                    {
                        "id": "95f92e2896b1f816"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 540,
                "wires": [
                    {
                        "id": "6f3eb41d26f826f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "inputLabels": [
            "flow to check"
        ],
        "outputLabels": [
            "valid flow"
        ],
        "status": {
            "x": 420,
            "y": 60,
            "wires": [
                {
                    "id": "9d93e67707347e32",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1254546b0e9fb57c",
        "type": "subflow",
        "name": "bundle formatting",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 260,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "f6dd154f310aa615",
        "type": "subflow",
        "name": "engineer",
        "info": "",
        "category": "persona prompt",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "9f31d45ecb1d3482",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "schema",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "63dba49296c3a9e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "cf072eee9e78f126",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "13d4ac7b7c9898ae",
        "type": "subflow",
        "name": "codeblock",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "a5f18db0d45889f2",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7da9bb553d44f56a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "bb67c6f583a80cc4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "f16c08b0c74d892d",
        "type": "subflow",
        "name": "bundle prompt",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red-dashboard/ui_toast.png"
    },
    {
        "id": "b53b3b7e24a3e4e7",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "coders",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "15470b359beaf8ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 320,
                "wires": [
                    {
                        "id": "8b97ebde3ffd9ecc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "str",
                "value": "3"
            }
        ],
        "meta": {
            "module": "gpt-subflows",
            "version": "0.0.1"
        },
        "color": "#DDAA99",
        "status": {
            "x": 280,
            "y": 40,
            "wires": [
                {
                    "id": "f89c539d2436d4b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "3624ea24a7bdeaa4",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "review prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8843d7f92416211de9ebb963ff4ce28125932878",
        "type": "subflow",
        "name": "Transform nodes into subflows",
        "info": "<details>\n  <summary>Click me</summary>\n\n  ### Heading\n  1. Foo\n  2. Bar\n     * Baz\n     * Qux\n\n  ### Some Code\n  ```js\n  function logSomething(something) {\n    console.log('Something', something);\n  }\n  ```\n</details>",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 220,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Node List"
        ],
        "outputLabels": [
            "Subflows"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "a9cb3f5fc1c3e1b8",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": []
            }
        ]
    },
    {
        "id": "bf9fecd68e29a50a",
        "type": "subflow",
        "name": "analyzer",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "64cb2cf8b2438912"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 380,
                "wires": [
                    {
                        "id": "ec6d7c68553d97b3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48101654b91252fc",
        "type": "subflow",
        "name": "planner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": []
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bfe4dee01d61e0c2",
        "type": "subflow",
        "name": "scanner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "d1331f209c505041"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 160,
                "wires": [
                    {
                        "id": "73176ac6586b6585",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "657c8f0e9df6242e",
        "type": "subflow",
        "name": "summariser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 40,
                "wires": [
                    {
                        "id": "684254331f69bb61"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 380,
                "wires": [
                    {
                        "id": "036e8e789347f95f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c8ed6299a7db1bac",
        "type": "junction",
        "z": "e961334cde89144c",
        "x": 500,
        "y": 160,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ]
    },
    {
        "id": "bb3eea2eeff7495c",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ]
    },
    {
        "id": "7933d60af84f3844",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 980,
        "y": 440,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ]
    },
    {
        "id": "6d9fb5aa70b87fab",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1240,
        "y": 440,
        "wires": [
            [
                "f9ed70c1b56a8ed7"
            ]
        ]
    },
    {
        "id": "56eeed36b16f302e",
        "type": "junction",
        "z": "064c17312433ce15",
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "1c58af75659287c4",
                "16e7fb7b2bc1fd73",
                "17c4c2465ba4c355"
            ]
        ]
    },
    {
        "id": "1eb0bc16cb04fae2",
        "type": "junction",
        "z": "657c8f0e9df6242e",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ]
    },
    {
        "id": "07ae0da70cee4ba6",
        "type": "function",
        "z": "d295481a52b8fd83",
        "name": "function 1",
        "func": "msg.history = [msg.history[env.get('start')],msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "40226d5093552176",
        "type": "function",
        "z": "a25be0e127fc9e24",
        "name": "pop",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nlet depth = env.get('depth')\n\nwhile (depth){\n    const stash = msg.stash[key].pop()\n    if (env.get('apply')){\n        msg[key] = stash;\n    }\n    // @ts-ignore\n    depth--;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ffdcd61d.64da38",
        "type": "function",
        "z": "f9e0ec91.e767e",
        "name": "minify-json",
        "func": "const inputList = Array.isArray(msg.history) ? msg.history : [];\n\ninputList.forEach((item) => {\n  item.content = item.content.replace(/```.*\\n([\\s\\S]*?)\\n```/g, (match, codeBlock) => {\n      try {\n          const regex = /(\\n|\\\\n|\\r)\\s*/g; // note the 'g' flag for global replacement\n          return '```json\\n' + codeBlock.replace(regex, ''); + '\\n```';\n      } catch (error) {\n          return match;\n      }\n  });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0e8a88234ef86bb0",
        "type": "link call",
        "z": "237429fb2a5a7712",
        "name": "gpt queue",
        "links": [
            "f2342d49916a4e23"
        ],
        "linkType": "static",
        "timeout": "36001",
        "x": 370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7be18892c7b30810",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auto4",
                "pt": "msg",
                "to": "auto4",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "0e8a88234ef86bb0"
            ]
        ]
    },
    {
        "id": "587cc92797acd5f3",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "last line",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "94270be7a7e81ed1"
            ]
        ]
    },
    {
        "id": "94270be7a7e81ed1",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "02498ebad85fca04"
            ]
        ]
    },
    {
        "id": "4c18e4ef1378f85f",
        "type": "subflow:d295481a52b8fd83",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc85a1ac4b1b979e",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "bundle",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "now put it all together according to the original question.\n\nbe sure to obey the formatting rules.",
        "output": "str",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "5392474c6ec89e72"
            ]
        ]
    },
    {
        "id": "02498ebad85fca04",
        "type": "switch",
        "z": "02409038fd9362ee",
        "name": "bundle?",
        "property": "bundle",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "bc85a1ac4b1b979e"
            ],
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "5392474c6ec89e72",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "b9ef7df646a61456",
        "type": "status",
        "z": "02409038fd9362ee",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dd186aa6a265fc5d",
        "type": "function",
        "z": "520a10812173e701",
        "name": "stash key value ",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nmsg.stash[key].push(JSON.parse(JSON.stringify(msg[key] || '')))\nif (env.get('clear')) {\n    msg[key] = undefined;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "31d7c39f9a6c8c97",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "merge answers",
        "func": "msg.history = [msg.history[0], msg.history[1]]\n\nmsg.history[1].content = `\nhere are ${msg.payload.length} possible solutions:\n${msg.payload.map((t, i) => `\n---${i} START---\n${t}\n---${i} END---\n`).join('\\n')}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "b446b41f8155ed4f"
            ]
        ]
    },
    {
        "id": "83096e44fc2c289e",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "review",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert reviewer and researcher.\n\nThe results above have yet to be deployed.\n\n1 List the issues with each option, ranking each by severity focus on:\n1.1 problems that may prevent it from working.\n1.2 failures to deliver on the specifications of the request.\n2 List what each option gets right, and which takes the overall best approach.\n3 synthesize a complete and robust solution.\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "2fba30a10931ca0c"
            ]
        ]
    },
    {
        "id": "189d162c7a1def8e",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "copy",
        "func": "const num_copies = env.get(\"num_copies\") || 1;\nconst copies = [];\nfor(let i = 0; i < num_copies; i++){\n    copies.push(msg.payload);\n}\n\nmsg.payload = copies;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "95fe1a4f7ccf06fb"
            ]
        ]
    },
    {
        "id": "95fe1a4f7ccf06fb",
        "type": "split",
        "z": "50df1246bdaf5119",
        "name": "split copies",
        "splt": "",
        "spltType": "msg",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "4604e40b24b33cb3"
            ]
        ]
    },
    {
        "id": "0e3ce1809b54fad7",
        "type": "join",
        "z": "50df1246bdaf5119",
        "name": "join copies",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "31d7c39f9a6c8c97"
            ]
        ]
    },
    {
        "id": "ef3a21ae34f6475f",
        "type": "status",
        "z": "50df1246bdaf5119",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1c0f8158f5a82cc5",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "schema failure",
        "scope": [
            "86c1b1c593519bdf"
        ],
        "uncaught": false,
        "x": 360,
        "y": 200,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "ec40afea20b4c218",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "empty/multiple",
        "scope": [
            "eef683f2fb7c7a34"
        ],
        "uncaught": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "b34ce9b36761fd82",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{{error.message}}}",
        "output": "str",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "8e7320419df91165"
            ]
        ]
    },
    {
        "id": "8e7320419df91165",
        "type": "subflow:520a10812173e701",
        "z": "50df1246bdaf5119",
        "name": "stash temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "165d1423d6343a0a"
            ]
        ]
    },
    {
        "id": "165d1423d6343a0a",
        "type": "change",
        "z": "50df1246bdaf5119",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 240,
        "wires": [
            [
                "0b7031b9cee904dc"
            ]
        ]
    },
    {
        "id": "0b7031b9cee904dc",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "96069e8a8601f3f2"
            ]
        ]
    },
    {
        "id": "96069e8a8601f3f2",
        "type": "subflow:a25be0e127fc9e24",
        "z": "50df1246bdaf5119",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "bde788de03976b97"
            ]
        ]
    },
    {
        "id": "bde788de03976b97",
        "type": "subflow:d295481a52b8fd83",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "447868e0429fdc8c",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "50df1246bdaf5119",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "eef683f2fb7c7a34"
            ]
        ]
    },
    {
        "id": "eef683f2fb7c7a34",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "get result",
        "func": "console.log('parsed code:', msg.payload)\nmsg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nif (msg.payload.length > 1){\n  throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')\n}\n\nif (msg.payload.length < 1){\n  throw new Error(`no code blocks detected, please obey the formatting instructions:\\n${msg.format}`)\n}\n\nmsg.payload = msg.payload[0].content;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "393f19cb21285e5c"
            ]
        ]
    },
    {
        "id": "393f19cb21285e5c",
        "type": "switch",
        "z": "50df1246bdaf5119",
        "name": "",
        "property": "schema",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 480,
        "wires": [
            [
                "86c1b1c593519bdf"
            ],
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "86c1b1c593519bdf",
        "type": "json",
        "z": "50df1246bdaf5119",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "c24941818a42ca98",
        "type": "subflow:f16c08b0c74d892d",
        "z": "50df1246bdaf5119",
        "name": "bundle prompt",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "189d162c7a1def8e"
            ]
        ]
    },
    {
        "id": "4c1e24c203e0aef7",
        "type": "subflow:1254546b0e9fb57c",
        "z": "50df1246bdaf5119",
        "name": "wrap format",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c24941818a42ca98"
            ]
        ]
    },
    {
        "id": "7cfc8986c5d0b0e2",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "4c1e24c203e0aef7"
            ]
        ]
    },
    {
        "id": "1eaa0d485c0ce940",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "test",
        "func": "if (!msg.test){\n    return msg;\n}\n\nmsg.test(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "77b5dc952d57e266",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "smartGPTish",
        "info": "this column is a coding specific variant of the smartgpt approach",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "6f31904da5faaece",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "parse errors",
        "info": "these are two variants of a parse error:\n\nempty/multiple means we didn't get a markdown code block, or we got too many to be sure which is what we're after. ",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "4604e40b24b33cb3",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "0e3ce1809b54fad7"
            ]
        ]
    },
    {
        "id": "2fba30a10931ca0c",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "b446b41f8155ed4f",
        "type": "subflow:f9e0ec91.e767e",
        "z": "50df1246bdaf5119",
        "name": "minify JSON in history",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "83096e44fc2c289e"
            ]
        ]
    },
    {
        "id": "bc9b2bca5d9d9220",
        "type": "function",
        "z": "b7d91a580a2c7c19",
        "name": "Extract Code Blocks",
        "func": "function extractCodeBlocks(text, blockTypes) {\n  const results = [];\n  const allBlocks = !blockTypes || blockTypes.length === 0;\n\n  let codeBlockRegex;\n  if (allBlocks) {\n    codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)\\n```/g;\n  } else {\n    const regexStr = blockTypes.map((type) => type).join('|');\n    codeBlockRegex = new RegExp(`\\`\\`\\`(${regexStr})\\n([\\\\s\\\\S]*?)\\\\n\\`\\`\\``, 'g');\n    // const jsonBlockRegex = new RegExp(`\\`\\`\\`((json))\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'g');\n    // console.log('manual match?', jsonBlockRegex.exec(text))\n  }\n\n  let match;\n  while ((match = codeBlockRegex.exec(text)) !== null) {\n    // console.log('got match', match);\n    const type = match[1];\n    const content = match[2];\n    results.push({ type, content });\n  }\n\n  return results;\n}\n\nconst text = msg.payload;\n\nconst blockTypes = (env.get('blockTypes') || '').split(',').filter(t => t);\n// console.log('extract', text, blockTypes)\nmsg.payload = extractCodeBlocks(text, blockTypes);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9d93e67707347e32",
        "type": "status",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "95f92e2896b1f816",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse json codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "869689982e74b4dc"
            ]
        ]
    },
    {
        "id": "869689982e74b4dc",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "get result",
        "func": "msg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nmsg.payload = null;\nfor (const {content} of potentials){\n  try {\n    const obj = JSON.parse(content)\n    if (Array.isArray(obj) && obj.every(v => v.id && v.type)){\n      // is likely a node-red flow\n      if (msg.payload) {\n        throw new Error('multiple potential node-red flows detected, we need exactly one.')\n      } else {\n        msg.payload = JSON.stringify(obj)\n      }\n    }\n  } catch (e) {\n    //ignore\n  }\n}\n\nif (!msg.payload){\n  throw new Error('no valid node-red flows detected, remember: must be inside a github flavored markdown block and follow the JSON schema')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "b2728fc75e03f928"
            ]
        ]
    },
    {
        "id": "25e9760c313f1739",
        "type": "json",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "6f3eb41d26f826f2"
            ]
        ]
    },
    {
        "id": "2c5ea07fe592c94f",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{error.message}}\n\nremember, you need to follow these formatting instructions:\n\n{{format}}",
        "output": "str",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "90655d2d5bb817cc"
            ]
        ]
    },
    {
        "id": "06989b788e021dca",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "empty/multiple",
        "scope": [
            "869689982e74b4dc"
        ],
        "uncaught": false,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "719bb2e65b5f411f",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "schema failure",
        "scope": [
            "25e9760c313f1739"
        ],
        "uncaught": false,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "b2728fc75e03f928",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "f8d5a5a4f2b87c52",
        "name": "set node-red schema",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "25e9760c313f1739"
            ]
        ]
    },
    {
        "id": "64d95ba33b6a42ce",
        "type": "subflow:237429fb2a5a7712",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "bb659029013a4888"
            ]
        ]
    },
    {
        "id": "384314168ce8ee86",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "64d95ba33b6a42ce"
            ]
        ]
    },
    {
        "id": "6f3eb41d26f826f2",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "clear schema",
        "rules": [
            {
                "t": "delete",
                "p": "schema",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "schemaString",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "912fae5cd133c953",
        "type": "subflow:d295481a52b8fd83",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "95f92e2896b1f816"
            ]
        ]
    },
    {
        "id": "90655d2d5bb817cc",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash temp",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "bb659029013a4888",
        "type": "subflow:a25be0e127fc9e24",
        "z": "f8d5a5a4f2b87c52",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "912fae5cd133c953"
            ]
        ]
    },
    {
        "id": "12256771ca410bc7",
        "type": "template",
        "z": "1254546b0e9fb57c",
        "name": "format meta instructions",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response will follow these formatting rules:\n{{{format}}}\n{{#schemaString}}\n\nAdditionally, here's a JSON schema reference you will conform to:\n{{{schemaString}}}\n{{/schemaString}}",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d973d3ca1dc6855f",
        "type": "template",
        "z": "f6dd154f310aa615",
        "name": "expert engineer",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert {{language}} software engineer at the top of your game.\nYou are known for writing clean, clear code.\n{{persona}}",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "287a8289c0d9a5d0",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f6dd154f310aa615",
        "name": "",
        "x": 220,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63dba49296c3a9e4",
        "type": "template",
        "z": "9f31d45ecb1d3482",
        "name": "set validation schema",
        "field": "schema",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\"id\", \"type\"],\n    \"properties\": {\n      \"nodes\": {\n        \"not\": {\n          \"type\": \"array\"\n        }\n      },\n      \"status\": {\n        \"not\":{\n          \"type\": \"object\"\n        }\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"info\": {\n        \"type\": \"string\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"in\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"wires\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"out\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"port\": {\n                    \"type\": \"number\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"env\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"type\": {\n              \"type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"meta\": {\n        \"type\": \"object\",\n        \"required\": [],\n        \"properties\": {}\n      },\n      \"color\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
        "output": "json",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cf072eee9e78f126"
            ]
        ]
    },
    {
        "id": "cf072eee9e78f126",
        "type": "change",
        "z": "9f31d45ecb1d3482",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schemaString",
                "pt": "msg",
                "to": "$string(schema)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "31d816170cfa7a8f",
        "type": "template",
        "z": "13d4ac7b7c9898ae",
        "name": "codeblock",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Put the primary output inside a github flavored markdown code block, with an appropriate language label\n{{{format}}}",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb67c6f583a80cc4",
        "type": "template",
        "z": "a5f18db0d45889f2",
        "name": "flow",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your output will be a valid, parseable, node-red array, suitable for import:\nhere's an example:\n\n```json\n[{\"id\":\"13d4ac7b7c9898ae\",\"type\":\"subflow\",\"name\":\"codeblock\",\"info\":\"\",\"category\":\"format\",\"in\":[{\"x\":80,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\"}]}],\"out\":[{\"x\":300,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\",\"port\":0}]}],\"env\":[],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-archive\"},{\"id\":\"31d816170cfa7a8f\",\"type\":\"template\",\"z\":\"13d4ac7b7c9898ae\",\"name\":\"codeblock\",\"field\":\"format\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Put the primary output inside a github flavored markdown code block, with an appropriate language label\\n\\n{{{format}}}\",\"output\":\"str\",\"x\":190,\"y\":100,\"wires\":[[]]}]\n```",
        "output": "str",
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7da9bb553d44f56a",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "bb67c6f583a80cc4"
            ]
        ]
    },
    {
        "id": "c306926b9536fe15",
        "type": "template",
        "z": "f16c08b0c74d892d",
        "name": "set task to payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\n{{{requirements}}}\n\n{{{format}}}\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f89c539d2436d4b8",
        "type": "status",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1a48d7a00270d882",
        "type": "subflow:a5f18db0d45889f2",
        "z": "b53b3b7e24a3e4e7",
        "name": "set format",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "69979c46ebfcda56"
            ]
        ]
    },
    {
        "id": "69c4727b24bef714",
        "type": "subflow:f6dd154f310aa615",
        "z": "b53b3b7e24a3e4e7",
        "name": "set persona",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "1a48d7a00270d882"
            ]
        ]
    },
    {
        "id": "8b97ebde3ffd9ecc",
        "type": "subflow:50df1246bdaf5119",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "env": [
            {
                "name": "num_copies",
                "value": "num_copies",
                "type": "env"
            },
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "15470b359beaf8ad",
        "type": "change",
        "z": "b53b3b7e24a3e4e7",
        "name": "set language",
        "rules": [
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "node-red and javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "69c4727b24bef714"
            ]
        ]
    },
    {
        "id": "006a7cb1b7f3bec3",
        "type": "comment",
        "z": "b53b3b7e24a3e4e7",
        "name": "TODO: put this column inside smartcoder",
        "info": "most of this right hand column should be refactored into \"smartcoder\" and be paramaterized.",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "69979c46ebfcda56",
        "type": "template",
        "z": "b53b3b7e24a3e4e7",
        "name": "set review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "8b97ebde3ffd9ecc"
            ]
        ]
    },
    {
        "id": "76bd320aab4ecae2",
        "type": "template",
        "z": "3624ea24a7bdeaa4",
        "name": "node-red review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d0475e52f2f9d8e9",
        "type": "function",
        "z": "8843d7f92416211de9ebb963ff4ce28125932878",
        "name": "transform nodes",
        "func": "var subflows = msg.payload.reduce(function(acc, node) {\n    if (node.type === \"subflow\") {\n        acc[node.id] = { id: node.id, nodes: [node] };\n    } else if (node.z && acc[node.z]) {\n        acc[node.z].nodes.push(node);\n    }\n    return acc;\n}, {});\n\nvar result = Object.values(subflows).map(\n    function(subflow) {\n        return {id: subflow.id,type: \"subflow\",nodes: JSON.parse(JSON.stringify(subflow.nodes))};\n    }\n);\nmsg.payload = JSON.stringify(result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cf791c6d0c28776a",
        "type": "subflow:237429fb2a5a7712",
        "z": "a9cb3f5fc1c3e1b8",
        "name": "",
        "x": 320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "417ff54d16e93866",
        "type": "template",
        "z": "bf9fecd68e29a50a",
        "name": "set payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "d127214359ceeb96"
            ]
        ]
    },
    {
        "id": "64cb2cf8b2438912",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "stash payload",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "417ff54d16e93866"
            ]
        ]
    },
    {
        "id": "c7cbd7f5c3cbdaa8",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "restore payload",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "cfc30e5be9fe3f3e"
            ]
        ]
    },
    {
        "id": "4d88bceb18e53451",
        "type": "change",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "c7cbd7f5c3cbdaa8"
            ]
        ]
    },
    {
        "id": "cfc30e5be9fe3f3e",
        "type": "subflow:520a10812173e701",
        "z": "bf9fecd68e29a50a",
        "name": "clear history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "ec6d7c68553d97b3"
            ]
        ]
    },
    {
        "id": "d127214359ceeb96",
        "type": "subflow:237429fb2a5a7712",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "4d88bceb18e53451"
            ]
        ]
    },
    {
        "id": "ec6d7c68553d97b3",
        "type": "subflow:a25be0e127fc9e24",
        "z": "bf9fecd68e29a50a",
        "name": "",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 240,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "54aae0f36c581409",
        "type": "template",
        "z": "48101654b91252fc",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a thorough researcher and analyst.\n\n{{{context}}}\n\nYou have just been presented with the following:\n{{{payload}}}\n\nPlease analyze it and list as many facts, observations, and insights about it as you can.\nrate each item with a confidence score from 0 to 10.",
        "output": "str",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "3e0c33f17172fc85"
            ]
        ]
    },
    {
        "id": "3e0c33f17172fc85",
        "type": "link call",
        "z": "48101654b91252fc",
        "name": "gpt queue",
        "links": [],
        "linkType": "static",
        "timeout": "3600",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "f6821c700cf97b2f"
            ]
        ]
    },
    {
        "id": "16ea30faba5cfc3c",
        "type": "subflow:520a10812173e701",
        "z": "48101654b91252fc",
        "name": "",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "54aae0f36c581409"
            ]
        ]
    },
    {
        "id": "9bd6b5f18d3a0ecc",
        "type": "subflow:a25be0e127fc9e24",
        "z": "48101654b91252fc",
        "name": "",
        "x": 240,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f6821c700cf97b2f",
        "type": "change",
        "z": "48101654b91252fc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "analysis",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "9bd6b5f18d3a0ecc"
            ]
        ]
    },
    {
        "id": "92fd8467775c1835",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "73176ac6586b6585"
            ]
        ]
    },
    {
        "id": "d1331f209c505041",
        "type": "split",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "92fd8467775c1835"
            ]
        ]
    },
    {
        "id": "73176ac6586b6585",
        "type": "join",
        "z": "bfe4dee01d61e0c2",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "de2f72edd32ba706",
        "type": "template",
        "z": "657c8f0e9df6242e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a terse yet expressive analyst. You are good at summarising.\n\n{{{context}}}\n\nYou have just been presented with the following pieces of analysis of a larger work:\n{{{payload}}}\n\nPlease give a summary of the relevant information.",
        "output": "str",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "eefbfc8dd8aecccf"
            ]
        ]
    },
    {
        "id": "eefbfc8dd8aecccf",
        "type": "subflow:237429fb2a5a7712",
        "z": "657c8f0e9df6242e",
        "name": "",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "99961076a36af9ed"
            ]
        ]
    },
    {
        "id": "99961076a36af9ed",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "recombine",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "036e8e789347f95f"
            ]
        ]
    },
    {
        "id": "627a5403fe4f266f",
        "type": "batch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "mode": "count",
        "count": "2",
        "overlap": "1",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "a401ef68997c6b2a"
            ]
        ]
    },
    {
        "id": "684254331f69bb61",
        "type": "json",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "081d39183e2323d2"
            ]
        ]
    },
    {
        "id": "081d39183e2323d2",
        "type": "split",
        "z": "657c8f0e9df6242e",
        "name": "",
        "splt": "3000",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "e00be323f0003974"
            ]
        ]
    },
    {
        "id": "a401ef68997c6b2a",
        "type": "join",
        "z": "657c8f0e9df6242e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "0c3087c33362c56c"
            ]
        ]
    },
    {
        "id": "1bf095ea109bae31",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "willComplete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 120,
        "wires": [
            [
                "627a5403fe4f266f"
            ]
        ]
    },
    {
        "id": "e00be323f0003974",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "parts.count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$sum([parts.index,1])",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 120,
        "wires": [
            [
                "1bf095ea109bae31"
            ],
            [
                "627a5403fe4f266f"
            ]
        ]
    },
    {
        "id": "0c3087c33362c56c",
        "type": "change",
        "z": "657c8f0e9df6242e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "willComplete",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "willComplete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "de2f72edd32ba706"
            ]
        ]
    },
    {
        "id": "036e8e789347f95f",
        "type": "switch",
        "z": "657c8f0e9df6242e",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "3000",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "e94dc57b47a49387"
            ],
            [
                "1eb0bc16cb04fae2",
                "9fa479ba82f44e5c"
            ]
        ]
    },
    {
        "id": "e94dc57b47a49387",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 340,
        "wires": []
    },
    {
        "id": "9fa479ba82f44e5c",
        "type": "debug",
        "z": "657c8f0e9df6242e",
        "name": "cycle",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 440,
        "wires": []
    },
    {
        "id": "414ddee1287efb66",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "941765e8bb2c32d6",
        "name": "flowcoder",
        "env": [
            {
                "name": "num_copies",
                "value": "3",
                "type": "num"
            }
        ],
        "x": 120,
        "y": 240,
        "wires": [
            [
                "99b359093fa5ee99"
            ]
        ]
    },
    {
        "id": "733c94970d337f9c",
        "type": "inject",
        "z": "941765e8bb2c32d6",
        "name": "set task props",
        "props": [
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.7",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a701ddb8190d147a"
            ]
        ]
    },
    {
        "id": "c13f6114b4ebbbcc",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I need a node-red subflow according to the following Specification:\n\nmsg.payload starts as an array of node-red node objects with the following properties:\n\nid,\ntype,\nz (optional)\n\nI want this to be transformed into an array of new objects, one for each 'subflow' type in the incoming message.\n\nthe new objects should have:\nid: the id of the subflow\nnodes: a deep clone of the subflow node, and all nodes with the subflows 'id' as their 'z' property\n\ntype: 'subflow'\n\nplease provide me with a valid, syntactically correct JSON string that I can use to import the subflow above",
        "output": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "99b359093fa5ee99",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 120,
        "y": 280,
        "wires": []
    },
    {
        "id": "a701ddb8190d147a",
        "type": "subflow:3624ea24a7bdeaa4",
        "z": "941765e8bb2c32d6",
        "name": "set node-red review",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "c13f6114b4ebbbcc"
            ]
        ]
    },
    {
        "id": "ffc06a5a5bbea58f",
        "type": "batch",
        "z": "941765e8bb2c32d6",
        "name": "",
        "mode": "count",
        "count": 10,
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8c1cba224d949d09",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "gpt4 limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "13",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 280,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ]
    },
    {
        "id": "4b735d4be9323117",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "turbo limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 280,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ]
    },
    {
        "id": "b98332fdc0290246",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpt4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turbo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "8c1cba224d949d09"
            ],
            [
                "4b735d4be9323117"
            ]
        ]
    },
    {
        "id": "f2342d49916a4e23",
        "type": "link in",
        "z": "e961334cde89144c",
        "name": "link in 1",
        "links": [],
        "x": 65,
        "y": 180,
        "wires": [
            [
                "b636b9ea5bf45435"
            ]
        ]
    },
    {
        "id": "9f4d0154bcaa5bdb",
        "type": "link out",
        "z": "e961334cde89144c",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 605,
        "y": 480,
        "wires": []
    },
    {
        "id": "1d0773bcf3416404",
        "type": "chatgpt",
        "z": "e961334cde89144c",
        "name": "",
        "Organization": " ",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "56380579ca248c30",
                "d2ee1fb0b75e93b6"
            ]
        ]
    },
    {
        "id": "09ae223c8021bfb1",
        "type": "catch",
        "z": "e961334cde89144c",
        "name": "",
        "scope": [
            "1d0773bcf3416404"
        ],
        "uncaught": false,
        "x": 390,
        "y": 40,
        "wires": [
            [
                "45d0a3a5f2e2b024"
            ]
        ]
    },
    {
        "id": "56380579ca248c30",
        "type": "file",
        "z": "e961334cde89144c",
        "name": "",
        "filename": "/data/gptlog.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "dd2038bc71721c1f",
        "type": "change",
        "z": "e961334cde89144c",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "error",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "b722eb5e7dd70f13",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "known errors",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "maximum context length",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "429",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "502",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "read ECONNRESET",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "cb040ea047dc84fb"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "c8ed6299a7db1bac"
            ],
            [
                "742d10fb144f3c99"
            ]
        ]
    },
    {
        "id": "d2ee1fb0b75e93b6",
        "type": "subflow:f9e0ec91.e767e",
        "z": "e961334cde89144c",
        "name": "minify JSON in history",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "2d60fcbd28eb92c7"
            ]
        ]
    },
    {
        "id": "2d60fcbd28eb92c7",
        "type": "change",
        "z": "e961334cde89144c",
        "name": "clear max_tokens",
        "rules": [
            {
                "t": "delete",
                "p": "max_tokens",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "d5f444de1f8ceabb"
            ]
        ]
    },
    {
        "id": "d5f444de1f8ceabb",
        "type": "subflow:a25be0e127fc9e24",
        "z": "e961334cde89144c",
        "name": "restore topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "9f4d0154bcaa5bdb"
            ]
        ]
    },
    {
        "id": "5d459fc8-eec7-4ace-94e5-b653c47e5061",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "ensure token headroom",
        "func": "const encode = gpt3Encoder.encode;\nmsg.topic = msg.topic || 'turbo';\nif (!msg.max_tokens) {\n    let sum = (msg.history || []).filter(e => e).reduce((acc, cur) => acc + encode(cur.content).length, 0);\n    sum += encode(msg.payload).length;\n    sum += 300; // give the encoder some wiggle room\n    node.log('token sum: ' + sum);\n    if (env.auto4\n    && (msg.topic !== 'gpt4') \n    // @ts-ignore\n    && (4096 - sum < (msg.min_tokens || 0))) {\n        msg.topic = 'gpt4'\n    }\n\n    // if (env.get('auto4')\n    // && (msg.topic == 'gpt4')\n    // && (4096 - sum > (msg.min_tokens || 0))){\n    //     msg.topic = 'turbo';\n    // }\n    \n    msg.max_tokens = ((msg.topic === 'gpt4') ? 8192 : 4096) - sum;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 170,
        "y": 220,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "b636b9ea5bf45435",
        "type": "subflow:520a10812173e701",
        "z": "e961334cde89144c",
        "name": "stash topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "5d459fc8-eec7-4ace-94e5-b653c47e5061"
            ]
        ]
    },
    {
        "id": "cb040ea047dc84fb",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "fix token overage",
        "func": "function extractNumbersFromString(str) {\n    const regex = /\\d+/g; // Regular expression to match one or more digits\n    const matches = str.match(regex); // Extract all numbers from the string\n\n    const result = {\n        maximumContextLength: parseInt(matches[0]),\n        requestedTokens: parseInt(matches[1]),\n        tokensInMessages: parseInt(matches[2]),\n        tokensInCompletion: parseInt(matches[3])\n    };\n\n    return result;\n}\n\nconst values = extractNumbersFromString(msg.error.message);\nconsole.log('values', values)\nconst overage = values.tokensInCompletion - (values.requestedTokens - values.maximumContextLength);\nif (values.tokensInCompletion - msg.min_tokens < overage) {\n    // we just miscalculated, but we're still good\n    msg.max_tokens = values.tokensInCompletion - overage\n} else if (msg.auto4 && msg.topic === 'turbo') {\n    // upgrade model\n    msg.topic = 'gpt4'\n} else {\n    //we fucked\n    throw new Error('token overage')\n}\n\nmsg.history.pop()\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "dd2038bc71721c1f"
            ]
        ]
    },
    {
        "id": "e66c7e2b9c2807aa",
        "type": "debug",
        "z": "e961334cde89144c",
        "name": "unknown error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 100,
        "wires": []
    },
    {
        "id": "45d0a3a5f2e2b024",
        "type": "function",
        "z": "e961334cde89144c",
        "name": "clean history",
        "func": "if (msg.history){\n    const seen = new Set()\n    msg.history = msg.history.filter(item => {\n        if (seen.has(item.content)){\n            return false;\n        }\n        seen.add(item.content)\n        return true;\n    })\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "b722eb5e7dd70f13",
                "dd3b4001dfae1c23"
            ]
        ]
    },
    {
        "id": "dd3b4001dfae1c23",
        "type": "debug",
        "z": "e961334cde89144c",
        "name": "all errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "742d10fb144f3c99",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "ignore duplicates",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "That model is currently overloaded with other requests",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "e66c7e2b9c2807aa"
            ]
        ]
    },
    {
        "id": "d65872b05ad84bb5",
        "type": "catch",
        "z": "e961334cde89144c",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 640,
        "y": 20,
        "wires": [
            [
                "e66c7e2b9c2807aa"
            ]
        ]
    },
    {
        "id": "f4f6fa24ca217587",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "ed65351c21590e04"
            ]
        ]
    },
    {
        "id": "ed65351c21590e04",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "requirements",
                "pt": "msg",
                "to": "payload.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "turbo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "javascript",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "task_id",
                "pt": "msg",
                "to": "payload.task_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "testString",
                "pt": "msg",
                "to": "payload.test",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "min_tokens",
                "pt": "msg",
                "to": "1000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "8d53a1abefddfbf2"
            ]
        ]
    },
    {
        "id": "8d53a1abefddfbf2",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "wrap requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "here are the requirements for a function i need you to write in javascript:\n\n{{{requirements}}} //...\n\nmake sure that you give me the whole function, and that the name matches.",
        "output": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "65d8c0dd542c67cc"
            ]
        ]
    },
    {
        "id": "922590827a20da6a",
        "type": "subflow:50df1246bdaf5119",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62612d04c38cb1a4",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "test",
        "func": "console.assert = (bool) => { if (!bool) throw new Error('assert!') }\n\ntry{\n    console.log('payload:', msg.payload)\n    console.log('test:', msg.testString)\n    const test = new Function('console',msg.payload + '\\n' + msg.testString)\n    test(console)\n    msg.pass = true;\n} catch (e) {\n    msg.testError = e.message;\n    msg.pass = false;\n}\n\nmsg.payload = {\n    flow: msg.flow || 'chatgpt',\n    model: msg.topic,\n    pass: msg.pass,\n    task: msg.task_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "084093a3278f4f92"
            ]
        ]
    },
    {
        "id": "b8010df720742aef",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "sum test passes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "$A + pass",
        "reduceInit": "0",
        "reduceInitType": "num",
        "reduceFixup": "$A/$N",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "4d96dd6356493577",
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "183a83919e31ea2f",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "humaneval",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\"task_id\": \"JavaScript/19\", \"prompt\": \"/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\\n  Return the string with numbers sorted from smallest to largest\\n  >>> sortNumbers('three one five')\\n  'one three five'\\n  */\\nconst sortNumbers = (numbers) => {\\n\", \"canonical_solution\": \"  const value_map = {\\n    'zero': 0,\\n    'one': 1,\\n    'two': 2,\\n    'three': 3,\\n    'four': 4,\\n    'five': 5,\\n    'six': 6,\\n    'seven': 7,\\n    'eight': 8,\\n    'nine': 9\\n  };\\n  return numbers.split(' ')\\n          .filter(x => x != '')\\n          .sort((a, b) => value_map[a] - value_map[b])\\n          .join(' ');\\n}\\n\\n\", \"test\": \"const testSortNumbers = () => {\\n  console.assert(sortNumbers('') === '')\\n  console.assert(sortNumbers('three') === 'three')\\n  console.assert(sortNumbers('three five nine') === 'three five nine')\\n  console.assert(\\n    sortNumbers(\\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\\n  )\\n  console.assert(\\n    sortNumbers(\\n      'six five four three two one zero') === 'zero one two three four five six'\\n  )\\n}\\n\\ntestSortNumbers()\\n\", \"declaration\": \"\\nconst sortNumbers = (numbers) => {\\n\", \"example_test\": \"const testSortNumbers = () => {\\n  console.assert(sortNumbers('three one five') === 'one three five')\\n}\\ntestSortNumbers()\\n\"}\n{\"task_id\": \"JavaScript/20\", \"prompt\": \"/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\\n  other and return them in order (smaller number, larger number).\\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\\n  (2.0, 2.2)\\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\\n  (2.0, 2.0)\\n  */\\nconst findClosestElements = (numbers) => {\\n\", \"canonical_solution\": \"  var closest_pair, distance;\\n  for (let i = 0; i < numbers.length; i++)\\n    for (let j = 0; j < numbers.length; j++)\\n      if (i != j) {\\n        let a = numbers[i], b = numbers[j];\\n        if (distance == null) {\\n          distance = Math.abs(a - b);\\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\\n        } else {\\n          let new_distance = Math.abs(a - b);\\n          if (new_distance < distance) {\\n            distance = new_distance;\\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\\n          }\\n        }\\n      }\\n  return closest_pair;\\n}\\n\\n\", \"test\": \"const testFindClosestElements = () => {\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([3.9, 4.0])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\\n      JSON.stringify([5.0, 5.9])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([2.0, 2.2])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\\n      JSON.stringify([2.0, 2.0])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\\n      JSON.stringify([2.2, 3.1])\\n  )\\n}\\n\\ntestFindClosestElements()\\n\", \"declaration\": \"\\nconst findClosestElements = (numbers) => {\\n\", \"example_test\": \"const testFindClosestElements = () => {\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([2.0, 2.2])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\\n      JSON.stringify([2.0, 2.0])\\n  )\\n}\\ntestFindClosestElements()\\n\"}\n{\"task_id\": \"JavaScript/21\", \"prompt\": \"/* Given list of numbers (of at least two elements), apply a linear transform to that list,\\n  such that the smallest number will become 0 and the largest will become 1\\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\\n  [0.0, 0.25, 0.5, 0.75, 1.0]\\n  */\\nconst rescaleToUnit = (numbers) => {\\n\", \"canonical_solution\": \"  var min_number = Math.min(...numbers);\\n  var max_number = Math.max(...numbers);\\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\\n}\\n\\n\", \"test\": \"const testRescaleToUnit = () => {\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\\n  )\\n}\\n\\ntestRescaleToUnit()\\n\", \"declaration\": \"\\nconst rescaleToUnit = (numbers) => {\\n\", \"example_test\": \"const testRescaleToUnit = () => {\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\\n  )\\n}\\ntestRescaleToUnit()\\n\"}\n{\"task_id\": \"JavaScript/22\", \"prompt\": \"/* Filter given list of any python values only for integers\\n  >>> filterIntegers(['a', 3.14, 5])\\n  [5]\\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\\n  [1, 2, 3]\\n  */\\nconst filterIntegers = (values) => {\\n\", \"canonical_solution\": \"  return values.filter(x => Number.isInteger(x));\\n}\\n\\n\", \"test\": \"const testFilterIntegers = () => {\\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\\n      JSON.stringify([4, 9])\\n  )\\n  console.assert(\\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\\n      JSON.stringify([3, 3, 3])\\n  )\\n}\\n\\ntestFilterIntegers()\\n\", \"declaration\": \"\\nconst filterIntegers = (values) => {\\n\", \"example_test\": \"const testFilterIntegers = () => {\\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\\n  console.assert(\\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\\n      JSON.stringify([1,2,3])\\n  )\\n}\\ntestFilterIntegers()\\n\"}\n{\"task_id\": \"JavaScript/23\", \"prompt\": \"/* Return length of given string\\n  >>> strlen('')\\n  0\\n  >>> strlen('abc')\\n  3\\n  */\\nconst strlen = (string) => {\\n\", \"canonical_solution\": \"  return string.length;\\n}\\n\\n\", \"test\": \"const testStrlen = () => {\\n  console.assert(strlen('') === 0)\\n  console.assert(strlen('x') === 1)\\n  console.assert(strlen('asdasnakj') === 9)\\n}\\n\\ntestStrlen()\\n\", \"declaration\": \"\\nconst strlen = (string) => {\\n\", \"example_test\": \"const testStrlen = () => {\\n  console.assert(strlen('') === 0)\\n  console.assert(strlen('abc') === 3)\\n}\\ntestStrlen()\\n\"}\n{\"task_id\": \"JavaScript/24\", \"prompt\": \"/* For a given number n, find the largest number that divides n evenly, smaller than n\\n  >>> largestDivisor(15)\\n  5\\n  */\\nconst largestDivisor = (n) => {\\n\", \"canonical_solution\": \"  for (let i = n - 1; i >= 0; i--)\\n    if (n % i == 0)\\n      return i;\\n}\\n\\n\", \"test\": \"const testLargestDivisor = () => {\\n  console.assert(largestDivisor(3) === 1)\\n  console.assert(largestDivisor(7) === 1)\\n  console.assert(largestDivisor(10) === 5)\\n  console.assert(largestDivisor(100) === 50)\\n  console.assert(largestDivisor(49) === 7)\\n}\\n\\ntestLargestDivisor()\\n\", \"declaration\": \"\\nconst largestDivisor = (n) => {\\n\", \"example_test\": \"const testLargestDivisor = () => {\\n  console.assert(largestDivisor(15) === 5)\\n}\\ntestLargestDivisor()\\n\"}\n{\"task_id\": \"JavaScript/25\", \"prompt\": \"/* Return list of prime factors of given integer in the order from smallest to largest.\\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\\n  Input number should be equal to the product of all factors\\n  >>> factorize(8)\\n  [2, 2, 2]\\n  >>> factorize(25)\\n  [5, 5]\\n  >>> factorize(70)\\n  [2, 5, 7]\\n  */\\nconst factorize = (n) => {\\n\", \"canonical_solution\": \"  var fact = [], i = 2;\\n  while (i <= Math.sqrt(n) + 1) {\\n    if (n % i == 0) {\\n      fact.push(i);\\n      n = n / i;\\n    } else {\\n      i += 1;\\n    }\\n  }\\n\\n  if (n > 1)\\n    fact.push(n);\\n  return fact;\\n}\\n\\n\", \"test\": \"const testFactorize = () => {\\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\\n      JSON.stringify([3, 3, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\\n      JSON.stringify([3, 3, 3, 19, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\\n      JSON.stringify([3, 19, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\\n  )\\n}\\n\\ntestFactorize()\\n\", \"declaration\": \"\\nconst factorize = (n) => {\\n\", \"example_test\": \"const testFactorize = () => {\\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\\n  console.assert(\\n    JSON.stringify(factorize(70)) ===\\n      JSON.stringify([2,5,7])\\n  )\\n}\\ntestFactorize()\\n\"}\n{\"task_id\": \"JavaScript/26\", \"prompt\": \"/* From a list of integers, remove all elements that occur more than once.\\n  Keep order of elements left the same as in the input.\\n  >>> removeDuplicates([1, 2, 3, 2, 4])\\n  [1, 3, 4]\\n  */\\nconst removeDuplicates = (numbers) => {\\n\", \"canonical_solution\": \"  var dict = new Object();\\n  for (const num of numbers) {\\n    if (num in dict) {\\n      dict[num] += 1;\\n    } else {\\n      dict[num] = 1;\\n    }\\n  }\\n  return numbers.filter(x => dict[x] <= 1);\\n}\\n\\n\", \"test\": \"const testRemoveDuplicates = () => {\\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\\n      JSON.stringify([1, 2, 3, 4])\\n  )\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\\n      JSON.stringify([1, 4, 5])\\n  )\\n}\\n\\ntestRemoveDuplicates()\\n\", \"declaration\": \"\\nconst removeDuplicates = (numbers) => {\\n\", \"example_test\": \"const testRemoveDuplicates = () => {\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\\n      JSON.stringify([1,3, 4])\\n  )\\n}\\ntestRemoveDuplicates()\\n\"}\n{\"task_id\": \"JavaScript/27\", \"prompt\": \"/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\\n  >>> flipCase('Hello')\\n  'hELLO'\\n  */\\nconst flipCase = (string) => {\\n\", \"canonical_solution\": \"  return string.split('')\\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\\n          .join('');\\n}\\n\\n\", \"test\": \"const testFlipCase = () => {\\n  console.assert(flipCase('') === '')\\n  console.assert(flipCase('Hello!') === 'hELLO!')\\n  console.assert(\\n    flipCase(\\n      'These violent delights have violent ends') ===\\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\\n  )\\n}\\n\\ntestFlipCase()\\n\", \"declaration\": \"\\nconst flipCase = (string) => {\\n\", \"example_test\": \"const testFlipCase = () => {\\n  console.assert(flipCase('Hello') === 'hELLO')\\n}\\ntestFlipCase()\\n\"}\n{\"task_id\": \"JavaScript/28\", \"prompt\": \"/* Concatenate list of strings into a single string\\n  >>> concatenate([])\\n  ''\\n  >>> concatenate(['a', 'b', 'c'])\\n  'abc'\\n  */\\nconst concatenate = (strings) => {\\n\", \"canonical_solution\": \"  return strings.join('');\\n}\\n\\n\", \"test\": \"const testConcatenate = () => {\\n  console.assert(concatenate([]) === '')\\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\\n}\\n\\ntestConcatenate()\\n\", \"declaration\": \"\\nconst concatenate = (strings) => {\\n\", \"example_test\": \"const testConcatenate = () => {\\n  console.assert(concatenate([]) === '')\\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\\n}\\ntestConcatenate()\\n\"}\n{\"task_id\": \"JavaScript/29\", \"prompt\": \"/* Filter an input list of strings only for ones that start with a given prefix.\\n  >>> filterByPrefix([], 'a')\\n  []\\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\\n  ['abc', 'array']\\n  */\\nconst filterByPrefix = (strings, prefix) => {\\n\", \"canonical_solution\": \"  return strings.filter(x => x.startsWith(prefix));\\n}\\n\\n\", \"test\": \"const testFilterByPrefix = () => {\\n  console.assert(\\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\\n  )\\n}\\n\\ntestFilterByPrefix()\\n\", \"declaration\": \"\\nconst filterByPrefix = (strings, prefix) => {\\n\", \"example_test\": \"const testFilterByPrefix = () => {\\n  console.assert(\\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\\n    ) === JSON.stringify(['abc', 'array'])\\n  )\\n}\\ntestFilterByPrefix()\\n\"}\n{\"task_id\": \"JavaScript/30\", \"prompt\": \"/*Return only positive numbers in the list.\\n  >>> getPositive([-1, 2, -4, 5, 6])\\n  [2, 5, 6]\\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\n  [5, 3, 2, 3, 9, 123, 1]\\n  */\\nconst getPositive = (l) => {\\n\", \"canonical_solution\": \"  return l.filter(e => e > 0);\\n}\\n\\n\", \"test\": \"const testGetPositive = () => {\\n  console.assert(\\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\\n  )\\n  console.assert(\\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\\n  )\\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\\n}\\n\\ntestGetPositive()\\n\", \"declaration\": \"\\nconst getPositive = (l) => {\\n\", \"example_test\": \"const testGetPositive = () => {\\n  console.assert(\\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\\n  )\\n  console.assert(\\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\\n  )\\n}\\ntestGetPositive()\\n\"}\n{\"task_id\": \"JavaScript/31\", \"prompt\": \"/*Return true if a given number is prime, and false otherwise.\\n  >>> isPrime(6)\\n  false\\n  >>> isPrime(101)\\n  true\\n  >>> isPrime(11)\\n  true\\n  >>> isPrime(13441)\\n  true\\n  >>> isPrime(61)\\n  true\\n  >>> isPrime(4)\\n  false\\n  >>> isPrime(1)\\n  false\\n  */\\nconst isPrime = (n) => {\\n\", \"canonical_solution\": \"  if (n < 2)\\n    return false;\\n  for (let k = 2; k < n - 1; k++)\\n    if (n % k == 0)\\n      return false;\\n  return true;\\n}\\n\\n\", \"test\": \"const testIsPrime = () => {\\n  console.assert(isPrime(6) === false)\\n  console.assert(isPrime(101) === true)\\n  console.assert(isPrime(11) === true)\\n  console.assert(isPrime(13441) === true)\\n  console.assert(isPrime(61) === true)\\n  console.assert(isPrime(4) === false)\\n  console.assert(isPrime(1) === false)\\n  console.assert(isPrime(5) === true)\\n  console.assert(isPrime(11) === true)\\n  console.assert(isPrime(17) === true)\\n  console.assert(isPrime(5 * 17) === false)\\n  console.assert(isPrime(11 * 7) === false)\\n  console.assert(isPrime(13441 * 19) === false)\\n}\\n\\ntestIsPrime()\\n\", \"declaration\": \"\\nconst isPrime = (n) => {\\n\", \"example_test\": \"const testIsPrime = () => {\\n  console.assert(isPrime(6) === false)\\n  console.assert(isPrime(101) === true)\\n  console.assert(isPrime(11) === true)\\n  console.assert(isPrime(13441) === true)\\n  console.assert(isPrime(61) === true)\\n  console.assert(isPrime(4) === false)\\n  console.assert(isPrime(1) === false)\\n}\\ntestIsPrime()\\n\"}\n{\"task_id\": \"JavaScript/32\", \"prompt\": \"/*\\n  Evaluates polynomial with coefficients xs at point x.\\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\\n  */\\nconst poly = (xs, x) => {\\n  return xs.reduce((prev, item, index) => {\\n    return prev + item * Math.pow(x, index);\\n  }, 0);\\n}\\n\\n/*\\n  xs are coefficients of a polynomial.\\n  findZero find x such that poly(x) = 0.\\n  findZero returns only only zero point, even if there are many.\\n  Moreover, findZero only takes list xs having even number of coefficients\\n  and largest non zero coefficient as it guarantees\\n  a solution.\\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\\n  -0.5\\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\\n  1.0\\n  */\\nconst findZero = (xs) => {\\n\", \"canonical_solution\": \"  var begin = -1.0, end = 1.0;\\n  while (poly(xs, begin) * poly(xs, end) > 0) {\\n    begin *= 2.0;\\n    end *= 2.0;\\n  }\\n  while (end - begin > 1e-10) {\\n    let center = (begin + end) / 2.0;\\n    if (poly(xs, center) * poly(xs, begin) > 0)\\n      begin = center;\\n    else\\n      end = center;\\n  }\\n  return begin;\\n}\\n\\n\", \"test\": \"const testfindZero = () => {\\n  const getRandomIntInclusive = (min = 0, max = 9) => {\\n    min = Math.ceil(min)\\n    max = Math.floor(max)\\n    return Math.floor(Math.random() * (max - min + 1)) + min\\n  }\\n\\n  for (let i = 0; i < 100; i++) {\\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\\n    let coeffs = [];\\n    for (let j = 0; j < ncoeff; j++) {\\n      let coeff = getRandomIntInclusive(-10, 10);\\n      if (coeff === 0)\\n        coeff = 1;\\n      coeffs.push(coeff);\\n    }\\n    let solution = findZero(coeffs);\\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\\n  }\\n}\\n\", \"declaration\": \"\\nconst poly = (xs, x) => {\\n  return xs.reduce((prev, item, index) => {\\n    return prev + item * Math.pow(x, index);\\n  }, 0);\\n}\\n\\nconst findZero = (xs) => {\\n\", \"example_test\": \"const testPoly = () => {\\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\\n}\\ntestPoly()\\n\"}\n{\"task_id\": \"JavaScript/33\", \"prompt\": \"/*This function takes a list l and returns a list l' such that\\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\\n  to the values of the corresponding indicies of l, but sorted.\\n  >>> sortThird([1, 2, 3])\\n  [1, 2, 3]\\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\\n  [2, 6, 3, 4, 8, 9, 5]\\n  */\\nconst sortThird = (l) => {\\n\", \"canonical_solution\": \"  var three = l.filter((item, index) => index % 3 == 0);\\n  three.sort((a, b) => (a - b));\\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\\n}\\n\\n\", \"test\": \"const testSortThird = () => {\\n  console.assert(\\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\\n  )\\n}\\n\\ntestSortThird()\\n\", \"declaration\": \"\\nconst sortThird = (l) => {\\n\", \"example_test\": \"const testSortThird = () => {\\n  console.assert(\\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\\n  )\\n}\\ntestSortThird()\\n\"}\n{\"task_id\": \"JavaScript/34\", \"prompt\": \"/*Return sorted unique elements in a list\\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\\n  [0, 2, 3, 5, 9, 123]\\n  */\\nconst unique = (l) => {\\n\", \"canonical_solution\": \"  return Array.from(new Set(l)).sort((a, b) => (a - b));\\n}\\n\\n\", \"test\": \"const testUnique = () => {\\n  console.assert(\\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\\n      JSON.stringify([0, 2, 3, 5, 9, 123])\\n  )\\n}\\n\\ntestUnique()\\n\", \"declaration\": \"\\nconst unique = (l) => {\\n\", \"example_test\": \"const testUnique = () => {\\n  console.assert(\\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\\n      JSON.stringify([0, 2, 3, 5, 9, 123])\\n  )\\n}\\ntestUnique()\\n\"}\n{\"task_id\": \"JavaScript/35\", \"prompt\": \"/*Return maximum element in the list.\\n  >>> maxElement([1, 2, 3])\\n  3\\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\n  123\\n  */\\nconst maxElement = (l) => {\\n\", \"canonical_solution\": \"  return Math.max(...l);\\n}\\n\\n\", \"test\": \"const testMaxElement = () => {\\n  console.assert(maxElement([1, 2, 3]) === 3)\\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\\n}\\n\\ntestMaxElement()\\n\", \"declaration\": \"\\nconst maxElement = (l) => {\\n\", \"example_test\": \"const testMaxElement = () => {\\n  console.assert(maxElement([1, 2, 3]) === 3)\\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\\n}\\ntestMaxElement()\\n\"}\n{\"task_id\": \"JavaScript/36\", \"prompt\": \"/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\\n  >>> fizzBuzz(50)\\n  0\\n  >>> fizzBuzz(78)\\n  2\\n  >>> fizzBuzz(79)\\n  3\\n  */\\nconst fizzBuzz = (n) => {\\n\", \"canonical_solution\": \"  var ns = [], ans = 0;\\n  for (let i = 0; i < n; i++)\\n    if (i % 11 == 0 || i % 13 == 0)\\n      ns.push(i);\\n  var s = ns.map(x => x.toString()).join('');\\n  for (const c of s)\\n    ans += (c == '7');\\n  return ans;\\n}\\n\\n\", \"test\": \"const testFizzBuzz = () => {\\n  console.assert(fizzBuzz(50) === 0)\\n  console.assert(fizzBuzz(78) === 2)\\n  console.assert(fizzBuzz(79) === 3)\\n  console.assert(fizzBuzz(100) === 3)\\n  console.assert(fizzBuzz(200) === 6)\\n  console.assert(fizzBuzz(4000) === 192)\\n  console.assert(fizzBuzz(10000) === 639)\\n  console.assert(fizzBuzz(100000) === 8026)\\n}\\n\\ntestFizzBuzz()\\n\", \"declaration\": \"\\nconst fizzBuzz = (n) => {\\n\", \"example_test\": \"const testFizzBuzz = () => {\\n  console.assert(fizzBuzz(50) === 0)\\n  console.assert(fizzBuzz(78) === 2)\\n  console.assert(fizzBuzz(79) === 3)\\n}\\ntestFizzBuzz()\\n\"}\n{\"task_id\": \"JavaScript/37\", \"prompt\": \"/*This function takes a list l and returns a list l' such that\\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\\n  to the values of the even indicies of l, but sorted.\\n  >>> sortEven([1, 2, 3])\\n  [1, 2, 3]\\n  >>> sortEven([5, 6, 3, 4])\\n  [3, 6, 5, 4]\\n  */\\nconst sortEven = (l) => {\\n\", \"canonical_solution\": \"  var even = l.filter((item, index) => index % 2 == 0);\\n  even.sort((a, b) => (a - b));\\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\\n}\\n\\n\", \"test\": \"const testSortEven = () => {\\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\\n    JSON.stringify([1, 2, 3]))\\n  console.assert(JSON.stringify(\\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\\n  console.assert(JSON.stringify(\\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\\n}\\n\\ntestSortEven()\\n\", \"declaration\": \"\\nconst sortEven = (l) => {\\n\", \"example_test\": \"const testSortEven = () => {\\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\\n    JSON.stringify([1, 2, 3]))\\n  console.assert(JSON.stringify(\\n    sortEven([5,6,3,4])) ===\\n    JSON.stringify([3,6,5,4]))\\n}\\ntestSortEven()\\n\"}\n{\"task_id\": \"JavaScript/38\", \"prompt\": \"/*\\n  returns encoded string by cycling groups of three characters.\\n  */\\nconst encodeCyclic = (s) => {\\n  var groups = [], groups2 = [];\\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\\n  }\\n  for (const group of groups) {\\n    if (group.length == 3)\\n      groups2.push(group.slice(1) + group[0]);\\n    else\\n      groups2.push(group);\\n  }\\n  return groups2.join('');\\n}\\n\\n/*\\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\\n  */\\nconst decodeCyclic = (s) => {\\n\", \"canonical_solution\": \"  return encodeCyclic(encodeCyclic(s));\\n}\\n\\n\", \"test\": \"const testDecodeCyclic = () => {\\n  const letters = new Array(26)\\n    .fill(null)\\n    .map((v, i) => String.fromCharCode(97 + i));\\n\\n  for (let i = 0; i < 100; i++) {\\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\\n    let encoded_str = encodeCyclic(str);\\n    console.assert(decodeCyclic(encoded_str) === str);\\n  }\\n}\\n\\ntestDecodeCyclic()\\n\", \"declaration\": \"const encodeCyclic = (s) => {\\n  var groups = [], groups2 = [];\\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\\n  }\\n  for (const group of groups) {\\n    if (group.length == 3)\\n      groups2.push(group.slice(1) + group[0]);\\n    else\\n      groups2.push(group);\\n  }\\n  return groups2.join('');\\n}\\n\\nconst decodeCyclic = (s) => {\\n\", \"example_test\": \"\"}\n{\"task_id\": \"JavaScript/39\", \"prompt\": \"/*\\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\\n  >>> primeFib(1)\\n  2\\n  >>> primeFib(2)\\n  3\\n  >>> primeFib(3)\\n  5\\n  >>> primeFib(4)\\n  13\\n  >>> primeFib(5)\\n  89\\n  */\\nconst primeFib = (n) => {\\n\", \"canonical_solution\": \"  var isPrime = function (p) {\\n    if (p < 2)\\n      return false;\\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\\n      if (p % k == 0)\\n        return false;\\n    }\\n    return true;\\n  }\\n\\n  var f = [0, 1];\\n  while (true) {\\n    f.push(f.at(-1) + f.at(-2));\\n    if (isPrime(f.at(-1)))\\n      n -= 1;\\n    if (n == 0)\\n      return f.at(-1);\\n  }\\n}\\n\\n\", \"test\": \"const testPrimeFib = () => {\\n  console.assert(primeFib(1) === 2)\\n  console.assert(primeFib(2) === 3)\\n  console.assert(primeFib(3) === 5)\\n  console.assert(primeFib(4) === 13)\\n  console.assert(primeFib(5) === 89)\\n  console.assert(primeFib(6) === 233)\\n  console.assert(primeFib(7) === 1597)\\n  console.assert(primeFib(8) === 28657)\\n  console.assert(primeFib(9) === 514229)\\n  console.assert(primeFib(10) === 433494437)\\n}\\n\\ntestPrimeFib()\\n\", \"declaration\": \"\\nconst primeFib = (n) => {\\n\", \"example_test\": \"const testPrimeFib = () => {\\n  console.assert(primeFib(1) === 2)\\n  console.assert(primeFib(2) === 3)\\n  console.assert(primeFib(3) === 5)\\n  console.assert(primeFib(4) === 13)\\n  console.assert(primeFib(5) === 89)\\n}\\ntestPrimeFib()\\n\"}\n{\"task_id\": \"JavaScript/40\", \"prompt\": \"/*\\n  triplesSumToZero takes a list of integers as an input.\\n  it returns true if there are three distinct elements in the list that\\n  sum to zero, and false otherwise.\\n\\n  >>> triplesSumToZero([1, 3, 5, 0])\\n  false\\n  >>> triplesSumToZero([1, 3, -2, 1])\\n  true\\n  >>> triplesSumToZero([1, 2, 3, 7])\\n  false\\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\\n  true\\n  >>> triplesSumToZero([1])\\n  false\\n  */\\nconst triplesSumToZero = (l) => {\\n\", \"canonical_solution\": \"  for (let i = 0; i < l.length; i++)\\n    for (let j = i + 1; j < l.length; j++)\\n      for (let k = j + 1; k < l.length; k++)\\n        if (l[i] + l[j] + l[k] == 0)\\n          return true;\\n  return false;\\n}\\n\\n\", \"test\": \"const testTriplesSumToZero = () => {\\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\\n  console.assert(triplesSumToZero([1]) === false)\\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\\n}\\n\\ntestTriplesSumToZero()\\n\", \"declaration\": \"\\nconst triplesSumToZero = (l) => {\\n\", \"example_test\": \"const testTriplesSumToZero = () => {\\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\\n}\\ntestTriplesSumToZero()\\n\"}\n{\"task_id\": \"JavaScript/41\", \"prompt\": \"/*\\n  Imagine a road that's a perfectly straight infinitely long line.\\n  n cars are driving left to right;  simultaneously, a different set of n cars\\n  are driving right to left.   The two sets of cars start out being very far from\\n  each other.  All cars move in the same speed.  Two cars are said to collide\\n  when a car that's moving left to right hits a car that's moving right to left.\\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\\n  in their trajectory as if they did not collide.\\n\\n  This function outputs the number of such collisions.\\n  */\\nconst carRaceCollision = (n) => {\\n\", \"canonical_solution\": \"  return Math.pow(n, 2);\\n}\\n\\n\", \"test\": \"const testCarRaceCollision = () => {\\n  console.assert(carRaceCollision(2) === 4)\\n  console.assert(carRaceCollision(3) === 9)\\n  console.assert(carRaceCollision(4) === 16)\\n  console.assert(carRaceCollision(8) === 64)\\n  console.assert(carRaceCollision(10) === 100)\\n}\\n\\ntestCarRaceCollision()\\n\", \"declaration\": \"\\nconst carRaceCollision = (n) => {\\n\", \"example_test\": \"\"}\n{\"task_id\": \"JavaScript/42\", \"prompt\": \"/*Return list with elements incremented by 1.\\n  >>> incrList([1, 2, 3])\\n  [2, 3, 4]\\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\\n  */\\nconst incrList = (l) => {\\n\", \"canonical_solution\": \"  return l.map(e => e + 1);\\n}\\n\\n\", \"test\": \"const testIncrList = () => {\\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\\n  )\\n  console.assert(\\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\\n  )\\n}\\n\\ntestIncrList()\\n\", \"declaration\": \"\\nconst incrList = (l) => {\\n\", \"example_test\": \"const testIncrList = () => {\\n  console.assert(\\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\\n  )\\n  console.assert(\\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\\n  )\\n}\\ntestIncrList()\\n\"}\n{\"task_id\": \"JavaScript/43\", \"prompt\": \"/*\\n  pairsSumToZero takes a list of integers as an input.\\n  it returns true if there are two distinct elements in the list that\\n  sum to zero, and false otherwise.\\n  >>> pairsSumToZero([1, 3, 5, 0])\\n  false\\n  >>> pairsSumToZero([1, 3, -2, 1])\\n  false\\n  >>> pairsSumToZero([1, 2, 3, 7])\\n  false\\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\\n  true\\n  >>> pairsSumToZero([1])\\n  false\\n  */\\nconst pairsSumToZero = (l) => {\\n\", \"canonical_solution\": \"  for (let i = 0; i < l.length; i++)\\n    for (let j = i + 1; j < l.length; j++)\\n      if (l[i] + l[j] == 0)\\n        return true;\\n  return false;\\n}\\n\\n\", \"test\": \"const testPairsSumToZero = () => {\\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\\n  console.assert(pairsSumToZero([1]) === false)\\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\\n}\\n\\ntestPairsSumToZero()\\n\", \"declaration\": \"\\nconst pairsSumToZero = (l) => {\\n\", \"example_test\": \"const testPairsSumToZero = () => {\\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\\n}\\ntestPairsSumToZero()\\n\"}\n{\"task_id\": \"JavaScript/44\", \"prompt\": \"/*Change numerical base of input number x to base.\\n  return string representation after the conversion.\\n  base numbers are less than 10.\\n  >>> changeBase(8, 3)\\n  '22'\\n  >>> changeBase(8, 2)\\n  '1000'\\n  >>> changeBase(7, 2)\\n  '111'\\n  */\\nconst changeBase = (x, base) => {\\n\", \"canonical_solution\": \"  var ret = \\\"\\\";\\n  while (x > 0) {\\n    ret = (x % base).toString() + ret;\\n    x = Math.floor(x / base);\\n  }\\n  return ret;\\n}\\n\\n\", \"test\": \"const testChangeBase = () => {\\n  console.assert(changeBase(8, 3) === '22')\\n  console.assert(changeBase(9, 3) === '100')\\n  console.assert(changeBase(234, 2) === '11101010')\\n  console.assert(changeBase(16, 2) === '10000')\\n  console.assert(changeBase(8, 2) === '1000')\\n  console.assert(changeBase(7, 2) === '111')\\n\\n  for (let i = 2; i < 8; i++) {\\n    console.assert(changeBase(i, i + 1) === i.toString())\\n  }\\n}\\n\\ntestChangeBase()\\n\", \"declaration\": \"\\nconst changeBase = (x, base) => {\\n\", \"example_test\": \"const testChangeBase = () => {\\n  console.assert(changeBase(8, 3) === '22')\\n  console.assert(changeBase(8, 2) === '1000')\\n  console.assert(changeBase(7, 2) === '111')\\n}\\ntestChangeBase()\\n\"}\n{\"task_id\": \"JavaScript/45\", \"prompt\": \"/*Given length of a side and high return area for a triangle.\\n  >>> triangleArea(5, 3)\\n  7.5\\n  */\\nconst triangleArea = (a, h) => {\\n\", \"canonical_solution\": \"  return a * h / 2.0;\\n}\\n\\n\", \"test\": \"const testTriangleArea = () => {\\n  console.assert(triangleArea(5, 3) === 7.5)\\n  console.assert(triangleArea(2, 2) === 2.0)\\n  console.assert(triangleArea(10, 8) === 40.0)\\n}\\n\\ntestTriangleArea()\\n\", \"declaration\": \"\\nconst triangleArea = (a, h) => {\\n\", \"example_test\": \"const testTriangleArea = () => {\\n  console.assert(triangleArea(5, 3) === 7.5)\\n}\\ntestTriangleArea()\\n\"}\n{\"task_id\": \"JavaScript/46\", \"prompt\": \"/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\\n  fib4(0) -> 0\\n  fib4(1) -> 0\\n  fib4(2) -> 2\\n  fib4(3) -> 0\\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\\n  >>> fib4(5)\\n  4\\n  >>> fib4(6)\\n  8\\n  >>> fib4(7)\\n  14\\n  */\\nconst fib4 = (n) => {\\n\", \"canonical_solution\": \"  var results = [0, 0, 2, 0];\\n  if (n < 4)\\n    return results[n];\\n  for (let i = 4; i < n + 1; i++) {\\n    results.push(results.at(-1) + results.at(-2) +\\n                results.at(-3) + results.at(-4));\\n    results.shift();\\n  }\\n  return results.pop();\\n}\\n\\n\", \"test\": \"const testFib4 = () => {\\n  console.assert(fib4(5) === 4)\\n  console.assert(fib4(8) === 28)\\n  console.assert(fib4(10) === 104)\\n  console.assert(fib4(12) === 386)\\n}\\n\\ntestFib4()\\n\", \"declaration\": \"\\nconst fib4 = (n) => {\\n\", \"example_test\": \"const testFib4 = () => {\\n  console.assert(fib4(5) === 4)\\n  console.assert(fib4(6) === 8)\\n  console.assert(fib4(7) === 14)\\n}\\ntestFib4()\\n\"}\n{\"task_id\": \"JavaScript/47\", \"prompt\": \"/*Return median of elements in the list l.\\n  >>> median([3, 1, 2, 4, 5])\\n  3\\n  >>> median([-10, 4, 6, 1000, 10, 20])\\n  8.0\\n  */\\nconst median = (l) => {\\n\", \"canonical_solution\": \"  l.sort((a, b) => a - b);\\n  var len = l.length;\\n  if (l.length % 2 == 1)\\n    return l[Math.floor(len / 2)];\\n  else\\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\\n}\\n\\n\", \"test\": \"const testMedian = () => {\\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\\n  console.assert(median([5]) === 5)\\n  console.assert(median([6, 5]) === 5.5)\\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\\n}\\n\\ntestMedian()\\n\", \"declaration\": \"\\nconst median = (l) => {\\n\", \"example_test\": \"const testMedian = () => {\\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\\n}\\ntestMedian()\\n\"}\n{\"task_id\": \"JavaScript/48\", \"prompt\": \"/*\\n  Checks if given string is a palindrome\\n  >>> isPalindrome('')\\n  true\\n  >>> isPalindrome('aba')\\n  true\\n  >>> isPalindrome('aaaaa')\\n  true\\n  >>> isPalindrome('zbcd')\\n  false\\n  */\\nconst isPalindrome = (text) => {\\n\", \"canonical_solution\": \"  for (let i = 0; i < text.length; i++)\\n    if (text[i] != text.at(-i-1))\\n      return false;\\n  return true;\\n}\\n\\n\", \"test\": \"const testIsPalindrome = () => {\\n  console.assert(isPalindrome('') === true)\\n  console.assert(isPalindrome('aba') === true)\\n  console.assert(isPalindrome('aaaaa') === true)\\n  console.assert(isPalindrome('zbcd') === false)\\n  console.assert(isPalindrome('xywyx') === true)\\n  console.assert(isPalindrome('xywyz') === false)\\n  console.assert(isPalindrome('xywzx') === false)\\n}\\n\\ntestIsPalindrome()\\n\", \"declaration\": \"\\nconst isPalindrome = (text) => {\\n\", \"example_test\": \"const testIsPalindrome = () => {\\n  console.assert(isPalindrome('') === true)\\n  console.assert(isPalindrome('aba') === true)\\n  console.assert(isPalindrome('aaaaa') === true)\\n  console.assert(isPalindrome('zbcd') === false)\\n}\\ntestIsPalindrome()\\n\"}\n{\"task_id\": \"JavaScript/49\", \"prompt\": \"/*Return 2^n modulo p (be aware of numerics).\\n  >>> modp(3, 5)\\n  3\\n  >>> modp(1101, 101)\\n  2\\n  >>> modp(0, 101)\\n  1\\n  >>> modp(3, 11)\\n  8\\n  >>> modp(100, 101)\\n  1\\n  */\\nconst modp = (n, p) => {\\n\", \"canonical_solution\": \"  var ret = 1;\\n  for (let i = 0; i < n; i++)\\n    ret = (2 * ret) % p;\\n  return ret;\\n}\\n\\n\", \"test\": \"const testModp = () => {\\n  console.assert(modp(3, 5) === 3)\\n  console.assert(modp(1101, 101) === 2)\\n  console.assert(modp(0, 101) === 1)\\n  console.assert(modp(3, 11) === 8)\\n  console.assert(modp(100, 101) === 1)\\n  console.assert(modp(30, 5) === 4)\\n  console.assert(modp(31, 5) === 3)\\n}\\n\\ntestModp()\\n\", \"declaration\": \"\\nconst modp = (n, p) => {\\n\", \"example_test\": \"const testModp = () => {\\n  console.assert(modp(3, 5) === 3)\\n  console.assert(modp(1101, 101) === 2)\\n  console.assert(modp(0, 101) === 1)\\n  console.assert(modp(3, 11) === 8)\\n  console.assert(modp(100, 101) === 1)\\n}\\ntestModp()\\n\"}\n{\"task_id\": \"JavaScript/50\", \"prompt\": \"/*\\n  returns encoded string by shifting every character by 5 in the alphabet.\\n  */\\nconst encodeShift = (s) => {\\n  return s.split(\\\"\\\").map(ch => String.fromCharCode(\\n    ((ch.charCodeAt(0) + 5 - \\\"a\\\".charCodeAt(0)) % 26) + \\\"a\\\".charCodeAt(0)\\n  )).join(\\\"\\\");\\n}\\n\\n/*\\n  takes as input string encoded with encode_shift function. Returns decoded string.\\n  */\\nconst decodeShift = (s) => {\\n\", \"canonical_solution\": \"  return s.split(\\\"\\\").map(ch => String.fromCharCode(\\n    ((ch.charCodeAt(0) - 5 + 26 - \\\"a\\\".charCodeAt(0)) % 26) + \\\"a\\\".charCodeAt(0)\\n  )).join(\\\"\\\");\\n}\\n\\n\", \"test\": \"const testDecodeShift = () => {\\n    const letters = new Array(26)\\n    .fill(null)\\n    .map((v, i) => String.fromCharCode(97 + i))\\n\\n    for (let i = 0; i < 100; i++) {\\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\\n      let encoded_str = encodeShift(str)\\n      console.assert(decodeShift(encoded_str) === str)\\n    }\\n\\n}\\n\\ntestDecodeShift()\\n\", \"declaration\": \"const encodeShift = (s) => {\\n  return s.split(\\\"\\\").map(ch => String.fromCharCode(\\n    ((ch.charCodeAt(0) + 5 - \\\"a\\\".charCodeAt(0)) % 26) + \\\"a\\\".charCodeAt(0)\\n  )).join(\\\"\\\");\\n}\\n\\nconst decodeShift = (s) => {\\n\", \"example_test\": \"\"}\n{\"task_id\": \"JavaScript/51\", \"prompt\": \"/*\\n  removeVowels is a function that takes string and returns string without vowels.\\n  >>> removeVowels('')\\n  ''\\n  >>> removeVowels(\\\"abcdef\\\\nghijklm\\\")\\n  'bcdf\\\\nghjklm'\\n  >>> removeVowels('abcdef')\\n  'bcdf'\\n  >>> removeVowels('aaaaa')\\n  ''\\n  >>> removeVowels('aaBAA')\\n  'B'\\n  >>> removeVowels('zbcd')\\n  'zbcd'\\n  */\\nconst removeVowels = (text) => {\\n\", \"canonical_solution\": \"  return text.split(\\\"\\\")\\n             .filter(s => ![\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"]\\n                      .includes(s.toLowerCase())\\n                    )\\n             .join(\\\"\\\")\\n}\\n\\n\", \"test\": \"const testRemoveVowels = () => {\\n  console.assert(removeVowels('') === '')\\n  console.assert(removeVowels('abcdef\\\\nghijklm') === 'bcdf\\\\nghjklm')\\n  console.assert(removeVowels('fedcba') === 'fdcb')\\n  console.assert(removeVowels('eeeee') === '')\\n  console.assert(removeVowels('acBAA') === 'cB')\\n  console.assert(removeVowels('EcBOO') === 'cB')\\n  console.assert(removeVowels('ybcd') === 'ybcd')\\n}\\n\\ntestRemoveVowels()\\n\", \"declaration\": \"\\nconst removeVowels = (text) => {\\n\", \"example_test\": \"const testRemoveVowels = () => {\\n  console.assert(removeVowels('') === '')\\n  console.assert(removeVowels('abcdef\\\\nghijklm') === 'bcdf\\\\nghjklm')\\n  console.assert(removeVowels('abcdef') === 'bcdf')\\n  console.assert(removeVowels('aaaaa') === '')\\n  console.assert(removeVowels('aaBAA') === 'B')\\n  console.assert(removeVowels('zbcd') === 'zbcd')\\n}\\ntestRemoveVowels()\\n\"}\n{\"task_id\": \"JavaScript/52\", \"prompt\": \"/*Return true if all numbers in the list l are below threshold t.\\n  >>> belowThreshold([1, 2, 4, 10], 100)\\n  true\\n  >>> belowThreshold([1, 20, 4, 10], 5)\\n  false\\n  */\\nconst belowThreshold = (l, t) => {\\n\", \"canonical_solution\": \"  for (const e of l)\\n    if (e >= t)\\n      return false;\\n  return true;\\n}\\n\\n\", \"test\": \"const testBelowThreshold = () => {\\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\\n}\\n\\ntestBelowThreshold()\\n\", \"declaration\": \"\\nconst belowThreshold = (l, t) => {\\n\", \"example_test\": \"const testBelowThreshold = () => {\\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\\n}\\ntestBelowThreshold()\\n\"}\n{\"task_id\": \"JavaScript/53\", \"prompt\": \"/*Add two numbers x and y\\n  >>> add(2, 3)\\n  5\\n  >>> add(5, 7)\\n  12\\n  */\\nconst add = (x, y) => {\\n\", \"canonical_solution\": \"  return x + y;\\n}\\n\\n\", \"test\": \"const testAdd = () => {\\n  const getRandomIntInclusive = (min = 0, max = 9) => {\\n    min = Math.ceil(min)\\n    max = Math.floor(max)\\n    return Math.floor(Math.random() * (max - min + 1)) + min //\\u542b\\u6700\\u5927\\u503c\\uff0c\\u542b\\u6700\\u5c0f\\u503c\\n  }\\n\\n  console.assert(add(0, 1) === 1)\\n  console.assert(add(1, 0) === 1)\\n  console.assert(add(2, 3) === 5)\\n  console.assert(add(5, 7) === 12)\\n  console.assert(add(7, 5) === 12)\\n\\n  for (let i = 0; i < 100; i++) {\\n    let x = getRandomIntInclusive()\\n    let y = getRandomIntInclusive()\\n    console.assert(x + y === add(x, y))\\n  }\\n}\\n\\ntestAdd()\\n\", \"declaration\": \"\\nconst add = (x, y) => {\\n\", \"example_test\": \"const testAdd = () => {\\n  const getRandomIntInclusive = (min = 0, max = 9) => {\\n    min = Math.ceil(min)\\n    max = Math.floor(max)\\n    return Math.floor(Math.random() * (max - min + 1)) + min //\\u542b\\u6700\\u5927\\u503c\\uff0c\\u542b\\u6700\\u5c0f\\u503c\\n  }\\n  console.assert(add(2, 3) === 5)\\n  console.assert(add(5, 7) === 12)\\n}\\ntestAdd()\\n\"}\n{\"task_id\": \"JavaScript/54\", \"prompt\": \"/*\\n  Check if two words have the same characters.\\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\\n  true\\n  >>> sameChars('abcd', 'dddddddabc')\\n  true\\n  >>> sameChars('dddddddabc', 'abcd')\\n  true\\n  >>> sameChars('eabcd', 'dddddddabc')\\n  false\\n  >>> sameChars('abcd', 'dddddddabce')\\n  false\\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\\n  false\\n  */\\nconst sameChars = (s0, s1) => {\\n\", \"canonical_solution\": \"  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\\n}\\n\\n\", \"test\": \"const testSameChars = () => {\\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\\n  console.assert(sameChars('aabb', 'aaccc') === false)\\n}\\n\\ntestSameChars()\\n\", \"declaration\": \"\\nconst sameChars = (s0, s1) => {\\n\", \"example_test\": \"const testSameChars = () => {\\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\\n}\\ntestSameChars()\\n\"}\n{\"task_id\": \"JavaScript/55\", \"prompt\": \"/*Return n-th Fibonacci number.\\n  >>> fib(10)\\n  55\\n  >>> fib(1)\\n  1\\n  >>> fib(8)\\n  21\\n  */\\nconst fib = (n) => {\\n\", \"canonical_solution\": \"  if (n == 0)\\n    return 0;\\n  if (n == 1)\\n    return 1;\\n  return fib(n - 1) + fib(n - 2);\\n}\\n\\n\", \"test\": \"const testFib = () => {\\n  console.assert(fib(10) === 55)\\n  console.assert(fib(1) === 1)\\n  console.assert(fib(8) === 21)\\n  console.assert(fib(11) === 89)\\n  console.assert(fib(12) === 144)\\n}\\n\\ntestFib()\\n\", \"declaration\": \"\\nconst fib = (n) => {\\n\", \"example_test\": \"const testFib = () => {\\n  console.assert(fib(10) === 55)\\n  console.assert(fib(1) === 1)\\n  console.assert(fib(8) === 21)\\n}\\ntestFib()\\n\"}\n{\"task_id\": \"JavaScript/56\", \"prompt\": \"/* brackets is a string of \\\"<\\\" and \\\">\\\".\\n  return false if every opening bracket has a corresponding closing bracket.\\n\\n  >>> correctBracketing(\\\"<\\\")\\n  false\\n  >>> correctBracketing(\\\"<>\\\")\\n  false\\n  >>> correctBracketing(\\\"<<><>>\\\")\\n  false\\n  >>> correctBracketing(\\\"><<>\\\")\\n  false\\n  */\\nconst correctBracketing = (brackets) => {\\n\", \"canonical_solution\": \"  var depth = 0;\\n  for (const b of brackets) {\\n    if (b == \\\"<\\\")\\n      depth += 1;\\n    else\\n      depth -= 1;\\n    if (depth < 0)\\n      return false;\\n  }\\n  return depth == 0;\\n}\\n\\n\", \"test\": \"const testCorrectBracketing = () => {\\n  console.assert(correctBracketing('<>') === true)\\n  console.assert(correctBracketing('<<><>>') === true)\\n  console.assert(correctBracketing('<><><<><>><>') === true)\\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\\n  console.assert(correctBracketing('<<<><>>>>') === false)\\n  console.assert(correctBracketing('><<>') === false)\\n  console.assert(correctBracketing('<') === false)\\n  console.assert(correctBracketing('<<<<') === false)\\n  console.assert(correctBracketing('>') === false)\\n  console.assert(correctBracketing('<<>') === false)\\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\\n}\\n\\ntestCorrectBracketing()\\n\", \"declaration\": \"\\nconst correctBracketing = (brackets) => {\\n\", \"example_test\": \"const testCorrectBracketing = () => {\\n  console.assert(correctBracketing('<>') === true)\\n  console.assert(correctBracketing('<<><>>') === true)\\n  console.assert(correctBracketing('><<>') === false)\\n  console.assert(correctBracketing('<') === false)\\n}\\ntestCorrectBracketing()\\n\"}\n{\"task_id\": \"JavaScript/57\", \"prompt\": \"/*Return true is list elements are monotonically increasing or decreasing.\\n  >>> monotonic([1, 2, 4, 20])\\n  true\\n  >>> monotonic([1, 20, 4, 10])\\n  false\\n  >>> monotonic([4, 1, 0, -10])\\n  true\\n  */\\nconst monotonic = (l) => {\\n\", \"canonical_solution\": \"  var sort1 = [...l].sort((a, b) => a - b);\\n  var sort2 = [...l].sort((a, b) => b - a);\\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\\n      JSON.stringify(l) === JSON.stringify(sort2))\\n    return true;\\n  return false;\\n}\\n\\n\", \"test\": \"const testMonotonic = () => {\\n  console.assert(monotonic([1, 2, 4, 10]) === true)\\n  console.assert(monotonic([1, 2, 4, 20]) === true)\\n  console.assert(monotonic([1, 20, 4, 10]) === false)\\n  console.assert(monotonic([4, 1, 0, -10]) === true)\\n  console.assert(monotonic([4, 1, 1, 0]) === true)\\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\\n  console.assert(monotonic([9, 9, 9, 9]) === true)\\n}\\n\\ntestMonotonic()\\n\", \"declaration\": \"\\nconst monotonic = (l) => {\\n\", \"example_test\": \"const testMonotonic = () => {\\n  console.assert(monotonic([1, 2, 4, 10]) === true)\\n  console.assert(monotonic([1, 20, 4, 10]) === false)\\n  console.assert(monotonic([4, 1, 0, -10]) === true)\\n}\\ntestMonotonic()\\n\"}\n{\"task_id\": \"JavaScript/58\", \"prompt\": \"/*Return sorted unique common elements for two lists.\\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\\n  [1, 5, 653]\\n  >>> common([5, 3, 2, 8], [3, 2])\\n  [2, 3]\\n\\n  */\\nconst common = (l1, l2) => {\\n\", \"canonical_solution\": \"  var ret = new Set();\\n  for (const e1 of l1)\\n    for (const e2 of l2)\\n      if (e1 == e2)\\n        ret.add(e1);\\n  return [...ret].sort();\\n}\\n\\n\", \"test\": \"const testCommon = () => {\\n  console.assert(\\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\\n     === JSON.stringify([1, 5, 653])\\n  )\\n  console.assert(\\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\\n     === JSON.stringify([2, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\\n      JSON.stringify([2, 3, 4])\\n  )\\n  console.assert(\\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\\n  )\\n}\\n\\ntestCommon()\\n\", \"declaration\": \"\\nconst common = (l1, l2) => {\\n\", \"example_test\": \"const testCommon = () => {\\n  console.assert(\\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\\n     === JSON.stringify([1, 5, 653])\\n  )\\n  console.assert(\\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\\n     === JSON.stringify([2, 3])\\n  )\\n}\\ntestCommon()\\n\"}\n{\"task_id\": \"JavaScript/59\", \"prompt\": \"/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\\n  >>> largestPrimeFactor(13195)\\n  29\\n  >>> largestPrimeFactor(2048)\\n  2\\n  */\\nconst largestPrimeFactor = (n) => {\\n\", \"canonical_solution\": \"  var isPrime = function (k) {\\n    if (k < 2)\\n      return false;\\n    for (let i = 2; i < k - 1; i++)\\n      if (k % i == 0)\\n        return false;\\n    return true;\\n  }\\n\\n  var largest = 1;\\n  for (let j = 2; j < n + 1; j++)\\n    if (n % j == 0 && isPrime(j))\\n      largest = Math.max(largest, j);\\n  return largest;\\n}\\n\\n\", \"test\": \"const testLargestPrimeFactor = () => {\\n  console.assert(largestPrimeFactor(15) === 5)\\n  console.assert(largestPrimeFactor(27) === 3)\\n  console.assert(largestPrimeFactor(63) === 7)\\n  console.assert(largestPrimeFactor(330) === 11)\\n  console.assert(largestPrimeFactor(13195) === 29)\\n}\\n\\ntestLargestPrimeFactor()\\n\", \"declaration\": \"\\nconst largestPrimeFactor = (n) => {\\n\", \"example_test\": \"const testLargestPrimeFactor = () => {\\n  console.assert(largestPrimeFactor(2048) === 2)\\n  console.assert(largestPrimeFactor(13195) === 29)\\n}\\ntestLargestPrimeFactor()\\n\"}\n{\"task_id\": \"JavaScript/60\", \"prompt\": \"/*sumToN is a function that sums numbers from 1 to n.\\n  >>> sumToN(30)\\n  465\\n  >>> sumToN(100)\\n  5050\\n  >>> sumToN(5)\\n  15\\n  >>> sumToN(10)\\n  55\\n  >>> sumToN(1)\\n  1\\n  */\\nconst sumToN = (n) => {\\n\", \"canonical_solution\": \"  return n * (n + 1) / 2;\\n}\\n\\n\", \"test\": \"const testSumToN = () => {\\n  console.assert(sumToN(1) === 1)\\n  console.assert(sumToN(6) === 21)\\n  console.assert(sumToN(11) === 66)\\n  console.assert(sumToN(30) === 465)\\n  console.assert(sumToN(100) === 5050)\\n}\\n\\ntestSumToN()\\n\", \"declaration\": \"\\nconst sumToN = (n) => {\\n\", \"example_test\": \"const testSumToN = () => {\\n  console.assert(sumToN(1) === 1)\\n  console.assert(sumToN(5) === 15)\\n  console.assert(sumToN(10) === 55)\\n  console.assert(sumToN(30) === 465)\\n  console.assert(sumToN(100) === 5050)\\n}\\ntestSumToN()\\n\"}\n{\"task_id\": \"JavaScript/61\", \"prompt\": \"/* brackets is a string of \\\"(\\\" and \\\")\\\".\\n  return true if every opening bracket has a corresponding closing bracket.\\n\\n  >>> correctBracketing(\\\"(\\\")\\n  false\\n  >>> correctBracketing(\\\"()\\\")\\n  true\\n  >>> correctBracketing(\\\"(()())\\\")\\n  true\\n  >>> correctBracketing(\\\")(()\\\")\\n  false\\n  */\\nconst correctBracketing = (brackets) => {\\n\", \"canonical_solution\": \"  var depth = 0;\\n  for (const b of brackets) {\\n    if (b == \\\"(\\\")\\n      depth += 1;\\n    else\\n      depth -= 1;\\n    if (depth < 0)\\n      return false;\\n  }\\n  return depth == 0;\\n}\\n\\n\", \"test\": \"const testCorrectBracketing = () => {\\n  console.assert(correctBracketing('()') === true)\\n  console.assert(correctBracketing('(()())') === true)\\n  console.assert(correctBracketing('()()(()())()') === true)\\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\\n  console.assert(correctBracketing('((()())))') === false)\\n  console.assert(correctBracketing(')(()') === false)\\n  console.assert(correctBracketing('(') === false)\\n  console.assert(correctBracketing('((((') === false)\\n  console.assert(correctBracketing(')') === false)\\n  console.assert(correctBracketing('(()') === false)\\n  console.assert(correctBracketing('()()(()())())(()') === false)\\n  console.assert(correctBracketing('()()(()())()))()') === false)\\n}\\n\\ntestCorrectBracketing()\\n\", \"declaration\": \"\\nconst correctBracketing = (brackets) => {\\n\", \"example_test\": \"const testCorrectBracketing = () => {\\n  console.assert(correctBracketing('()') === true)\\n  console.assert(correctBracketing('(()())') === true)\\n  console.assert(correctBracketing(')(()') === false)\\n  console.assert(correctBracketing('(') === false)\\n}\\ntestCorrectBracketing()\\n\"}\n{\"task_id\": \"JavaScript/62\", \"prompt\": \"/* xs represent coefficients of a polynomial.\\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\\n   Return derivative of this polynomial in the same form.\\n  >>> derivative([3, 1, 2, 4, 5])\\n  [1, 4, 12, 20]\\n  >>> derivative([1, 2, 3])\\n  [2, 6]\\n  */\\nconst derivative = (xs) => {\\n\", \"canonical_solution\": \"  return xs.map((x, i) => x * i).slice(1);\\n}\\n\\n\", \"test\": \"const testDerivative = () => {\\n  console.assert(\\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\\n      JSON.stringify([1, 4, 12, 20])\\n  )\\n  console.assert(\\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\\n  )\\n  console.assert(\\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\\n  )\\n  console.assert(\\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\\n      JSON.stringify([2, 2, 0, 16])\\n  )\\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\\n}\\n\\ntestDerivative()\\n\", \"declaration\": \"\\nconst derivative = (xs) => {\\n\", \"example_test\": \"const testDerivative = () => {\\n  console.assert(\\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\\n      JSON.stringify([1, 4, 12, 20])\\n  )\\n  console.assert(\\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\\n  )\\n}\\ntestDerivative()\\n\"}\n{\"task_id\": \"JavaScript/63\", \"prompt\": \"/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\\n  fibfib(0) == 0\\n  fibfib(1) == 0\\n  fibfib(2) == 1\\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\\n  >>> fibfib(1)\\n  0\\n  >>> fibfib(5)\\n  4\\n  >>> fibfib(8)\\n  24\\n  */\\nconst fibfib = (n) => {\\n\", \"canonical_solution\": \"  if (n == 0 || n == 1)\\n    return 0;\\n  if (n == 2)\\n    return 1;\\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\\n}\\n\\n\", \"test\": \"const testFibfib = () => {\\n  console.assert(fibfib(2) === 1)\\n  console.assert(fibfib(1) === 0)\\n  console.assert(fibfib(5) === 4)\\n  console.assert(fibfib(8) === 24)\\n  console.assert(fibfib(10) === 81)\\n  console.assert(fibfib(12) === 274)\\n  console.assert(fibfib(14) === 927)\\n}\\n\\ntestFibfib()\\n\", \"declaration\": \"\\nconst fibfib = (n) => {\\n\", \"example_test\": \"const testFibfib = () => {\\n  console.assert(fibfib(1) === 0)\\n  console.assert(fibfib(5) === 4)\\n  console.assert(fibfib(8) === 24)\\n}\\ntestFibfib()\\n\"}\n{\"task_id\": \"JavaScript/64\", \"prompt\": \"/*Write a function vowelsCount which takes a string representing\\n  a word as input and returns the number of vowels in the string.\\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\\n  vowel, but only when it is at the end of the given word.\\n\\n  Example:\\n  >>> vowelsCount(\\\"abcde\\\")\\n  2\\n  >>> vowelsCount(\\\"ACEDY\\\")\\n  3\\n  */\\nconst vowelsCount = (s) => {\\n\", \"canonical_solution\": \"  var vowels = \\\"aeiouAEIOU\\\";\\n  var n_vowels = s.split('').reduce((prev, item) => {\\n    return prev + (vowels.includes(item));\\n  }, 0);\\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\\n    n_vowels += 1;\\n  return n_vowels;\\n}\\n\\n\", \"test\": \"const testVowelsCount = () => {\\n  console.assert(vowelsCount('abcde') === 2)\\n  console.assert(vowelsCount('Alone') === 3)\\n  console.assert(vowelsCount('key') === 2)\\n  console.assert(vowelsCount('bye') === 1)\\n  console.assert(vowelsCount('keY') === 2)\\n  console.assert(vowelsCount('bYe') === 1)\\n  console.assert(vowelsCount('ACEDY') === 3)\\n}\\n\\ntestVowelsCount()\\n\", \"declaration\": \"\\nconst vowelsCount = (s) => {\\n\", \"example_test\": \"const testVowelsCount = () => {\\n  console.assert(vowelsCount('abcde') === 2)\\n  console.assert(vowelsCount('ACEDY') === 3)\\n}\\ntestVowelsCount()\\n\"}\n{\"task_id\": \"JavaScript/65\", \"prompt\": \"/*Circular shift the digits of the integer x, shift the digits right by shift\\n  and return the result as a string.\\n  If shift > number of digits, return digits reversed.\\n  >>> circularShift(12, 1)\\n  \\\"21\\\"\\n  >>> circularShift(12, 2)\\n  \\\"12\\\"\\n  */\\nconst circularShift = (x, shift) => {\\n\", \"canonical_solution\": \"  s = x.toString();\\n  if (shift > s.length)\\n    return s.split('').reverse().join('');\\n  else\\n    return s.slice(-shift) + s.slice(0, -shift);\\n}\\n\\n\", \"test\": \"const testCircularShift = () => {\\n  console.assert(circularShift(100, 2) === '001')\\n  console.assert(circularShift(12, 2) === '12')\\n  console.assert(circularShift(97, 8) === '79')\\n  console.assert(circularShift(12, 1) === '21')\\n  console.assert(circularShift(11, 101) === '11')\\n}\\n\\ntestCircularShift()\\n\", \"declaration\": \"\\nconst circularShift = (x, shift) => {\\n\", \"example_test\": \"const testCircularShift = () => {\\n  console.assert(circularShift(12, 2) === '12')\\n  console.assert(circularShift(12, 1) === '21')\\n}\\ntestCircularShift()\\n\"}\n{\"task_id\": \"JavaScript/66\", \"prompt\": \"/*Task\\n  Write a function that takes a string as input and returns the sum of the upper characters only'\\n  ASCII codes.\\n\\n  Examples:\\n      digitSum(\\\"\\\") => 0\\n      digitSum(\\\"abAB\\\") => 131\\n      digitSum(\\\"abcCd\\\") => 67\\n      digitSum(\\\"helloE\\\") => 69\\n      digitSum(\\\"woArBld\\\") => 131\\n      digitSum(\\\"aAaaaXa\\\") => 153\\n  */\\nconst digitSum = (s) => {\\n\", \"canonical_solution\": \"  if (s == '') return 0;\\n  return s.split('').reduce((prev, char) => {\\n    let ord_char = char.charCodeAt(0)\\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\\n  }, 0);\\n}\\n\\n\", \"test\": \"const testDigitSum = () => {\\n  console.assert(digitSum('') === 0)\\n  console.assert(digitSum('abAB') === 131)\\n  console.assert(digitSum('abcCd') === 67)\\n  console.assert(digitSum('helloE') === 69)\\n  console.assert(digitSum('woArBld') === 131)\\n  console.assert(digitSum('aAaaaXa') === 153)\\n  console.assert(digitSum(' How are yOu?') === 151)\\n  console.assert(digitSum('You arE Very Smart') === 327)\\n}\\n\\ntestDigitSum()\\n\", \"declaration\": \"\\nconst digitSum = (s) => {\\n\", \"example_test\": \"const testDigitSum = () => {\\n  console.assert(digitSum('') === 0)\\n  console.assert(digitSum('abAB') === 131)\\n  console.assert(digitSum('abcCd') === 67)\\n  console.assert(digitSum('helloE') === 69)\\n  console.assert(digitSum('woArBld') === 131)\\n  console.assert(digitSum('aAaaaXa') === 153)\\n}\\ntestDigitSum()\\n\"}\n{\"task_id\": \"JavaScript/67\", \"prompt\": \"/*\\n  In this task, you will be given a string that represents a number of apples and oranges\\n  that are distributed in a basket of fruit this basket contains\\n  apples, oranges, and mango fruits. Given the string that represents the total number of\\n  the oranges and apples and an integer that represent the total number of the fruits\\n  in the basket return the number of the mango fruits in the basket.\\n  for examble:\\n  fruitDistribution(\\\"5 apples and 6 oranges\\\", 19) ->19 - 5 - 6 = 8\\n  fruitDistribution(\\\"0 apples and 1 oranges\\\",3) -> 3 - 0 - 1 = 2\\n  fruitDistribution(\\\"2 apples and 3 oranges\\\", 100) -> 100 - 2 - 3 = 95\\n  fruitDistribution(\\\"100 apples and 1 oranges\\\",120) -> 120 - 100 - 1 = 19\\n  */\\nconst fruitDistribution = (s, n) => {\\n\", \"canonical_solution\": \"  var lis = [];\\n  for (const i of s.split(\\\" \\\"))\\n    if (!isNaN(i))\\n      lis.push(Number(i))\\n  return n - lis.reduce(((prev, item) => prev + item), 0);\\n}\\n\\n\", \"test\": \"const testFruitDistribution = () => {\\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\\n}\\n\\ntestFruitDistribution()\\n\", \"declaration\": \"\\nconst fruitDistribution = (s, n) => {\\n\", \"example_test\": \"const testFruitDistribution = () => {\\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\\n}\\ntestFruitDistribution()\\n\"}\n{\"task_id\": \"JavaScript/68\", \"prompt\": \"/*\\n  \\\"Given an array representing a branch of a tree that has non-negative integer nodes\\n  your task is to pluck one of the nodes and return it.\\n  The plucked node should be the node with the smallest even value.\\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\\n\\n  The plucked node should be returned in a list, [ smalest_value, its index ],\\n  If there are no even values or the given array is empty, return [].\\n\\n  Example 1:\\n      Input: [4,2,3]\\n      Output: [2, 1]\\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\\n\\n  Example 2:\\n      Input: [1,2,3]\\n      Output: [2, 1]\\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\\n\\n  Example 3:\\n      Input: []\\n      Output: []\\n\\n  Example 4:\\n      Input: [5, 0, 3, 0, 4, 2]\\n      Output: [0, 1]\\n      Explanation: 0 is the smallest value, but  there are two zeros,\\n                   so we will choose the first zero, which has the smallest index.\\n\\n  Constraints:\\n      * 1 <= nodes.length <= 10000\\n      * 0 <= node.value\\n  */\\nconst pluck = (arr) => {\\n\", \"canonical_solution\": \"  if (arr.length == 0) return [];\\n  var evens = arr.filter(x => x % 2 == 0);\\n  if (evens.length == 0) return [];\\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\\n}\\n\\n\", \"test\": \"const testPluck = () => {\\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\\n  )\\n  console.assert(\\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\\n  )\\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\\n}\\n\\ntestPluck()\\n\", \"declaration\": \"\\nconst pluck = (arr) => {\\n\", \"example_test\": \"const testPluck = () => {\\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\\n  )\\n}\\ntestPluck()\\n\"}\n{\"task_id\": \"JavaScript/69\", \"prompt\": \"/*\\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\\n  zero, and has a frequency greater than or equal to the value of the integer itself.\\n  The frequency of an integer is the number of times it appears in the list.\\n  If no such a value exist, return -1.\\n  Examples:\\n      search([4, 1, 2, 2, 3, 1])) == 2\\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\\n      search([5, 5, 4, 4, 4])) == -1\\n  */\\nconst search = (lst) => {\\n\", \"canonical_solution\": \"  var frq = new Array(Math.max(...lst) + 1).fill(0);\\n  for (const i of lst)\\n    frq[i] += 1;\\n  var ans = -1;\\n  for (let i = 1; i < frq.length; i++)\\n    if (frq[i] >= i)\\n      ans = i;\\n  return ans;\\n}\\n\\n\", \"test\": \"const testSearch = () => {\\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\\n  console.assert(search([3, 3]) === -1)\\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\\n  console.assert(\\n    search([\\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\\n    ]) === 1\\n  )\\n  console.assert(search([3, 2, 8, 2]) === 2)\\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\\n  console.assert(\\n    search([\\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\\n      7, 9,\\n    ]) === 1\\n  )\\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\\n  console.assert(\\n    search([\\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\\n      10,\\n    ]) === 5\\n  )\\n  console.assert(search([1]) === 1)\\n  console.assert(\\n    search([\\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\\n    ]) === 4\\n  )\\n  console.assert(\\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\\n  )\\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\\n  console.assert(\\n    search([\\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\\n      10, 2, 8, 10, 9, 4,\\n    ]) === 4\\n  )\\n  console.assert(\\n    search([\\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\\n    ]) === 4\\n  )\\n  console.assert(\\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\\n  )\\n  console.assert(\\n    search([\\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\\n    ]) === -1\\n  )\\n  console.assert(search([10]) === -1)\\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\\n  console.assert(\\n    search([\\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\\n    ]) === 1\\n  )\\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\\n}\\n\\ntestSearch()\\n\", \"declaration\": \"\\nconst search = (lst) => {\\n\", \"example_test\": \"const testSearch = () => {\\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\\n}\\ntestSearch()\\n\"}\n{\"task_id\": \"JavaScript/70\", \"prompt\": \"/*\\n  Given list of integers, return list in strange order.\\n  Strange sorting, is when you start with the minimum value,\\n  then maximum of the remaining integers, then minimum and so on.\\n\\n  Examples:\\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  strangeSortList([]) == []\\n  */\\nconst strangeSortList = (lst) => {\\n\", \"canonical_solution\": \"  var res = [], sw = true;\\n  while (lst.length) {\\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\\n    lst.splice(lst.indexOf(res.at(-1)), 1);\\n    sw = !sw;\\n  }\\n  return res;\\n}\\n\\n\", \"test\": \"const testStrangeSortList = () => {\\n  console.assert(\\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\\n      JSON.stringify([1, 4, 2, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\\n      JSON.stringify([5, 9, 6, 8, 7])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\\n      JSON.stringify([1, 5, 2, 4, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\\n      JSON.stringify([1, 9, 5, 8, 6, 7])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\\n      JSON.stringify([5, 5, 5, 5])\\n  )\\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\\n  )\\n}\\n\\ntestStrangeSortList()\\n\", \"declaration\": \"\\nconst strangeSortList = (lst) => {\\n\", \"example_test\": \"const testStrangeSortList = () => {\\n  console.assert(\\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\\n      JSON.stringify([1, 4, 2, 3])\\n  )\\n  console.assert(\\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\\n      JSON.stringify([5, 5, 5, 5])\\n  )\\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\\n}\\ntestStrangeSortList()\\n\"}\n{\"task_id\": \"JavaScript/71\", \"prompt\": \"/*\\n  Given the lengths of the three sides of a triangle. Return the area of\\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\\n  Otherwise return -1\\n  Three sides make a valid triangle when the sum of any two sides is greater\\n  than the third side.\\n  Example:\\n  triangleArea(3, 4, 5) == 6.00\\n  triangleArea(1, 2, 10) == -1\\n  */\\nconst triangleArea = (a, b, c) => {\\n\", \"canonical_solution\": \"  if (a + b <= c || a + c <= b || b + c <= a)\\n    return -1;\\n  var s = (a + b + c) / 2;\\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\\n  area = area.toFixed(2);\\n  return area;\\n}\\n\\n\", \"test\": \"const testTriangleArea = () => {\\n  console.assert(triangleArea(3, 4, 5) == 6.0)\\n  console.assert(triangleArea(1, 2, 10) == -1)\\n  console.assert(triangleArea(4, 8, 5) == 8.18)\\n  console.assert(triangleArea(2, 2, 2) == 1.73)\\n  console.assert(triangleArea(1, 2, 3) == -1)\\n  console.assert(triangleArea(10, 5, 7) == 16.25)\\n  console.assert(triangleArea(2, 6, 3) == -1)\\n  console.assert(triangleArea(1, 1, 1) == 0.43)\\n  console.assert(triangleArea(2, 2, 10) == -1)\\n}\\n\\ntestTriangleArea()\\n\", \"declaration\": \"\\nconst triangleArea = (a, b, c) => {\\n\", \"example_test\": \"const testTriangleArea = () => {\\n  console.assert(triangleArea(3, 4, 5) == 6.0)\\n  console.assert(triangleArea(1, 2, 10) == -1)\\n}\\ntestTriangleArea()\\n\"}\n{\"task_id\": \"JavaScript/72\", \"prompt\": \"/*\\n  Write a function that returns true if the object q will fly, and false otherwise.\\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\\n\\n  Example:\\n  willItFly([1, 2], 5) \\u279e false\\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\\n\\n  willItFly([3, 2, 3], 1) \\u279e false\\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\\n\\n  willItFly([3, 2, 3], 9) \\u279e true\\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\\n\\n  willItFly([3], 5) \\u279e true\\n  # 3 is less than the maximum possible weight, and it's balanced.\\n  */\\nconst willItFly = (q, w) => {\\n\", \"canonical_solution\": \"  if (q.reduce(((prev, item) => prev + item), 0) > w)\\n    return false;\\n  var i = 0, j = q.length - 1;\\n  while (i < j) {\\n    if (q[i] != q[j])\\n      return false;\\n    i++;\\n    j--;\\n  }\\n  return true;\\n}\\n\\n\", \"test\": \"const testWillItFly = () => {\\n  console.assert(willItFly([3, 2, 3], 9) === true)\\n  console.assert(willItFly([1, 2], 5) === false)\\n  console.assert(willItFly([3], 5) === true)\\n  console.assert(willItFly([3, 2, 3], 1) === false)\\n  console.assert(willItFly([1, 2, 3], 6) === false)\\n  console.assert(willItFly([5], 5) === true)\\n}\\n\\ntestWillItFly()\\n\", \"declaration\": \"\\nconst willItFly = (q, w) => {\\n\", \"example_test\": \"const testWillItFly = () => {\\n  console.assert(willItFly([3, 2, 3], 9) === true)\\n  console.assert(willItFly([1, 2], 5) === false)\\n  console.assert(willItFly([3], 5) === true)\\n  console.assert(willItFly([3, 2, 3], 1) === false)\\n}\\ntestWillItFly()\\n\"}\n{\"task_id\": \"JavaScript/73\", \"prompt\": \"/*\\n  Given an array arr of integers, find the minimum number of elements that\\n  need to be changed to make the array palindromic. A palindromic array is an array that\\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\\n\\n  For example:\\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\\n  smallestChange([1, 2, 3, 2, 1]) == 0\\n  */\\nconst smallestChange = (arr) => {\\n\", \"canonical_solution\": \"  var ans = 0;\\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\\n    if (arr[i] != arr.at(-i - 1))\\n      ans++;\\n  return ans;\\n}\\n\\n\", \"test\": \"const testSmallestChange = () => {\\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\\n  console.assert(smallestChange([1, 4, 2]) === 1)\\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\\n  console.assert(smallestChange([1]) === 0)\\n  console.assert(smallestChange([0, 1]) === 1)\\n}\\n\\ntestSmallestChange()\\n\", \"declaration\": \"\\nconst smallestChange = (arr) => {\\n\", \"example_test\": \"const testSmallestChange = () => {\\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\\n}\\ntestSmallestChange()\\n\"}\n{\"task_id\": \"JavaScript/74\", \"prompt\": \"/*\\n  Write a function that accepts two lists of strings and returns the list that has\\n  total number of chars in the all strings of the list less than the other list.\\n\\n  if the two lists have the same number of chars, return the first list.\\n\\n  Examples\\n  totalMatch([], []) \\u279e []\\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \\u279e ['hI', 'Hi']\\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \\u279e ['hi', 'admin']\\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \\u279e ['hI', 'hi', 'hi']\\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \\u279e ['4']\\n  */\\nconst totalMatch = (lst1, lst2) => {\\n\", \"canonical_solution\": \"  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\\n  if (l1 <= l2)\\n    return lst1;\\n  else\\n    return lst2;\\n}\\n\\n\", \"test\": \"const testTotalMatch = () => {\\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\\n      JSON.stringify(['hi', 'hi'])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\n    ) === JSON.stringify(['hi', 'admin'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\\n      JSON.stringify(['4'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\\n      JSON.stringify(['hI', 'Hi'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\\n      JSON.stringify(['hI', 'hi', 'hi'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\\n      JSON.stringify(['hi', 'admin'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\\n  )\\n}\\n\\ntestTotalMatch()\\n\", \"declaration\": \"\\nconst totalMatch = (lst1, lst2) => {\\n\", \"example_test\": \"const testTotalMatch = () => {\\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(\\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\n    ) === JSON.stringify(['hi', 'admin'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\\n      JSON.stringify(['4'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\\n      JSON.stringify(['hI', 'Hi'])\\n  )\\n  console.assert(\\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\\n      JSON.stringify(['hI', 'hi', 'hi'])\\n  )\\n}\\ntestTotalMatch()\\n\"}\n{\"task_id\": \"JavaScript/75\", \"prompt\": \"/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\\n  and false otherwise.\\n  Knowing that (a) is less then 100.\\n  Example:\\n  isMultiplyPrime(30) == true\\n  30 = 2 * 3 * 5\\n  */\\nconst isMultiplyPrime = (a) => {\\n\", \"canonical_solution\": \"  var isPrime = function (n) {\\n    for (let j = 2; j < n; j++)\\n      if (n % j == 0)\\n        return false;\\n    return true;\\n  }\\n\\n  for (let i = 2; i < 101; i++) {\\n    if (!isPrime(i)) continue;\\n    for (let j = 2; j < 101; j++) {\\n      if (!isPrime(j)) continue;\\n      for (let k = 2; k < 101; k++) {\\n        if (!isPrime(k)) continue;\\n        if (i*j*k == a)\\n          return true;\\n      }\\n    }\\n  }\\n  return false;\\n}\\n\\n\", \"test\": \"const testIsMultiplyPrime = () => {\\n  console.assert(isMultiplyPrime(5) === false)\\n  console.assert(isMultiplyPrime(30) === true)\\n  console.assert(isMultiplyPrime(8) === true)\\n  console.assert(isMultiplyPrime(10) === false)\\n  console.assert(isMultiplyPrime(125) === true)\\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\\n}\\n\\ntestIsMultiplyPrime()\\n\", \"declaration\": \"\\nconst isMultiplyPrime = (a) => {\\n\", \"example_test\": \"const testIsMultiplyPrime = () => {\\n  console.assert(isMultiplyPrime(30) === true)\\n}\\ntestIsMultiplyPrime()\\n\"}\n{\"task_id\": \"JavaScript/76\", \"prompt\": \"/*Your task is to write a function that returns true if a number x is a simple\\n  power of n and false in other cases.\\n  x is a simple power of n if n**int=x\\n  For example:\\n  isSimplePower(1, 4) => true\\n  isSimplePower(2, 2) => true\\n  isSimplePower(8, 2) => true\\n  isSimplePower(3, 2) => false\\n  isSimplePower(3, 1) => false\\n  isSimplePower(5, 3) => false\\n  */\\nconst isSimplePower = (x, n) => {\\n\", \"canonical_solution\": \"  if (n == 1)\\n    return (x == 1);\\n  var power = 1;\\n  while (power < x)\\n    power = power * n;\\n  return (power == x);\\n}\\n\\n\", \"test\": \"const testIsSimplePower = () => {\\n  console.assert(isSimplePower(1, 4) === true)\\n  console.assert(isSimplePower(2, 2) === true)\\n  console.assert(isSimplePower(8, 2) === true)\\n  console.assert(isSimplePower(3, 2) === false)\\n  console.assert(isSimplePower(3, 1) === false)\\n  console.assert(isSimplePower(5, 3) === false)\\n  console.assert(isSimplePower(16, 2) === true)\\n  console.assert(isSimplePower(143214, 16) === false)\\n  console.assert(isSimplePower(4, 2) === true)\\n  console.assert(isSimplePower(9, 3) === true)\\n  console.assert(isSimplePower(16, 4) === true)\\n  console.assert(isSimplePower(24, 2) === false)\\n  console.assert(isSimplePower(128, 4) === false)\\n  console.assert(isSimplePower(12, 6) === false)\\n  console.assert(isSimplePower(1, 1) === true)\\n  console.assert(isSimplePower(1, 12) === true)\\n}\\n\\ntestIsSimplePower()\\n\", \"declaration\": \"\\nconst isSimplePower = (x, n) => {\\n\", \"example_test\": \"const testIsSimplePower = () => {\\n  console.assert(isSimplePower(1, 4) === true)\\n  console.assert(isSimplePower(2, 2) === true)\\n  console.assert(isSimplePower(8, 2) === true)\\n  console.assert(isSimplePower(3, 2) === false)\\n  console.assert(isSimplePower(3, 1) === false)\\n  console.assert(isSimplePower(5, 3) === false)\\n}\\ntestIsSimplePower()\\n\"}\n{\"task_id\": \"JavaScript/77\", \"prompt\": \"/*\\n  Write a function that takes an integer a and returns true\\n  if this ingeger is a cube of some integer number.\\n  Note: you may assume the input is always valid.\\n  Examples:\\n  iscube(1) ==> true\\n  iscube(2) ==> false\\n  iscube(-1) ==> true\\n  iscube(64) ==> true\\n  iscube(0) ==> true\\n  iscube(180) ==> false\\n  */\\nconst iscube = (a) => {\\n\", \"canonical_solution\": \"  a = Math.abs(a);\\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\\n}\\n\\n\", \"test\": \"const testIscube = () => {\\n  console.assert(true === iscube(1))\\n  console.assert(false === iscube(2))\\n  console.assert(true === iscube(-1))\\n  console.assert(true === iscube(64))\\n  console.assert(false === iscube(180))\\n  console.assert(true === iscube(1000))\\n  console.assert(true === iscube(0))\\n  console.assert(false === iscube(1729))\\n}\\n\\ntestIscube()\\n\", \"declaration\": \"\\nconst iscube = (a) => {\\n\", \"example_test\": \"const testIscube = () => {\\n  console.assert(true === iscube(1))\\n  console.assert(false === iscube(2))\\n  console.assert(true === iscube(-1))\\n  console.assert(true === iscube(64))\\n  console.assert(false === iscube(180))\\n  console.assert(true === iscube(0))\\n}\\ntestIscube()\\n\"}\n{\"task_id\": \"JavaScript/78\", \"prompt\": \"/*You have been tasked to write a function that receives\\n  a hexadecimal number as a string and counts the number of hexadecimal\\n  digits that are primes (prime number=== or a prime=== is a natural number\\n  greater than 1 that is not a product of two smaller natural numbers).\\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\\n  B (=decimal 11)=== D (=decimal 13).\\n  Note: you may assume the input is always correct or empty string===\\n  and symbols A===B===C===D===E===F are always uppercase.\\n  Examples:\\n  For num = \\\"AB\\\" the output should be 1.\\n  For num = \\\"1077E\\\" the output should be 2.\\n  For num = \\\"ABED1A33\\\" the output should be 4.\\n  For num = \\\"123456789ABCDEF0\\\" the output should be 6.\\n  For num = \\\"2020\\\" the output should be 2.\\n  */\\nconst hexKey = (num) => {\\n\", \"canonical_solution\": \"  var primes = \\\"2357BD\\\",\\n      total = 0;\\n  for (let i = 0; i < num.length; i++)\\n    if (primes.includes(num[i]))\\n      total++;\\n  return total;\\n}\\n\\n\", \"test\": \"const testHexKey = () => {\\n  console.assert(1 === hexKey('AB'))\\n  console.assert(2 === hexKey('1077E'))\\n  console.assert(4 === hexKey('ABED1A33'))\\n  console.assert(2 === hexKey('2020'))\\n  console.assert(6 === hexKey('123456789ABCDEF0'))\\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\\n  console.assert(0 === hexKey(''))\\n}\\n\\ntestHexKey()\\n\", \"declaration\": \"\\nconst hexKey = (num) => {\\n\", \"example_test\": \"const testHexKey = () => {\\n  console.assert(1 === hexKey('AB'))\\n  console.assert(2 === hexKey('1077E'))\\n  console.assert(4 === hexKey('ABED1A33'))\\n  console.assert(2 === hexKey('2020'))\\n  console.assert(6 === hexKey('123456789ABCDEF0'))\\n}\\ntestHexKey()\\n\"}\n{\"task_id\": \"JavaScript/79\", \"prompt\": \"/*You will be given a number in decimal form and your task is to convert it to\\n  binary format. The function should return a string, with each character representing a binary\\n  number. Each character in the string will be '0' or '1'.\\n\\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\\n  The extra characters are there to help with the format.\\n\\n  Examples:\\n  decimalToBinary(15)   # returns \\\"db1111db\\\"\\n  decimalToBinary(32)   # returns \\\"db100000db\\\"\\n  */\\nconst decimalToBinary = (decimal) => {\\n\", \"canonical_solution\": \"  return \\\"db\\\" + decimal.toString(2) + \\\"db\\\";\\n}\\n\\n\", \"test\": \"const testDecimalToBinary = () => {\\n  console.assert(decimalToBinary(0) === 'db0db')\\n  console.assert(decimalToBinary(32) === 'db100000db')\\n  console.assert(decimalToBinary(103) === 'db1100111db')\\n  console.assert(decimalToBinary(15) === 'db1111db')\\n}\\n\\ntestDecimalToBinary()\\n\", \"declaration\": \"\\nconst decimalToBinary = (decimal) => {\\n\", \"example_test\": \"const testDecimalToBinary = () => {\\n  console.assert(decimalToBinary(32) === 'db100000db')\\n  console.assert(decimalToBinary(15) === 'db1111db')\\n}\\ntestDecimalToBinary()\\n\"}\n{\"task_id\": \"JavaScript/80\", \"prompt\": \"/*You are given a string s.\\n  Your task is to check if the string is happy or not.\\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\\n  For example:\\n  isHappy(a) => false\\n  isHappy(aa) => false\\n  isHappy(abcd) => true\\n  isHappy(aabb) => false\\n  isHappy(adb) => true\\n  isHappy(xyy) => false\\n  */\\nconst isHappy = (s) => {\\n\", \"canonical_solution\": \"  if (s.length < 3)\\n    return false;\\n  for (let i = 0; i < s.length - 2; i++)\\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\\n      return false;\\n  return true;\\n}\\n\\n\", \"test\": \"const testIsHappy = () => {\\n  console.assert(isHappy('a') === false)\\n  console.assert(isHappy('aa') === false)\\n  console.assert(isHappy('abcd') === true)\\n  console.assert(isHappy('aabb') === false)\\n  console.assert(isHappy('adb') === true)\\n  console.assert(isHappy('xyy') === false)\\n  console.assert(isHappy('iopaxpoi') === true)\\n  console.assert(isHappy('iopaxioi') === false)\\n}\\n\\ntestIsHappy()\\n\", \"declaration\": \"\\nconst isHappy = (s) => {\\n\", \"example_test\": \"const testIsHappy = () => {\\n  console.assert(isHappy('a') === false)\\n  console.assert(isHappy('aa') === false)\\n  console.assert(isHappy('abcd') === true)\\n  console.assert(isHappy('aabb') === false)\\n  console.assert(isHappy('adb') === true)\\n  console.assert(isHappy('xyy') === false)\\n}\\ntestIsHappy()\\n\"}\n{\"task_id\": \"JavaScript/81\", \"prompt\": \"/*It is the last week of the semester and the teacher has to give the grades\\n  to students. The teacher has been making her own algorithm for grading.\\n  The only problem is, she has lost the code she used for grading.\\n  She has given you a list of GPAs for some students and you have to write\\n  a function that can output a list of letter grades using the following table:\\n           GPA       |    Letter grade\\n            4.0                A+\\n          > 3.7                A\\n          > 3.3                A-\\n          > 3.0                B+\\n          > 2.7                B\\n          > 2.3                B-\\n          > 2.0                C+\\n          > 1.7                C\\n          > 1.3                C-\\n          > 1.0                D+\\n          > 0.7                D\\n          > 0.0                D-\\n            0.0                E\\n\\n\\n  Example:\\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\\n  */\\nconst numericalLetterGrade = (grades) => {\\n\", \"canonical_solution\": \"  let letter_grade = []\\n  for (let i = 0, len = grades.length; i < len; i++) {\\n    let gpa = grades[i]\\n    if (gpa == 4.0) {\\n      letter_grade.push('A+')\\n    } else if (gpa > 3.7) {\\n      letter_grade.push('A')\\n    } else if (gpa > 3.3) {\\n      letter_grade.push('A-')\\n    } else if (gpa > 3.0) {\\n      letter_grade.push('B+')\\n    } else if (gpa > 2.7) {\\n      letter_grade.push('B')\\n    } else if (gpa > 2.3) {\\n      letter_grade.push('B-')\\n    } else if (gpa > 2.0) {\\n      letter_grade.push('C+')\\n    } else if (gpa > 1.7) {\\n      letter_grade.push('C')\\n    } else if (gpa > 1.3) {\\n      letter_grade.push('C-')\\n    } else if (gpa > 1.0) {\\n      letter_grade.push('D+')\\n    } else if (gpa > 0.7) {\\n      letter_grade.push('D')\\n    } else if (gpa > 0.0) {\\n      letter_grade.push('D-')\\n    } else {\\n      letter_grade.push('E')\\n    }\\n  }\\n  return letter_grade\\n}\\n\\n\", \"test\": \"const testNumericalLetterGrade = () => {\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\\n  )\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\\n  )\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\\n  )\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\\n  )\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\\n  )\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\\n    JSON.stringify(['E', 'D-'])\\n  )\\n}\\n\\ntestNumericalLetterGrade()\\n\", \"declaration\": \"\\nconst numericalLetterGrade = (grades) => {\\n\", \"example_test\": \"const testNumericalLetterGrade = () => {\\n  console.assert(\\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\\n  )\\n}\\ntestNumericalLetterGrade()\\n\"}\n{\"task_id\": \"JavaScript/82\", \"prompt\": \"/*Write a function that takes a string and returns true if the string\\n  length is a prime number or false otherwise\\n  Examples\\n  primeLength('Hello') == true\\n  primeLength('abcdcba') == true\\n  primeLength('kittens') == true\\n  primeLength('orange') == false\\n  */\\nconst primeLength = (string) => {\\n\", \"canonical_solution\": \"  let len = string.length\\n  if (len == 1 || len == 0) { return false }\\n  for (let i = 2; i * i <= len; i++) {\\n    if (len % i == 0) { return false }\\n  }\\n  return true\\n}\\n\\n\", \"test\": \"const testPrimeLength = () => {\\n  console.assert(primeLength('Hello') === true)\\n  console.assert(primeLength('abcdcba') === true)\\n  console.assert(primeLength('kittens') === true)\\n  console.assert(primeLength('orange') === false)\\n  console.assert(primeLength('wow') === true)\\n  console.assert(primeLength('world') === true)\\n  console.assert(primeLength('MadaM') === true)\\n  console.assert(primeLength('Wow') === true)\\n  console.assert(primeLength('') === false)\\n  console.assert(primeLength('HI') === true)\\n  console.assert(primeLength('go') === true)\\n  console.assert(primeLength('gogo') === false)\\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\\n  console.assert(primeLength('Madam') === true)\\n  console.assert(primeLength('M') === false)\\n  console.assert(primeLength('0') === false)\\n}\\n\\ntestPrimeLength()\\n\", \"declaration\": \"\\nconst primeLength = (string) => {\\n\", \"example_test\": \"const testPrimeLength = () => {\\n  console.assert(primeLength('Hello') === true)\\n  console.assert(primeLength('abcdcba') === true)\\n  console.assert(primeLength('kittens') === true)\\n  console.assert(primeLength('orange') === false)\\n}\\ntestPrimeLength()\\n\"}\n{\"task_id\": \"JavaScript/83\", \"prompt\": \"/*\\n  Given a positive integer n, return the count of the numbers of n-digit\\n  positive integers that start or end with 1.\\n  */\\nconst startsOneEnds = (n) => {\\n\", \"canonical_solution\": \"  if (n == 1) { return 1 }\\n  let t = 18\\n  for (let i = 2; i < n; i++) {\\n    t = t * 10\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testStartsOneEnds = () => {\\n  console.assert(startsOneEnds(1) === 1)\\n  console.assert(startsOneEnds(2) === 18)\\n  console.assert(startsOneEnds(3) === 180)\\n  console.assert(startsOneEnds(4) === 1800)\\n  console.assert(startsOneEnds(5) === 18000)\\n}\\n\\ntestStartsOneEnds()\\n\", \"declaration\": \"\\nconst startsOneEnds = (n) => {\\n\", \"example_test\": \"\"}\n{\"task_id\": \"JavaScript/84\", \"prompt\": \"/*Given a positive integer N, return the total sum of its digits in binary.\\n  \\n  Example\\n      For N = 1000, the sum of digits will be 1 the output should be \\\"1\\\".\\n      For N = 150, the sum of digits will be 6 the output should be \\\"110\\\".\\n      For N = 147, the sum of digits will be 12 the output should be \\\"1100\\\".\\n  \\n  Variables:\\n      @N integer\\n           Constraints: 0 \\u2264 N \\u2264 10000.\\n  Output:\\n       a string of binary number\\n  */\\nconst solve = (N) => {\\n\", \"canonical_solution\": \"  let t = 0\\n  while (N > 0) {\\n    t += N % 10\\n    N = (N - N % 10) / 10\\n  }\\n  return t.toString(2)\\n}\\n\\n\", \"test\": \"const testSolve = () => {\\n  console.assert(solve(1000) === '1')\\n  console.assert(solve(150) === '110')\\n  console.assert(solve(147) === '1100')\\n  console.assert(solve(333) === '1001')\\n  console.assert(solve(963) === '10010')\\n}\\n\\ntestSolve()\\n\", \"declaration\": \"\\nconst solve = (N) => {\\n\", \"example_test\": \"\"}\n{\"task_id\": \"JavaScript/85\", \"prompt\": \"/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\\n\\n\\n  Examples:\\n      add([4, 2, 6, 7]) ==> 2 \\n  */\\nconst add = (lst) => {\\n\", \"canonical_solution\": \"  let t = 0\\n  for (let i = 1; i < lst.length; i += 2) {\\n    if (lst[i] % 2 == 0) {\\n      t += lst[i]\\n    }\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testAdd = () => {\\n  console.assert(add([4, 88]) === 88)\\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\\n  console.assert(add([4, 0, 6, 7]) === 0)\\n  console.assert(add([4, 4, 6, 8]) === 12)\\n}\\n\\ntestAdd()\\n\", \"declaration\": \"\\nconst add = (lst) => {\\n\", \"example_test\": \"const testAdd = () => {\\n  console.assert(add([4, 2, 6, 7]) === 2)\\n}\\ntestAdd()\\n\"}\n{\"task_id\": \"JavaScript/86\", \"prompt\": \"/*\\n  Write a function that takes a string and returns an ordered version of it.\\n  Ordered version of string, is a string where all words (separated by space)\\n  are replaced by a new word where all the characters arranged in\\n  ascending order based on ascii value.\\n  Note: You should keep the order of words and blank spaces in the sentence.\\n\\n  For example:\\n  antiShuffle('Hi') returns 'Hi'\\n  antiShuffle('hello') returns 'ehllo'\\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\\n  */\\nconst antiShuffle = (s) => {\\n\", \"canonical_solution\": \"  let arr = s.split(/\\\\s/)\\n  for (let i = 0; i < arr.length; i++) {\\n    for (let j = 0; j < arr[i].length; j++) {\\n      let ind = j\\n      for (let k = j + 1; k < arr[i].length; k++) {\\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\\n          ind = k\\n        }\\n      }\\n      if (ind > j) {\\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\\n      }\\n    }\\n  }\\n  let t = ''\\n  for (let i = 0; i < arr.length; i++) {\\n    if (i > 0) {\\n      t = t + ' '\\n    }\\n    t = t + arr[i]\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testAntiShuffle = () => {\\n  console.assert(antiShuffle('Hi') === 'Hi')\\n  console.assert(antiShuffle('hello') === 'ehllo')\\n  console.assert(antiShuffle('number') === 'bemnru')\\n  console.assert(antiShuffle('abcd') === 'abcd')\\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\\n  console.assert(antiShuffle('') === '')\\n  console.assert(\\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\\n  )\\n}\\n\\ntestAntiShuffle()\\n\", \"declaration\": \"\\nconst antiShuffle = (s) => {\\n\", \"example_test\": \"const testAntiShuffle = () => {\\n  console.assert(antiShuffle('Hi') === 'Hi')\\n  console.assert(antiShuffle('hello') === 'ehllo')\\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\\n}\\ntestAntiShuffle()\\n\"}\n{\"task_id\": \"JavaScript/87\", \"prompt\": \"/*\\n  You are given a 2 dimensional data, as a nested lists,\\n  which is similar to matrix, however, unlike matrices,\\n  each row may contain a different number of columns.\\n  Given lst, and integer x, find integers x in the list,\\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\\n  each tuple is a coordinate - (row, columns), starting with 0.\\n  Sort coordinates initially by rows in ascending order.\\n  Also, sort coordinates of the row by columns in descending order.\\n  \\n  Examples:\\n  getRow([\\n    [1,2,3,4,5,6],\\n    [1,2,3,4,1,6],\\n    [1,2,3,4,5,1]\\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  getRow([], 1) == []\\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  */\\nconst getRow = (lst, x) => {\\n\", \"canonical_solution\": \"  let t = []\\n  for (let i = 0; i < lst.length; i++) {\\n    for (let j = lst[i].length - 1; j >= 0; j--) {\\n      if (lst[i][j] == x) {\\n        t.push((i, j))\\n      }\\n    }\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testGetRow = () => {\\n  console.assert(\\n    JSON.stringify(\\n      getRow(\\n        [\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 1, 6],\\n          [1, 2, 3, 4, 5, 1],\\n        ],\\n        1\\n      )\\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      getRow(\\n        [\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n        ],\\n        2\\n      )\\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      getRow(\\n        [\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 1, 3, 4, 5, 6],\\n          [1, 2, 1, 4, 5, 6],\\n          [1, 2, 3, 1, 5, 6],\\n          [1, 2, 3, 4, 1, 6],\\n          [1, 2, 3, 4, 5, 1],\\n        ],\\n        1\\n      )\\n    ) ===\\n    JSON.stringify([\\n      (0, 0),\\n      (1, 0),\\n      (2, 1),\\n      (2, 0),\\n      (3, 2),\\n      (3, 0),\\n      (4, 3),\\n      (4, 0),\\n      (5, 4),\\n      (5, 0),\\n      (6, 5),\\n      (6, 0),\\n    ])\\n  )\\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\\n  )\\n}\\n\\ntestGetRow()\\n\", \"declaration\": \"\\nconst getRow = (lst, x) => {\\n\", \"example_test\": \"const testGetRow = () => {\\n  console.assert(\\n    JSON.stringify(\\n      getRow(\\n        [\\n          [1, 2, 3, 4, 5, 6],\\n          [1, 2, 3, 4, 1, 6],\\n          [1, 2, 3, 4, 5, 1],\\n        ],\\n        1\\n      )\\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\\n  )\\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\\n  )\\n}\\ntestGetRow()\\n\"}\n{\"task_id\": \"JavaScript/88\", \"prompt\": \"/*\\n  Given an array of non-negative integers, return a copy of the given array after sorting,\\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\\n  or sort it in descending order if the sum( first index value, last index value) is even.\\n\\n  Note:\\n  * don't change the given array.\\n\\n  Examples:\\n  * sortArray([]) => []\\n  * sortArray([5]) => [5]\\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\\n  */\\nconst sortArray = (array) => {\\n\", \"canonical_solution\": \"  let arr = array\\n  let tot = arr[0] + arr[arr.length-1]\\n  for (let j = 0; j < arr.length; j++) {\\n    let ind = j\\n    for (let k = j + 1; k < arr.length; k++) {\\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\\n        ind = k\\n      }\\n    }\\n    let tmp = arr[j]\\n    arr[j] = arr[ind]\\n    arr[ind] = tmp\\n  }\\n  return arr\\n}\\n\\n\", \"test\": \"const testSortArray = () => {\\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\\n}\\n\\ntestSortArray()\\n\", \"declaration\": \"\\nconst sortArray = (array) => {\\n\", \"example_test\": \"const testSortArray = () => {\\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\\n}\\ntestSortArray()\\n\"}\n{\"task_id\": \"JavaScript/89\", \"prompt\": \"/*Create a function encrypt that takes a string as an argument and\\n  returns a string encrypted with the alphabet being rotated. \\n  The alphabet should be rotated in a manner such that the letters \\n  shift down by two multiplied to two places.\\n  For example:\\n  encrypt('hi') returns 'lm'\\n  encrypt('asdfghjkl') returns 'ewhjklnop'\\n  encrypt('gf') returns 'kj'\\n  encrypt('et') returns 'ix'\\n  */\\nconst encrypt = (s) => {\\n\", \"canonical_solution\": \"  let t = ''\\n  for (let i = 0; i < s.length; i++) {\\n    let p = s[i].charCodeAt() + 4\\n    if (p > 122) { p -= 26 }\\n    t += String.fromCharCode(p)\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testEncrypt = () => {\\n  console.assert(encrypt('hi') === 'lm')\\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\\n  console.assert(encrypt('gf') === 'kj')\\n  console.assert(encrypt('et') === 'ix')\\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\\n  console.assert(\\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\\n  )\\n  console.assert(encrypt('a') === 'e')\\n}\\n\\ntestEncrypt()\\n\", \"declaration\": \"\\nconst encrypt = (s) => {\\n\", \"example_test\": \"const testEncrypt = () => {\\n  console.assert(encrypt('hi') === 'lm')\\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\\n  console.assert(encrypt('gf') === 'kj')\\n  console.assert(encrypt('et') === 'ix')\\n}\\ntestEncrypt()\\n\"}\n{\"task_id\": \"JavaScript/90\", \"prompt\": \"/*\\n  You are given a list of integers.\\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\\n  Return null if there is no such element.\\n  \\n  nextSmallest([1, 2, 3, 4, 5]) == 2\\n  nextSmallest([5, 1, 4, 3, 2]) == 2\\n  nextSmallest([]) == null\\n  nextSmallest([1, 1]) == null\\n  */\\nconst nextSmallest = (lst) => {\\n\", \"canonical_solution\": \"  let arr = lst\\n  for (let j = 0; j < arr.length; j++) {\\n    let ind = j\\n    for (let k = j + 1; k < arr.length; k++) {\\n      if (arr[k] < arr[ind]) {\\n        ind = k\\n      }\\n    }\\n    let tmp = arr[j]\\n    arr[j] = arr[ind]\\n    arr[ind] = tmp\\n  }\\n  let smallest = arr[0]\\n  let pt = 1\\n  while(pt<arr.length){\\n    if(arr[pt]>smallest){\\n      return arr[pt]\\n    }\\n    pt++\\n  }\\n  return null\\n}\\n\\n\", \"test\": \"const testNextSmallest = () => {\\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\\n  console.assert(nextSmallest([]) === null)\\n  console.assert(nextSmallest([1, 1]) === null)\\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\\n}\\n\\ntestNextSmallest()\\n\", \"declaration\": \"\\nconst nextSmallest = (lst) => {\\n\", \"example_test\": \"const testNextSmallest = () => {\\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\\n  console.assert(nextSmallest([]) === null)\\n  console.assert(nextSmallest([1, 1]) === null)\\n}\\ntestNextSmallest()\\n\"}\n{\"task_id\": \"JavaScript/91\", \"prompt\": \"/*\\n  You'll be given a string of words, and your task is to count the number\\n  of boredoms. A boredom is a sentence that starts with the word \\\"I\\\".\\n  Sentences are delimited by '.', '?' or '!'.\\n \\n  For example:\\n  >>> isBored(\\\"Hello world\\\")\\n  0\\n  >>> isBored(\\\"The sky is blue. The sun is shining. I love this weather\\\")\\n  1\\n  */\\nconst isBored = (S) => {\\n\", \"canonical_solution\": \"  let t = 0\\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\\n  for (let i = 0; i < S.length; i++) {\\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\\n        t++\\n      }\\n    }\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testIsBored = () => {\\n  console.assert(isBored('Hello world') === 0)\\n  console.assert(isBored('Is the sky blue?') === 0)\\n  console.assert(isBored('I love It !') === 1)\\n  console.assert(isBored('bIt') === 0)\\n  console.assert(\\n    isBored('I feel good today. I will be productive. will kill It') === 2\\n  )\\n  console.assert(isBored('You and I are going for a walk') === 0)\\n}\\n\\ntestIsBored()\\n\", \"declaration\": \"\\nconst isBored = (S) => {\\n\", \"example_test\": \"const testIsBored = () => {\\n  console.assert(isBored('Hello world') === 0)\\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\\n}\\ntestIsBored()\\n\"}\n{\"task_id\": \"JavaScript/92\", \"prompt\": \"/* Create a function that takes 3 numbers.\\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\\n  Returns false in any other cases.\\n  Examples\\n  anyInt(5, 2, 7) \\u279e true\\n  anyInt(3, 2, 2) \\u279e false\\n  anyInt(3, -2, 1) \\u279e true\\n  anyInt(3.6, -2.2, 2) \\u279e false\\n  */\\nconst anyInt = (x, y, z) => {\\n\", \"canonical_solution\": \"  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\\n    return true\\n  }\\n  return false\\n}\\n\\n\", \"test\": \"const testAnyInt = () => {\\n  console.assert(anyInt(2, 3, 1) === true)\\n  console.assert(anyInt(2.5, 2, 3) === false)\\n  console.assert(anyInt(1.5, 5, 3.5) === false)\\n  console.assert(anyInt(2, 6, 2) === false)\\n  console.assert(anyInt(4, 2, 2) === true)\\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\\n  console.assert(anyInt(-4, 6, 2) === true)\\n  console.assert(anyInt(2, 1, 1) === true)\\n  console.assert(anyInt(3, 4, 7) === true)\\n  console.assert(anyInt(3.0, 4, 7) === true)\\n}\\n\\ntestAnyInt()\\n\", \"declaration\": \"\\nconst anyInt = (x, y, z) => {\\n\", \"example_test\": \"const testAnyInt = () => {\\n  console.assert(anyInt(5, 2, 7) === true)\\n  console.assert(anyInt(3, 2, 2) === false)\\n  console.assert(anyInt(3, -2, 1) === true)\\n  console.assert(anyInt(3.6, -2.2, 2) === false)\\n}\\ntestAnyInt()\\n\"}\n{\"task_id\": \"JavaScript/93\", \"prompt\": \"/*\\n  Write a function that takes a message, and encodes in such a \\n  way that it swaps case of all letters, replaces all vowels in \\n  the message with the letter that appears 2 places ahead of that \\n  vowel in the english alphabet. \\n  Assume only letters. \\n  \\n  Examples:\\n  >>> encode('test')\\n  'TGST'\\n  >>> encode('This is a message')\\n  'tHKS KS C MGSSCGG'\\n  */\\nconst encode = (message) => {\\n\", \"canonical_solution\": \"  let t = ''\\n  for (let i = 0; i < message.length; i++) {\\n    let p = message[i].charCodeAt()\\n    if (p > 96) { p -= 32 }\\n    else if (p!=32 && p < 96) { p += 32 }\\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\\n    t += String.fromCharCode(p)\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testEncode = () => {\\n  console.assert(encode('TEST') === 'tgst')\\n  console.assert(encode('Mudasir') === 'mWDCSKR')\\n  console.assert(encode('YES') === 'ygs')\\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\\n  console.assert(\\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\\n  )\\n}\\n\\ntestEncode()\\n\", \"declaration\": \"\\nconst encode = (message) => {\\n\", \"example_test\": \"const testEncode = () => {\\n  console.assert(encode('test') === 'TGST')\\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\\n}\\ntestEncode()\\n\"}\n{\"task_id\": \"JavaScript/94\", \"prompt\": \"/*You are given a list of integers.\\n  You need to find the largest prime value and return the sum of its digits.\\n\\n  Examples:\\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\\n  For lst = [0,81,12,3,1,21] the output should be 3\\n  For lst = [0,8,1,2,1,7] the output should be 7\\n  */\\nconst skjkasdkd = (lst) => {\\n\", \"canonical_solution\": \"  let t = 0\\n  for (let i = 0; i < lst.length; i++) {\\n    let p = 1\\n    for (let j = 2; j * j <= lst[i]; j++) {\\n      if (lst[i] % j == 0) { p = 0; break }\\n    }\\n    if (p == 1 && lst[i] > t) { t = lst[i] }\\n  }\\n  let k = 0\\n  while (t != 0) {\\n    k += t % 10\\n    t = (t - t % 10) / 10\\n  }\\n  return k\\n}\\n\\n\", \"test\": \"const testSkjkasdkd = () => {\\n  console.assert(\\n    skjkasdkd([\\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\\n    ]) === 10\\n  )\\n\\n  console.assert(\\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\\n  )\\n\\n  console.assert(\\n    skjkasdkd([\\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\\n    ]) === 13\\n  )\\n\\n  console.assert(\\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\\n  )\\n\\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\\n\\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\\n\\n  console.assert(skjkasdkd([8191]) === 19)\\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\\n}\\n\\ntestSkjkasdkd()\\n\", \"declaration\": \"\\nconst skjkasdkd = (lst) => {\\n\", \"example_test\": \"const testSkjkasdkd = () => {\\n  console.assert(\\n    skjkasdkd([\\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\\n    ]) === 10\\n  )\\n  console.assert(\\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\\n  )\\n  console.assert(\\n    skjkasdkd([\\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\\n    ]) === 13\\n  )\\n  console.assert(\\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\\n  )\\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\\n}\\ntestSkjkasdkd()\\n\"}\n{\"task_id\": \"JavaScript/95\", \"prompt\": \"/*\\n  Given a dictionary, return true if all keys are strings in lower \\n  case or all keys are strings in upper case, else return false.\\n  The function should return false is the given dictionary is empty.\\n  Examples:\\n  checkDictCase({\\\"a\\\":\\\"apple\\\", \\\"b\\\":\\\"banana\\\"}) should return true.\\n  checkDictCase({\\\"a\\\":\\\"apple\\\", \\\"A\\\":\\\"banana\\\", \\\"B\\\":\\\"banana\\\"}) should return false.\\n  checkDictCase({\\\"a\\\":\\\"apple\\\", 8:\\\"banana\\\", \\\"a\\\":\\\"apple\\\"}) should return false.\\n  checkDictCase({\\\"Name\\\":\\\"John\\\", \\\"Age\\\":\\\"36\\\", \\\"City\\\":\\\"Houston\\\"}) should return false.\\n  checkDictCase({\\\"STATE\\\":\\\"NC\\\", \\\"ZIP\\\":\\\"12345\\\" }) should return true.\\n  */\\nconst checkDictCase = (dict) => {\\n\", \"canonical_solution\": \"  let c = 0\\n  let lo = 1\\n  let hi = 1\\n  for (let key in dict) {\\n    c++\\n    for (let i = 0; i < key.length; i++) {\\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\\n    }\\n  }\\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\\n  return true\\n}\\n\\n\", \"test\": \"const testCheckDictCase = () => {\\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\\n  console.assert(\\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\\n  )\\n  console.assert(\\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\\n  )\\n  console.assert(\\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\\n  )\\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\\n  console.assert(checkDictCase({}) === false)\\n}\\n\\ntestCheckDictCase()\\n\", \"declaration\": \"\\nconst checkDictCase = (dict) => {\\n\", \"example_test\": \"const testCheckDictCase = () => {\\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\\n  console.assert(\\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\\n  )\\n  console.assert(\\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\\n  )\\n  console.assert(\\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\\n  )\\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\\n}\\ntestCheckDictCase()\\n\"}\n{\"task_id\": \"JavaScript/96\", \"prompt\": \"/*Implement a function that takes an non-negative integer and returns an array of the first n\\n  integers that are prime numbers and less than n.\\n  for example:\\n  countUpTo(5) => [2,3]\\n  countUpTo(11) => [2,3,5,7]\\n  countUpTo(0) => []\\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\\n  countUpTo(1) => []\\n  countUpTo(18) => [2,3,5,7,11,13,17]\\n  */\\nconst countUpTo = (n) => {\\n\", \"canonical_solution\": \"  let t = []\\n  for (let i = 2; i < n; i++) {\\n    let p = 1\\n    for (let j = 2; j * j <= i; j++) {\\n      if (i % j == 0) { p = 0; break }\\n    }\\n    if (p == 1) { t.push(i) }\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testCountUpTo = () => {\\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(countUpTo(22)) ===\\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\\n  )\\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\\n  )\\n  console.assert(\\n    JSON.stringify(countUpTo(47)) ===\\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\\n  )\\n  console.assert(\\n    JSON.stringify(countUpTo(101)) ===\\n    JSON.stringify([\\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\\n      71, 73, 79, 83, 89, 97,\\n    ])\\n  )\\n}\\n\\ntestCountUpTo()\\n\", \"declaration\": \"\\nconst countUpTo = (n) => {\\n\", \"example_test\": \"const testCountUpTo = () => {\\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(countUpTo(20)) ===\\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\\n  )\\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\\n  )\\n}\\ntestCountUpTo()\\n\"}\n{\"task_id\": \"JavaScript/97\", \"prompt\": \"/*Complete the function that takes two integers and returns \\n  the product of their unit digits.\\n  Assume the input is always valid.\\n  Examples:\\n  multiply(148, 412) should return 16.\\n  multiply(19, 28) should return 72.\\n  multiply(2020, 1851) should return 0.\\n  multiply(14,-15) should return 20.\\n  */\\nconst multiply = (a, b) => {\\n\", \"canonical_solution\": \"  if (a < 0) { a = -a }\\n  if (b < 0) { b = -b }\\n  return (a % 10) * (b % 10)\\n}\\n\\n\", \"test\": \"const testMultiply = () => {\\n  console.assert(multiply(148, 412) === 16)\\n  console.assert(multiply(19, 28) === 72)\\n  console.assert(multiply(2020, 1851) === 0)\\n  console.assert(multiply(14, -15) === 20)\\n  console.assert(multiply(76, 67) === 42)\\n  console.assert(multiply(17, 27) === 49)\\n  console.assert(multiply(0, 1) === 0)\\n  console.assert(multiply(0, 0) === 0)\\n}\\n\\ntestMultiply()\\n\", \"declaration\": \"\\nconst multiply = (a, b) => {\\n\", \"example_test\": \"const testMultiply = () => {\\n  console.assert(multiply(148, 412) === 16)\\n  console.assert(multiply(19, 28) === 72)\\n  console.assert(multiply(2020, 1851) === 0)\\n  console.assert(multiply(14, -15) === 20)\\n}\\ntestMultiply()\\n\"}\n{\"task_id\": \"JavaScript/98\", \"prompt\": \"/*\\n  Given a string s, count the number of uppercase vowels in even indices.\\n  \\n  For example:\\n  countUpper('aBCdEf') returns 1\\n  countUpper('abcdefg') returns 0\\n  countUpper('dBBE') returns 0\\n  */\\nconst countUpper = (s) => {\\n\", \"canonical_solution\": \"  let p = 0\\n  for (let i = 0; i < s.length; i += 2) {\\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\\n  }\\n  return p\\n}\\n\\n\", \"test\": \"const testCountUpper = () => {\\n  console.assert(countUpper('aBCdEf') === 1)\\n  console.assert(countUpper('abcdefg') === 0)\\n  console.assert(countUpper('dBBE') === 0)\\n  console.assert(countUpper('B') === 0)\\n  console.assert(countUpper('U') === 1)\\n  console.assert(countUpper('') === 0)\\n  console.assert(countUpper('EEEE') === 2)\\n}\\n\\ntestCountUpper()\\n\", \"declaration\": \"\\nconst countUpper = (s) => {\\n\", \"example_test\": \"const testCountUpper = () => {\\n  console.assert(countUpper('aBCdEf') === 1)\\n  console.assert(countUpper('abcdefg') === 0)\\n  console.assert(countUpper('dBBE') === 0)\\n}\\ntestCountUpper()\\n\"}\n{\"task_id\": \"JavaScript/99\", \"prompt\": \"/* Create a function that takes a value (string) representing a number\\n  and returns the closest integer to it. If the number is equidistant\\n  from two integers, round it away from zero.\\n  Examples\\n  >>> closestInteger(\\\"10\\\")\\n  10\\n  >>> closestInteger(\\\"15.3\\\")\\n  15\\n  Note:\\n  Rounding away from zero means that if the given number is equidistant\\n  from two integers, the one you should return is the one that is the\\n  farthest from zero. For example closestInteger(\\\"14.5\\\") should\\n  return 15 and closestInteger(\\\"-14.5\\\") should return -15.\\n  */\\nconst closestInteger = (value) => {\\n\", \"canonical_solution\": \"  value = Number(value)\\n  let t = value % 1\\n  if (t < 0.5 && t > -0.5) { value -= t }\\n  else { value += t }\\n  return value\\n}\\n\\n\", \"test\": \"const testClosestInteger = () => {\\n  console.assert(closestInteger('10') === 10)\\n  console.assert(closestInteger('14.5') === 15)\\n  console.assert(closestInteger('-15.5') === -16)\\n  console.assert(closestInteger('15.3') === 15)\\n  console.assert(closestInteger('0') === 0)\\n}\\n\\ntestClosestInteger()\\n\", \"declaration\": \"\\nconst closestInteger = (value) => {\\n\", \"example_test\": \"const testClosestInteger = () => {\\n  console.assert(closestInteger('10') === 10)\\n  console.assert(closestInteger('15.3') === 15)\\n}\\ntestClosestInteger()\\n\"}\n{\"task_id\": \"JavaScript/100\", \"prompt\": \"/*\\n  Given a positive integer n, you have to make a pile of n levels of stones.\\n  The first level has n stones.\\n  The number of stones in the next level is:\\n      - the next odd number if n is odd.\\n      - the next even number if n is even.\\n  Return the number of stones in each level in a list, where element at index\\n  i represents the number of stones in the level (i+1).\\n\\n  Examples:\\n  >>> makeAPile(3)\\n  [3, 5, 7]\\n  */\\nconst makeAPile = (n) => {\\n\", \"canonical_solution\": \"  let t = []\\n  for (let i = n; i < n * 3; i += 2) {\\n    t.push(i)\\n  }\\n  return t\\n}\\n\\n\", \"test\": \"const testMakeAPile = () => {\\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\\n  console.assert(\\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\\n  )\\n  console.assert(\\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\\n  )\\n  console.assert(\\n    JSON.stringify(makeAPile(8)) ===\\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\\n  )\\n}\\n\\ntestMakeAPile()\\n\", \"declaration\": \"\\nconst makeAPile = (n) => {\\n\", \"example_test\": \"const testMakeAPile = () => {\\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\\n}\\ntestMakeAPile()\\n\"}\n{\"task_id\": \"JavaScript/101\", \"prompt\": \"/*\\n  You will be given a string of words separated by commas or spaces. Your task is\\n  to split the string into words and return an array of the words.\\n  \\n  For example:\\n  wordsString(\\\"Hi, my name is John\\\") == [\\\"Hi\\\", \\\"my\\\", \\\"name\\\", \\\"is\\\", \\\"John\\\"]\\n  wordsString(\\\"One, two, three, four, five, six\\\") == [\\\"One\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\", \\\"five\\\", \\\"six\\\"]\\n  */\\nconst wordsString = (s) => {\\n\", \"canonical_solution\": \"  let t = ''\\n  let p = []\\n  let k = 0\\n  for (let i = 0; i < s.length; i++) {\\n    if (s[i] == ' ' || s[i] == ',') {\\n      if (k == 0) {\\n        k = 1;\\n        p.push(t);\\n        t = '';\\n      }\\n    }\\n    else {\\n      k = 0;\\n      t += s[i]\\n    }\\n  }\\n  if (t != '') {\\n    p.push(t);\\n  }\\n  return p\\n}\\n\\n\", \"test\": \"const testWordsString = () => {\\n  console.assert(\\n    JSON.stringify(wordsString('Hi, my name is John')) ===\\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\\n  )\\n  console.assert(\\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\\n  )\\n  console.assert(\\n    JSON.stringify(wordsString('Hi, my name')) ===\\n    JSON.stringify(['Hi', 'my', 'name'])\\n  )\\n  console.assert(\\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\\n  )\\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\\n    JSON.stringify(['ahmed', 'gamal'])\\n  )\\n}\\n\\ntestWordsString()\\n\", \"declaration\": \"\\nconst wordsString = (s) => {\\n\", \"example_test\": \"const testWordsString = () => {\\n  console.assert(\\n    JSON.stringify(wordsString('Hi, my name is John')) ===\\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\\n  )\\n  console.assert(\\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\\n  )\\n}\\ntestWordsString()\\n\"}",
        "output": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "68aa97abce13538f"
            ]
        ]
    },
    {
        "id": "d7ff3df8b8bca72b",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "f4f6fa24ca217587"
            ]
        ]
    },
    {
        "id": "4d94c61aec9614a2",
        "type": "inject",
        "z": "f297cec495c6b8be",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "javascript",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "183a83919e31ea2f"
            ]
        ]
    },
    {
        "id": "2d59b8905d9a2034",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "d7ff3df8b8bca72b"
            ]
        ]
    },
    {
        "id": "30bf3f577ffc38e2",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "",
        "scope": [
            "922590827a20da6a"
        ],
        "uncaught": false,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ]
    },
    {
        "id": "a596c13563210cd3",
        "type": "file",
        "z": "f297cec495c6b8be",
        "name": "",
        "filename": "/data/bench.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 910,
        "y": 620,
        "wires": [
            [
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "75992a64fd9b37f1",
        "type": "debug",
        "z": "f297cec495c6b8be",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "6ccea9b424e51207",
        "type": "subflow:237429fb2a5a7712",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 380,
        "y": 680,
        "wires": [
            [
                "49f531afe4600028"
            ]
        ]
    },
    {
        "id": "b3dc275d4210ec42",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "355dc2522a499301",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ]
        ]
    },
    {
        "id": "49f531afe4600028",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f297cec495c6b8be",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "f98edf899c38d504"
            ]
        ]
    },
    {
        "id": "f98edf899c38d504",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "get result",
        "func": "console.log('parsed code:', msg.parts)\nmsg.payload = msg.payload\n                .filter(({type}) => ['javascript'].indexOf(type) >= 0)\n\nif (msg.payload.length > 1){\n  msg.payload = `throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')`\n  return [null, msg]\n} else if (msg.payload.length < 1){\n  msg.payload = `throw new Error('no code blocks detected, please obey the formatting instructions and return your answer inside a markdown code block.')`\n  return [null, msg]\n} else {\n  msg.payload = msg.payload[0].content; \n  return [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "62612d04c38cb1a4"
            ],
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62355c1dd139219c",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f297cec495c6b8be",
        "name": "bundle prompt",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "fc173ba8f27163d1",
        "type": "subflow:1254546b0e9fb57c",
        "z": "f297cec495c6b8be",
        "name": "wrap format",
        "x": 390,
        "y": 600,
        "wires": [
            [
                "62355c1dd139219c"
            ]
        ]
    },
    {
        "id": "32d8cfeb8705d916",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "fc173ba8f27163d1"
            ]
        ]
    },
    {
        "id": "90bfb9ae3c54bda3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "tag smartgpt",
        "rules": [
            {
                "t": "set",
                "p": "flow",
                "pt": "msg",
                "to": "smartgpt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ]
    },
    {
        "id": "1e835fdc3f636679",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "",
        "scope": [
            "6ccea9b424e51207"
        ],
        "uncaught": false,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "b0fd40f4cbec0c92",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "aa85c030e8d55e76"
            ]
        ]
    },
    {
        "id": "aa85c030e8d55e76",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ],
            [
                "355dc2522a499301"
            ],
            [
                "b3dc275d4210ec42"
            ],
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "65d8c0dd542c67cc",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "clone",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 360,
        "wires": [
            [
                "aec1f52637b20998"
            ]
        ]
    },
    {
        "id": "084093a3278f4f92",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "29c04591edb50ab3",
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "aec1f52637b20998",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b0fd40f4cbec0c92"
            ]
        ]
    },
    {
        "id": "29c04591edb50ab3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 500,
        "wires": [
            [
                "b8010df720742aef"
            ]
        ]
    },
    {
        "id": "4d96dd6356493577",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 870,
        "y": 580,
        "wires": [
            [
                "a596c13563210cd3"
            ]
        ]
    },
    {
        "id": "68aa97abce13538f",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "split",
        "func": "msg.payload = msg.payload.split('\\n').filter(_ => _)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 120,
        "wires": [
            [
                "2d59b8905d9a2034"
            ]
        ]
    },
    {
        "id": "1f104ae03f736fc7",
        "type": "subflow:8843d7f92416211de9ebb963ff4ce28125932878",
        "z": "064c17312433ce15",
        "name": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "d97a19209a785803"
            ]
        ]
    },
    {
        "id": "b433c835d854e271",
        "type": "file in",
        "z": "064c17312433ce15",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "3fb29f9dbf599fa0"
            ]
        ]
    },
    {
        "id": "3fb29f9dbf599fa0",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "cd4c326a3811b3e0"
            ]
        ]
    },
    {
        "id": "3fc0a9eb4623c177",
        "type": "inject",
        "z": "064c17312433ce15",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "b433c835d854e271"
            ]
        ]
    },
    {
        "id": "d97a19209a785803",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6ee86c3a03682354"
            ]
        ]
    },
    {
        "id": "6ee86c3a03682354",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "761e9408e6850b23"
            ]
        ]
    },
    {
        "id": "761e9408e6850b23",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "sort eligible for doc",
        "func": "if (msg.payload.nodes.filter(node => node.id === msg.payload.id).pop().info) {\n    return [null,msg];\n}\n\nconst undocd = msg.payload.nodes.filter(node => {\n    if (!node.type.startsWith('subflow:')) return false;\n\n    const z = node.type.split(':')[1]\n    const subflow = msg.flows.filter(node => node.id === z).pop()\n    if (subflow.info) return false;\n    return true;\n})\n\n\n\nif (undocd.length){\n    return [null, msg];\n}\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "dae7e91edc72c83d"
            ],
            [
                "2e410a19acc23c63"
            ]
        ]
    },
    {
        "id": "bf4826fb44e15c5e",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "flows",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 200,
        "wires": [
            [
                "1f104ae03f736fc7"
            ]
        ]
    },
    {
        "id": "17c4c2465ba4c355",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "documentation",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nPlease provide a brief html document to describe it:\n\nstart with a brief description of no more than three sentences,\n\nuse the following three sections as necessary: inputs, outputs, and details\n\nhere's an example document that describes the \"read file\" subflow:\n\n```html\n<p>Reads the contents of a file as either a string or binary buffer.</p>\n<h3>Inputs</h3>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>The name of the file to be read can be provided in the node configuration, or as a message property. \n        By default it will use <code>msg.filename</code> but this can be customised in the node.\n    </dd>\n</dl>\n<h3>Outputs</h3>\n<dl class=\"message-properties\">\n    <dt>payload <span class=\"property-type\">string | buffer</span></dt>\n    <dd>The contents of the file as either a string or binary buffer.</dd>\n    <dt class=\"optional\">filename <span class=\"property-type\">string</span></dt>\n    <dd>If not configured in the node, this optional property sets the name of the file to be read.</dd>\n</dl>\n<h3>Details</h3>\n<p>The filename should be an absolute path, otherwise it will be relative to\nthe working directory of the Node-RED process.</p>\n<p>On Windows, path separators may need to be escaped, for example: <code>\\\\Users\\\\myUser</code>.</p>\n<p>Optionally, a text file can be split into lines, outputting one message per line, or a binary file\nsplit into smaller buffer chunks - the chunk size being operating system dependant, but typically 64k (Linux/Mac) or 41k (Windows).</p>\n<p>When split into multiple messages, each message will have a <code>parts</code>\nproperty set, forming a complete message sequence.</p>\n<p>Encoding of input data can be specified from list of encodings if output format is string.</p>\n<p>Errors should be caught and handled using a Catch node.</p>\n```\n\ninputs/outputs should refer only to properties on messages that move through the flow. put environment variable descriptions into the 'details' section.\n\ntake care to be sure that the behavior you report is actually what the subflow does.\n\nremember to respond with html.",
        "output": "str",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "5ac8e1eb22d9be16"
            ]
        ]
    },
    {
        "id": "dae7e91edc72c83d",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload.nodes",
        "action": "str",
        "pretty": false,
        "x": 530,
        "y": 80,
        "wires": [
            [
                "5412bb9f8505ec2d"
            ]
        ]
    },
    {
        "id": "5db7cfe60d82dc48",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 780,
        "wires": []
    },
    {
        "id": "5412bb9f8505ec2d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subflow",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.nodes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 121.25,
        "wires": [
            [
                "651c8b081f5d322f"
            ]
        ]
    },
    {
        "id": "16e7fb7b2bc1fd73",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "schema in",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected input message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 870,
        "y": 380,
        "wires": [
            [
                "04838b8e66b73717"
            ]
        ]
    },
    {
        "id": "1c58af75659287c4",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "schema out",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nhere are some facts about it:\n{{{analysis}}}\n\nplease respond with a draft-06 JSON schema that represents the expected output message format\n\nonly include properties in the schema that you observe being used or set in the flow above.\n\nIGNORE anything you see from \"env.get\" (those go elsewhere)",
        "output": "str",
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "1a45745cdcdcc2a0"
            ]
        ]
    },
    {
        "id": "1a45745cdcdcc2a0",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "outputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "6d9fb5aa70b87fab"
            ]
        ]
    },
    {
        "id": "04838b8e66b73717",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "inputSchema",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 420,
        "wires": [
            [
                "7933d60af84f3844"
            ]
        ]
    },
    {
        "id": "5ac8e1eb22d9be16",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "key",
                "pt": "msg",
                "to": "info",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "format",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 420,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ]
        ]
    },
    {
        "id": "faec021f67110605",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "clone",
        "func": "msg.payload = [msg.payload, msg.payload, msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 245,
        "wires": [
            [
                "9021cf925783a560"
            ]
        ]
    },
    {
        "id": "7ec6901fd576cd8c",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "mux payload",
        "func": "msg.parseError = msg.parseError || 0\nif (!msg.payload[0] || msg.payload.length > 1){\n    msg.payload = `I was unable to parse your output, please wrap your final result inside a codeblock according to github flavored markdown.`\n    msg.parseError++\n    if (msg.parseError > 3){\n        return [msg, null]\n    }\n}\nlet value;\ntry {\n    value = msg.key === 'info' ? msg.payload : JSON.parse(msg.payload);\n} catch (e){\n    msg.parseError++\n    //ignore\n    msg.payload = 'I was unable to parse your output, please ensure you are giving me a valid JSON schema inside a single markdown code block'\n    if (msg.parseError > 3) {\n        return [msg, null]\n    }\n}\n\n\nmsg.payload = {\n    key: msg.key,\n    id: msg.subflow.id,\n    value\n}\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "bb3eea2eeff7495c"
            ],
            [
                "add40d01a5910b28"
            ]
        ]
    },
    {
        "id": "678fd0992d3a0f8a",
        "type": "split",
        "z": "064c17312433ce15",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 327.5,
        "wires": [
            [
                "a47dc97cf90527f1"
            ]
        ]
    },
    {
        "id": "49c6cd17167fda13",
        "type": "switch",
        "z": "064c17312433ce15",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 990,
        "y": 320,
        "wires": [
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ],
            [
                "56eeed36b16f302e"
            ]
        ]
    },
    {
        "id": "9021cf925783a560",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sequence",
                "pt": "msg",
                "to": "parts",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 286.25,
        "wires": [
            [
                "678fd0992d3a0f8a"
            ]
        ]
    },
    {
        "id": "3a05ecf93cf9ab5d",
        "type": "change",
        "z": "064c17312433ce15",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "sequence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 575,
        "wires": [
            [
                "2e410a19acc23c63"
            ]
        ]
    },
    {
        "id": "2e410a19acc23c63",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 530,
        "y": 616.25,
        "wires": [
            [
                "2cd00d0c53ecf4fb",
                "53ef31f6afecb1f0"
            ]
        ]
    },
    {
        "id": "add40d01a5910b28",
        "type": "join",
        "z": "064c17312433ce15",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 530,
        "y": 533.75,
        "wires": [
            [
                "3a05ecf93cf9ab5d",
                "8a22d3df8f823101"
            ]
        ]
    },
    {
        "id": "2cd00d0c53ecf4fb",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "merge docs",
        "func": "msg.payload.filter(Array.isArray).forEach(arr => {\n    arr.forEach(item => {\n        if (item && item.id && item.key && item.value !== undefined) {\n            console.log('item', item)\n            let flow = msg.flows.find(flow => flow.id === item.id);\n            if (flow) {\n                flow[item.key] = item.value;\n            }\n        }\n    });\n});\n\nmsg.payload = msg.flows;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 657.5,
        "wires": [
            [
                "0b0814f0b4085a24"
            ]
        ]
    },
    {
        "id": "965d9cce35236045",
        "type": "file",
        "z": "064c17312433ce15",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.dox.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 740,
        "wires": [
            [
                "5db7cfe60d82dc48"
            ]
        ]
    },
    {
        "id": "0b0814f0b4085a24",
        "type": "json",
        "z": "064c17312433ce15",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 530,
        "y": 698.75,
        "wires": [
            [
                "965d9cce35236045"
            ]
        ]
    },
    {
        "id": "5c0a5b90e1f9a2a9",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "confgpt",
        "scope": [
            "afdc81229134a1c7"
        ],
        "uncaught": false,
        "x": 90,
        "y": 440,
        "wires": [
            [
                "b561ced84cd69718",
                "add40d01a5910b28"
            ]
        ]
    },
    {
        "id": "b561ced84cd69718",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "documentation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 480,
        "wires": []
    },
    {
        "id": "36739576145f65c6",
        "type": "catch",
        "z": "064c17312433ce15",
        "name": "confgpt",
        "scope": null,
        "uncaught": true,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "cd54a881ed9ca306"
            ]
        ]
    },
    {
        "id": "cd54a881ed9ca306",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "all doc errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 680,
        "wires": []
    },
    {
        "id": "55ed6ffd1603d999",
        "type": "subflow:bf9fecd68e29a50a",
        "z": "064c17312433ce15",
        "name": "",
        "x": 540,
        "y": 203.75,
        "wires": [
            [
                "faec021f67110605"
            ]
        ]
    },
    {
        "id": "651c8b081f5d322f",
        "type": "template",
        "z": "064c17312433ce15",
        "name": "set context",
        "field": "context",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "we're working with node-red, trying to understand flows before we import them.\n",
        "output": "str",
        "x": 550,
        "y": 162.5,
        "wires": [
            [
                "55ed6ffd1603d999"
            ]
        ]
    },
    {
        "id": "a47dc97cf90527f1",
        "type": "function",
        "z": "064c17312433ce15",
        "name": "function 2",
        "func": "msg.history = JSON.parse(JSON.stringify(msg.history || []))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "49c6cd17167fda13"
            ]
        ]
    },
    {
        "id": "8a22d3df8f823101",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 540,
        "wires": []
    },
    {
        "id": "53ef31f6afecb1f0",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9ed70c1b56a8ed7",
        "type": "subflow:50df1246bdaf5119",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "7ec6901fd576cd8c"
            ]
        ]
    },
    {
        "id": "272d17a387e30363",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 20,
        "wires": []
    },
    {
        "id": "6561f76ff8addfbc",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "fe14d1df072c2e42",
        "type": "debug",
        "z": "064c17312433ce15",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd4c326a3811b3e0",
        "type": "subflow:657c8f0e9df6242e",
        "z": "064c17312433ce15",
        "name": "",
        "x": 550,
        "y": 40,
        "wires": [
            [
                "6561f76ff8addfbc"
            ]
        ]
    },
    {
        "id": "ab6cb2a20ad914c8",
        "type": "inject",
        "z": "eeba88e77478c844",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 60,
        "wires": [
            [
                "2216518958f9fd40"
            ]
        ]
    },
    {
        "id": "2216518958f9fd40",
        "type": "debug",
        "z": "eeba88e77478c844",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 80,
        "wires": []
    }
]