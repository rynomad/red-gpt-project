[
    {
        "id": "941765e8bb2c32d6",
        "type": "tab",
        "label": "Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e961334cde89144c",
        "type": "tab",
        "label": "gpt queue",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f297cec495c6b8be",
        "type": "tab",
        "label": "Benchmark",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d295481a52b8fd83",
        "type": "subflow",
        "name": "squash history",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 40,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a25be0e127fc9e24",
        "type": "subflow",
        "name": "stash pop",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "depth",
                "type": "num",
                "value": "1"
            },
            {
                "name": "apply",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "f9e0ec91.e767e",
        "type": "subflow",
        "name": "Minify JSON",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "237429fb2a5a7712",
        "type": "subflow",
        "name": "confgpt",
        "info": "hey hey hey",
        "category": "ChatGPT",
        "in": [
            {
                "x": 220,
                "y": 80,
                "wires": [
                    {
                        "id": "b636b9ea5bf45435"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 360,
                "wires": [
                    {
                        "id": "d5f444de1f8ceabb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "auto4",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 420,
            "y": 80,
            "wires": [
                {
                    "id": "056755aef7aa376e",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "02409038fd9362ee",
        "type": "subflow",
        "name": "step by step",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "587cc92797acd5f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 180,
                "wires": [
                    {
                        "id": "4c18e4ef1378f85f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 320,
            "y": 40,
            "wires": [
                {
                    "id": "b9ef7df646a61456",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "520a10812173e701",
        "type": "subflow",
        "name": "stash",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "clear",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "50df1246bdaf5119",
        "type": "subflow",
        "name": "smartcoder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "7cfc8986c5d0b0e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 560,
                "wires": [
                    {
                        "id": "1eaa0d485c0ce940",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 40,
            "wires": [
                {
                    "id": "ef3a21ae34f6475f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7d91a580a2c7c19",
        "type": "subflow",
        "name": "codeblocks",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "blockTypes",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "f8d5a5a4f2b87c52",
        "type": "subflow",
        "name": "flow",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 120,
                "y": 340,
                "wires": [
                    {
                        "id": "95f92e2896b1f816"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 540,
                "wires": [
                    {
                        "id": "6f3eb41d26f826f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "inputLabels": [
            "flow to check"
        ],
        "outputLabels": [
            "valid flow"
        ],
        "status": {
            "x": 420,
            "y": 60,
            "wires": [
                {
                    "id": "9d93e67707347e32",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1254546b0e9fb57c",
        "type": "subflow",
        "name": "bundle formatting",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 260,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "f6dd154f310aa615",
        "type": "subflow",
        "name": "engineer",
        "info": "",
        "category": "persona prompt",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "9f31d45ecb1d3482",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "schema",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "63dba49296c3a9e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "cf072eee9e78f126",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "13d4ac7b7c9898ae",
        "type": "subflow",
        "name": "codeblock",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "a5f18db0d45889f2",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "format prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7da9bb553d44f56a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "bb67c6f583a80cc4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "f16c08b0c74d892d",
        "type": "subflow",
        "name": "bundle prompt",
        "info": "",
        "category": "ChatGPT",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red-dashboard/ui_toast.png"
    },
    {
        "id": "b53b3b7e24a3e4e7",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "coders",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "15470b359beaf8ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 320,
                "wires": [
                    {
                        "id": "8b97ebde3ffd9ecc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "str",
                "value": "3"
            }
        ],
        "meta": {
            "module": "gpt-subflows",
            "version": "0.0.1"
        },
        "color": "#DDAA99",
        "status": {
            "x": 280,
            "y": 40,
            "wires": [
                {
                    "id": "f89c539d2436d4b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "3624ea24a7bdeaa4",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "review prompt",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "76bd320aab4ecae2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8843d7f92416211de9ebb963ff4ce28125932878",
        "type": "subflow",
        "name": "Transform nodes into subflows",
        "info": "\n|------|------|\n|test  |stuff |\n|------|------|",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 220,
                "wires": [
                    {
                        "id": "d0475e52f2f9d8e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Node List"
        ],
        "outputLabels": [
            "Subflows"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "07ae0da70cee4ba6",
        "type": "function",
        "z": "d295481a52b8fd83",
        "name": "function 1",
        "func": "msg.history = [msg.history[env.get('start')],msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "40226d5093552176",
        "type": "function",
        "z": "a25be0e127fc9e24",
        "name": "pop",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nlet depth = env.get('depth')\n\nwhile (depth){\n    const stash = msg.stash[key].pop()\n    if (env.get('apply')){\n        msg[key] = stash;\n    }\n    // @ts-ignore\n    depth--;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ffdcd61d.64da38",
        "type": "function",
        "z": "f9e0ec91.e767e",
        "name": "minify-json",
        "func": "const inputList = Array.isArray(msg.history) ? msg.history : [];\n\ninputList.forEach((item) => {\n  item.content = item.content.replace(/```.*\\n([\\s\\S]*?)\\n```/g, (match, codeBlock) => {\n      try {\n          const regex = /(\\n|\\\\n|\\r)\\s*/g; // note the 'g' flag for global replacement\n          return '```json\\n' + codeBlock.replace(regex, ''); + '\\n```';\n      } catch (error) {\n          return match;\n      }\n  });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "056755aef7aa376e",
        "type": "status",
        "z": "237429fb2a5a7712",
        "name": "",
        "scope": null,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5d459fc8-eec7-4ace-94e5-b653c47e5061",
        "type": "function",
        "z": "237429fb2a5a7712",
        "name": "ensure token headroom",
        "func": "const encode = gpt3Encoder.encode;\nmsg.topic = msg.topic || 'turbo';\nif (!msg.max_tokens) {\n    let sum = (msg.history || []).filter(e => e).reduce((acc, cur) => acc + encode(cur.content).length, 0);\n    sum += encode(msg.payload).length;\n    sum += 100; // give the encoder some wiggle room\n    if (env.get('auto4')\n    && (msg.topic !== 'gpt4') \n    // @ts-ignore\n    && (4096 - sum < (msg.min_tokens || 0))) {\n        msg.topic = 'gpt4'\n    }\n\n    if (env.get('auto4')\n    && (msg.topic == 'gpt4')\n    && (4096 - sum > (msg.min_tokens || 0))){\n        msg.topic = 'turbo';\n    }\n    \n    msg.max_tokens = ((msg.topic === 'gpt4') ? 8192 : 4096) - sum;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "0e8a88234ef86bb0"
            ]
        ]
    },
    {
        "id": "d2ee1fb0b75e93b6",
        "type": "subflow:f9e0ec91.e767e",
        "z": "237429fb2a5a7712",
        "name": "minify JSON in history",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "2d60fcbd28eb92c7"
            ]
        ]
    },
    {
        "id": "2d60fcbd28eb92c7",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "clear max_tokens",
        "rules": [
            {
                "t": "delete",
                "p": "max_tokens",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 280,
        "wires": [
            [
                "d5f444de1f8ceabb"
            ]
        ]
    },
    {
        "id": "b636b9ea5bf45435",
        "type": "subflow:520a10812173e701",
        "z": "237429fb2a5a7712",
        "name": "stash topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "5d459fc8-eec7-4ace-94e5-b653c47e5061"
            ]
        ]
    },
    {
        "id": "d5f444de1f8ceabb",
        "type": "subflow:a25be0e127fc9e24",
        "z": "237429fb2a5a7712",
        "name": "restore topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "a8355ad2d0e207b0",
        "type": "debug",
        "z": "237429fb2a5a7712",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "eee38431b18a000c",
        "type": "catch",
        "z": "237429fb2a5a7712",
        "name": "",
        "scope": [
            "1d0773bcf3416404"
        ],
        "uncaught": false,
        "x": 90,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0e8a88234ef86bb0",
        "type": "link call",
        "z": "237429fb2a5a7712",
        "name": "gpt queue",
        "links": [
            "f2342d49916a4e23"
        ],
        "linkType": "static",
        "timeout": "3600",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "d2ee1fb0b75e93b6"
            ]
        ]
    },
    {
        "id": "587cc92797acd5f3",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "last line",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "94270be7a7e81ed1"
            ]
        ]
    },
    {
        "id": "94270be7a7e81ed1",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "02498ebad85fca04"
            ]
        ]
    },
    {
        "id": "4c18e4ef1378f85f",
        "type": "subflow:d295481a52b8fd83",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc85a1ac4b1b979e",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "bundle",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "now put it all together according to the original question.\n\nbe sure to obey the formatting rules.",
        "output": "str",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "5392474c6ec89e72"
            ]
        ]
    },
    {
        "id": "02498ebad85fca04",
        "type": "switch",
        "z": "02409038fd9362ee",
        "name": "bundle?",
        "property": "bundle",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "bc85a1ac4b1b979e"
            ],
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "5392474c6ec89e72",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "b9ef7df646a61456",
        "type": "status",
        "z": "02409038fd9362ee",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dd186aa6a265fc5d",
        "type": "function",
        "z": "520a10812173e701",
        "name": "stash key value ",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nmsg.stash[key].push(JSON.parse(JSON.stringify(msg[key] || '')))\nif (env.get('clear')) {\n    msg[key] = undefined;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "31d7c39f9a6c8c97",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "merge answers",
        "func": "msg.history = [msg.history[0], msg.history[1]]\n\nmsg.history[1].content = `\nhere are ${msg.payload.length} possible solutions:\n${msg.payload.map((t, i) => `\n---${i} START---\n${t}\n---${i} END---\n`).join('\\n')}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "b446b41f8155ed4f"
            ]
        ]
    },
    {
        "id": "83096e44fc2c289e",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "review",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert code reviewer.\n\nThe code above has yet to be run.\n\n1 List the issues with each option, ranking each by severity focus on:\n1.1 problems that may prevent it from running.\n1.2 failures to deliver requested functionality.\n2 List what each option gets right, and which takes the overall best approach.\n3 Answer the following:\n{{review}}\n\nFinally, provide a synthesized solution.\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "2fba30a10931ca0c"
            ]
        ]
    },
    {
        "id": "189d162c7a1def8e",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "copy",
        "func": "const num_copies = env.get(\"num_copies\") || 1;\nconst copies = [];\nfor(let i = 0; i < num_copies; i++){\n    copies.push(msg.payload);\n}\n\nmsg.payload = copies;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "95fe1a4f7ccf06fb"
            ]
        ]
    },
    {
        "id": "95fe1a4f7ccf06fb",
        "type": "split",
        "z": "50df1246bdaf5119",
        "name": "split copies",
        "splt": "",
        "spltType": "msg",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "4604e40b24b33cb3"
            ]
        ]
    },
    {
        "id": "0e3ce1809b54fad7",
        "type": "join",
        "z": "50df1246bdaf5119",
        "name": "join copies",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "31d7c39f9a6c8c97"
            ]
        ]
    },
    {
        "id": "ef3a21ae34f6475f",
        "type": "status",
        "z": "50df1246bdaf5119",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1c0f8158f5a82cc5",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "schema failure",
        "scope": [
            "86c1b1c593519bdf"
        ],
        "uncaught": false,
        "x": 360,
        "y": 200,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "ec40afea20b4c218",
        "type": "catch",
        "z": "50df1246bdaf5119",
        "name": "empty/multiple",
        "scope": [
            "eef683f2fb7c7a34"
        ],
        "uncaught": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b34ce9b36761fd82"
            ]
        ]
    },
    {
        "id": "b34ce9b36761fd82",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{{error.message}}}",
        "output": "str",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "8e7320419df91165"
            ]
        ]
    },
    {
        "id": "8e7320419df91165",
        "type": "subflow:520a10812173e701",
        "z": "50df1246bdaf5119",
        "name": "stash temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "165d1423d6343a0a"
            ]
        ]
    },
    {
        "id": "165d1423d6343a0a",
        "type": "change",
        "z": "50df1246bdaf5119",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 240,
        "wires": [
            [
                "0b7031b9cee904dc"
            ]
        ]
    },
    {
        "id": "0b7031b9cee904dc",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "96069e8a8601f3f2"
            ]
        ]
    },
    {
        "id": "96069e8a8601f3f2",
        "type": "subflow:a25be0e127fc9e24",
        "z": "50df1246bdaf5119",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "bde788de03976b97"
            ]
        ]
    },
    {
        "id": "bde788de03976b97",
        "type": "subflow:d295481a52b8fd83",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "447868e0429fdc8c",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "50df1246bdaf5119",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "eef683f2fb7c7a34"
            ]
        ]
    },
    {
        "id": "eef683f2fb7c7a34",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "get result",
        "func": "console.log('parsed code:', msg.payload)\nmsg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nif (msg.payload.length > 1){\n  throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')\n}\n\nif (msg.payload.length < 1){\n  throw new Error(`no code blocks detected, please obey the formatting instructions:\\n${msg.format}`)\n}\n\nmsg.payload = msg.payload[0].content;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "393f19cb21285e5c"
            ]
        ]
    },
    {
        "id": "393f19cb21285e5c",
        "type": "switch",
        "z": "50df1246bdaf5119",
        "name": "",
        "property": "schema",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 480,
        "wires": [
            [
                "86c1b1c593519bdf"
            ],
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "86c1b1c593519bdf",
        "type": "json",
        "z": "50df1246bdaf5119",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "1eaa0d485c0ce940"
            ]
        ]
    },
    {
        "id": "c24941818a42ca98",
        "type": "subflow:f16c08b0c74d892d",
        "z": "50df1246bdaf5119",
        "name": "bundle prompt",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "189d162c7a1def8e"
            ]
        ]
    },
    {
        "id": "4c1e24c203e0aef7",
        "type": "subflow:1254546b0e9fb57c",
        "z": "50df1246bdaf5119",
        "name": "wrap format",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c24941818a42ca98"
            ]
        ]
    },
    {
        "id": "7cfc8986c5d0b0e2",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "4c1e24c203e0aef7"
            ]
        ]
    },
    {
        "id": "1eaa0d485c0ce940",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "test",
        "func": "if (!msg.test){\n    return msg;\n}\n\nmsg.test(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "77b5dc952d57e266",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "smartGPTish",
        "info": "this column is a coding specific variant of the smartgpt approach",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "6f31904da5faaece",
        "type": "comment",
        "z": "50df1246bdaf5119",
        "name": "parse errors",
        "info": "these are two variants of a parse error:\n\nempty/multiple means we didn't get a markdown code block, or we got too many to be sure which is what we're after. ",
        "x": 350,
        "y": 100,
        "wires": []
    },
    {
        "id": "4604e40b24b33cb3",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "0e3ce1809b54fad7"
            ]
        ]
    },
    {
        "id": "2fba30a10931ca0c",
        "type": "subflow:237429fb2a5a7712",
        "z": "50df1246bdaf5119",
        "name": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "447868e0429fdc8c"
            ]
        ]
    },
    {
        "id": "b446b41f8155ed4f",
        "type": "subflow:f9e0ec91.e767e",
        "z": "50df1246bdaf5119",
        "name": "minify JSON in history",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "83096e44fc2c289e"
            ]
        ]
    },
    {
        "id": "bc9b2bca5d9d9220",
        "type": "function",
        "z": "b7d91a580a2c7c19",
        "name": "Extract Code Blocks",
        "func": "function extractCodeBlocks(text, blockTypes) {\n  const results = [];\n  const allBlocks = !blockTypes || blockTypes.length === 0;\n\n  let codeBlockRegex;\n  if (allBlocks) {\n    codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)\\n```/g;\n  } else {\n    const regexStr = blockTypes.map((type) => type).join('|');\n    codeBlockRegex = new RegExp(`\\`\\`\\`(${regexStr})\\n([\\\\s\\\\S]*?)\\\\n\\`\\`\\``, 'g');\n    // const jsonBlockRegex = new RegExp(`\\`\\`\\`((json))\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'g');\n    // console.log('manual match?', jsonBlockRegex.exec(text))\n  }\n\n  let match;\n  while ((match = codeBlockRegex.exec(text)) !== null) {\n    // console.log('got match', match);\n    const type = match[1];\n    const content = match[2];\n    results.push({ type, content });\n  }\n\n  return results;\n}\n\nconst text = msg.payload;\n\nconst blockTypes = (env.get('blockTypes') || '').split(',').filter(t => t);\n// console.log('extract', text, blockTypes)\nmsg.payload = extractCodeBlocks(text, blockTypes);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9d93e67707347e32",
        "type": "status",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "95f92e2896b1f816",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse json codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "869689982e74b4dc"
            ]
        ]
    },
    {
        "id": "869689982e74b4dc",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "get result",
        "func": "msg.payload = msg.payload\n                .filter(({type}) => ['json','javascript'].indexOf(type) >= 0)\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nconst potentials = msg.payload\nmsg.payload = null;\nfor (const {content} of potentials){\n  try {\n    const obj = JSON.parse(content)\n    if (Array.isArray(obj) && obj.every(v => v.id && v.type)){\n      // is likely a node-red flow\n      if (msg.payload) {\n        throw new Error('multiple potential node-red flows detected, we need exactly one.')\n      } else {\n        msg.payload = JSON.stringify(obj)\n      }\n    }\n  } catch (e) {\n    //ignore\n  }\n}\n\nif (!msg.payload){\n  throw new Error('no valid node-red flows detected, remember: must be inside a github flavored markdown block and follow the JSON schema')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "b2728fc75e03f928"
            ]
        ]
    },
    {
        "id": "25e9760c313f1739",
        "type": "json",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "6f3eb41d26f826f2"
            ]
        ]
    },
    {
        "id": "2c5ea07fe592c94f",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "fix error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response was rejected for the following reason:\n\n{{error.message}}\n\nremember, you need to follow these formatting instructions:\n\n{{format}}",
        "output": "str",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "90655d2d5bb817cc"
            ]
        ]
    },
    {
        "id": "06989b788e021dca",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "empty/multiple",
        "scope": [
            "869689982e74b4dc"
        ],
        "uncaught": false,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "719bb2e65b5f411f",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "schema failure",
        "scope": [
            "25e9760c313f1739"
        ],
        "uncaught": false,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "b2728fc75e03f928",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "f8d5a5a4f2b87c52",
        "name": "set node-red schema",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "25e9760c313f1739"
            ]
        ]
    },
    {
        "id": "64d95ba33b6a42ce",
        "type": "subflow:237429fb2a5a7712",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "bb659029013a4888"
            ]
        ]
    },
    {
        "id": "384314168ce8ee86",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "temp 0.3",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "64d95ba33b6a42ce"
            ]
        ]
    },
    {
        "id": "6f3eb41d26f826f2",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "clear schema",
        "rules": [
            {
                "t": "delete",
                "p": "schema",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "schemaString",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "912fae5cd133c953",
        "type": "subflow:d295481a52b8fd83",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "95f92e2896b1f816"
            ]
        ]
    },
    {
        "id": "90655d2d5bb817cc",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash temp",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "bb659029013a4888",
        "type": "subflow:a25be0e127fc9e24",
        "z": "f8d5a5a4f2b87c52",
        "name": "restore temp",
        "env": [
            {
                "name": "key",
                "value": "temperature",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "912fae5cd133c953"
            ]
        ]
    },
    {
        "id": "12256771ca410bc7",
        "type": "template",
        "z": "1254546b0e9fb57c",
        "name": "format meta instructions",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response will follow these formatting rules\n\n{{{format}}}\n\n{{#schemaString}}\nAdditionally, here's a JSON schema reference you will conform to:\n{{{schemaString}}}\n{{/schemaString}}",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d973d3ca1dc6855f",
        "type": "template",
        "z": "f6dd154f310aa615",
        "name": "expert engineer",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert {{language}} software engineer at the top of your game.\nYou are known for writing clean, clear code.\n{{persona}}",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "287a8289c0d9a5d0",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f6dd154f310aa615",
        "name": "",
        "x": 220,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63dba49296c3a9e4",
        "type": "template",
        "z": "9f31d45ecb1d3482",
        "name": "set validation schema",
        "field": "schema",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\"id\", \"type\"],\n    \"properties\": {\n      \"nodes\": {\n        \"not\": {\n          \"type\": \"array\"\n        }\n      },\n      \"status\": {\n        \"not\":{\n          \"type\": \"object\"\n        }\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"info\": {\n        \"type\": \"string\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"in\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"wires\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"out\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"port\": {\n                    \"type\": \"number\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"env\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"type\": {\n              \"type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"meta\": {\n        \"type\": \"object\",\n        \"required\": [],\n        \"properties\": {}\n      },\n      \"color\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
        "output": "json",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cf072eee9e78f126"
            ]
        ]
    },
    {
        "id": "cf072eee9e78f126",
        "type": "change",
        "z": "9f31d45ecb1d3482",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schemaString",
                "pt": "msg",
                "to": "$string(schema)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "31d816170cfa7a8f",
        "type": "template",
        "z": "13d4ac7b7c9898ae",
        "name": "codeblock",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Put the primary output inside a github flavored markdown code block, with an appropriate language label\n\n{{{format}}}",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb67c6f583a80cc4",
        "type": "template",
        "z": "a5f18db0d45889f2",
        "name": "flow",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your output will be a valid, parseable, node-red array, suitable for import:\nhere's an example:\n\n```json\n[{\"id\":\"13d4ac7b7c9898ae\",\"type\":\"subflow\",\"name\":\"codeblock\",\"info\":\"\",\"category\":\"format\",\"in\":[{\"x\":80,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\"}]}],\"out\":[{\"x\":300,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\",\"port\":0}]}],\"env\":[],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-archive\"},{\"id\":\"31d816170cfa7a8f\",\"type\":\"template\",\"z\":\"13d4ac7b7c9898ae\",\"name\":\"codeblock\",\"field\":\"format\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Put the primary output inside a github flavored markdown code block, with an appropriate language label\\n\\n{{{format}}}\",\"output\":\"str\",\"x\":190,\"y\":100,\"wires\":[[]]}]\n```",
        "output": "str",
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7da9bb553d44f56a",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "bb67c6f583a80cc4"
            ]
        ]
    },
    {
        "id": "c306926b9536fe15",
        "type": "template",
        "z": "f16c08b0c74d892d",
        "name": "set task to payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\n{{{requirements}}}\n\n{{{format}}}\n\nPlease do your best to provide a complete solution.\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f89c539d2436d4b8",
        "type": "status",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1a48d7a00270d882",
        "type": "subflow:a5f18db0d45889f2",
        "z": "b53b3b7e24a3e4e7",
        "name": "set format",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "69979c46ebfcda56"
            ]
        ]
    },
    {
        "id": "69c4727b24bef714",
        "type": "subflow:f6dd154f310aa615",
        "z": "b53b3b7e24a3e4e7",
        "name": "set persona",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "1a48d7a00270d882"
            ]
        ]
    },
    {
        "id": "8b97ebde3ffd9ecc",
        "type": "subflow:50df1246bdaf5119",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "env": [
            {
                "name": "num_copies",
                "value": "num_copies",
                "type": "env"
            },
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "15470b359beaf8ad",
        "type": "change",
        "z": "b53b3b7e24a3e4e7",
        "name": "set language",
        "rules": [
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "node-red and javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "69c4727b24bef714"
            ]
        ]
    },
    {
        "id": "006a7cb1b7f3bec3",
        "type": "comment",
        "z": "b53b3b7e24a3e4e7",
        "name": "TODO: put this column inside smartcoder",
        "info": "most of this right hand column should be refactored into \"smartcoder\" and be paramaterized.",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "69979c46ebfcda56",
        "type": "template",
        "z": "b53b3b7e24a3e4e7",
        "name": "set review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "8b97ebde3ffd9ecc"
            ]
        ]
    },
    {
        "id": "76bd320aab4ecae2",
        "type": "template",
        "z": "3624ea24a7bdeaa4",
        "name": "node-red review",
        "field": "review",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The answer to the following should be yes.\nDoes the wiring appear functional?\nDoes the wiring avoid circular routing?\nAre there any unreachable nodes?\nDoes it obey the JSON schema?\nAre subflows categorized appropriately?\n",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d0475e52f2f9d8e9",
        "type": "function",
        "z": "8843d7f92416211de9ebb963ff4ce28125932878",
        "name": "transform nodes",
        "func": "var subflows = msg.payload.reduce(function(acc, node) {\n    if (node.type === \"subflow\") {\n        acc[node.id] = { id: node.id, nodes: [node] };\n    } else if (node.z && acc[node.z]) {\n        acc[node.z].nodes.push(node);\n    }\n    return acc;\n}, {});\n\nvar result = Object.values(subflows).map(\n    function(subflow) {\n        return {id: subflow.id,type: \"subflow\",nodes: JSON.parse(JSON.stringify(subflow.nodes))};\n    }\n);\nmsg.payload = JSON.stringify(result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "414ddee1287efb66",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "941765e8bb2c32d6",
        "name": "flowcoder",
        "env": [
            {
                "name": "num_copies",
                "value": "3",
                "type": "num"
            }
        ],
        "x": 120,
        "y": 240,
        "wires": [
            [
                "99b359093fa5ee99"
            ]
        ]
    },
    {
        "id": "733c94970d337f9c",
        "type": "inject",
        "z": "941765e8bb2c32d6",
        "name": "set task props",
        "props": [
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.7",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a701ddb8190d147a"
            ]
        ]
    },
    {
        "id": "c13f6114b4ebbbcc",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I need a node-red subflow according to the following Specification:\n\nmsg.payload starts as an array of node-red node objects with the following properties:\n\nid,\ntype,\nz (optional)\n\nI want this to be transformed into an array of new objects, one for each 'subflow' type in the incoming message.\n\nthe new objects should have:\nid: the id of the subflow\nnodes: a deep clone of the subflow node, and all nodes with the subflows 'id' as their 'z' property\n\ntype: 'subflow'\n\nplease provide me with a valid, syntactically correct JSON string that I can use to import the subflow above",
        "output": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "99b359093fa5ee99",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 120,
        "y": 280,
        "wires": []
    },
    {
        "id": "a701ddb8190d147a",
        "type": "subflow:3624ea24a7bdeaa4",
        "z": "941765e8bb2c32d6",
        "name": "set node-red review",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "c13f6114b4ebbbcc"
            ]
        ]
    },
    {
        "id": "1f104ae03f736fc7",
        "type": "subflow:8843d7f92416211de9ebb963ff4ce28125932878",
        "z": "941765e8bb2c32d6",
        "name": "",
        "x": 210,
        "y": 620,
        "wires": [
            [
                "d97a19209a785803"
            ]
        ]
    },
    {
        "id": "b433c835d854e271",
        "type": "file in",
        "z": "941765e8bb2c32d6",
        "name": "",
        "filename": "/data/projects/red-gpt-project/flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 240,
        "y": 460,
        "wires": [
            [
                "3fb29f9dbf599fa0"
            ]
        ]
    },
    {
        "id": "3fb29f9dbf599fa0",
        "type": "json",
        "z": "941765e8bb2c32d6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "bf4826fb44e15c5e"
            ]
        ]
    },
    {
        "id": "3fc0a9eb4623c177",
        "type": "inject",
        "z": "941765e8bb2c32d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "b433c835d854e271"
            ]
        ]
    },
    {
        "id": "d97a19209a785803",
        "type": "json",
        "z": "941765e8bb2c32d6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 130,
        "y": 660,
        "wires": [
            [
                "6ee86c3a03682354"
            ]
        ]
    },
    {
        "id": "6ee86c3a03682354",
        "type": "split",
        "z": "941765e8bb2c32d6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "761e9408e6850b23"
            ]
        ]
    },
    {
        "id": "3493294fda08df95",
        "type": "join",
        "z": "941765e8bb2c32d6",
        "name": "all nodes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 480,
        "y": 940,
        "wires": [
            [
                "5db7cfe60d82dc48"
            ]
        ]
    },
    {
        "id": "761e9408e6850b23",
        "type": "function",
        "z": "941765e8bb2c32d6",
        "name": "sort eligible for doc",
        "func": "if (msg.payload.nodes.filter(node => node.id === msg.payload.id).pop().info) {\n    return [msg, null];\n}\n\nconst undocd = msg.payload.nodes.filter(node => {\n    if (!node.type.startsWith('subflow:')) return false;\n\n    const z = node.type.split(':')[1]\n    const subflow = msg.flows.filter(node => node.id === z).pop()\n    if (subflow.info) return false;\n    return true;\n})\n\n\n\nif (undocd.length){\n    return [null, msg];\n}\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 740,
        "wires": [
            [
                "3493294fda08df95",
                "3ab40e04649ddf45",
                "dae7e91edc72c83d"
            ],
            [
                "e5e5952cd49e64d8",
                "3493294fda08df95"
            ]
        ]
    },
    {
        "id": "bf4826fb44e15c5e",
        "type": "change",
        "z": "941765e8bb2c32d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "flows",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "69961b662c31c241"
            ]
        ]
    },
    {
        "id": "3ab40e04649ddf45",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "eligible",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 160,
        "y": 800,
        "wires": []
    },
    {
        "id": "e5e5952cd49e64d8",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "ineligible",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 160,
        "y": 840,
        "wires": []
    },
    {
        "id": "17c4c2465ba4c355",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "documentation",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nplease analyze it and respond with a markdown within a codeblock, describing the functionality of the subflow\n\nuse the idiomatic node-red documentation style.",
        "output": "str",
        "x": 500,
        "y": 740,
        "wires": [
            [
                "2656bcf5cad4e16b"
            ]
        ]
    },
    {
        "id": "dae7e91edc72c83d",
        "type": "json",
        "z": "941765e8bb2c32d6",
        "name": "",
        "property": "payload.nodes",
        "action": "str",
        "pretty": false,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "5412bb9f8505ec2d"
            ]
        ]
    },
    {
        "id": "839a598e1ddd08d3",
        "type": "subflow:237429fb2a5a7712",
        "z": "941765e8bb2c32d6",
        "name": "",
        "x": 480,
        "y": 820,
        "wires": [
            [
                "13b3fd70b0e66417",
                "145ec9df0675db99"
            ]
        ]
    },
    {
        "id": "13b3fd70b0e66417",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "docs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "5db7cfe60d82dc48",
        "type": "debug",
        "z": "941765e8bb2c32d6",
        "name": "done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 980,
        "wires": []
    },
    {
        "id": "2656bcf5cad4e16b",
        "type": "delay",
        "z": "941765e8bb2c32d6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "839a598e1ddd08d3"
            ]
        ]
    },
    {
        "id": "5412bb9f8505ec2d",
        "type": "change",
        "z": "941765e8bb2c32d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subflow",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.nodes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 700,
        "wires": [
            [
                "16e7fb7b2bc1fd73",
                "17c4c2465ba4c355",
                "1c58af75659287c4"
            ]
        ]
    },
    {
        "id": "16e7fb7b2bc1fd73",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "schemas",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nplease analyze it and respond with a draft-06 JSON schema that represents the expected input message format",
        "output": "str",
        "x": 680,
        "y": 740,
        "wires": [
            [
                "2656bcf5cad4e16b"
            ]
        ]
    },
    {
        "id": "145ec9df0675db99",
        "type": "join",
        "z": "941765e8bb2c32d6",
        "name": "docs and schemas",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 510,
        "y": 880,
        "wires": [
            [
                "3493294fda08df95"
            ]
        ]
    },
    {
        "id": "69961b662c31c241",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "941765e8bb2c32d6",
        "name": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "1f104ae03f736fc7"
            ]
        ]
    },
    {
        "id": "1c58af75659287c4",
        "type": "template",
        "z": "941765e8bb2c32d6",
        "name": "schemas",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "I have the following node-red subflow:\n\n```json\n{{{payload}}}\n```\n\nplease analyze it and respond with a draft-06 JSON schema that represents the expected input message format",
        "output": "str",
        "x": 840,
        "y": 740,
        "wires": [
            [
                "2656bcf5cad4e16b"
            ]
        ]
    },
    {
        "id": "ffc06a5a5bbea58f",
        "type": "batch",
        "z": "941765e8bb2c32d6",
        "name": "",
        "mode": "count",
        "count": 10,
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [
            {
                "topic": ""
            }
        ],
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8c1cba224d949d09",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "gpt4 limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "70",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ]
    },
    {
        "id": "4b735d4be9323117",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "turbo limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "70",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 140,
        "wires": [
            [
                "1d0773bcf3416404",
                "56380579ca248c30"
            ]
        ]
    },
    {
        "id": "b98332fdc0290246",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpt4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turbo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "8c1cba224d949d09"
            ],
            [
                "4b735d4be9323117"
            ]
        ]
    },
    {
        "id": "f2342d49916a4e23",
        "type": "link in",
        "z": "e961334cde89144c",
        "name": "link in 1",
        "links": [],
        "x": 65,
        "y": 100,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "9f4d0154bcaa5bdb",
        "type": "link out",
        "z": "e961334cde89144c",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 615,
        "y": 200,
        "wires": []
    },
    {
        "id": "1d0773bcf3416404",
        "type": "chatgpt",
        "z": "e961334cde89144c",
        "name": "",
        "Organization": " ",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "56380579ca248c30",
                "9f4d0154bcaa5bdb"
            ]
        ]
    },
    {
        "id": "09ae223c8021bfb1",
        "type": "catch",
        "z": "e961334cde89144c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 300,
        "y": 40,
        "wires": [
            [
                "63e981e00783ca8a"
            ]
        ]
    },
    {
        "id": "25c4aeea71cf6223",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "gpt4 limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 80,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "16692009bdaac826",
        "type": "delay",
        "z": "e961334cde89144c",
        "name": "turbo limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "5",
        "randomLast": "20",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 80,
        "wires": [
            [
                "b98332fdc0290246"
            ]
        ]
    },
    {
        "id": "63e981e00783ca8a",
        "type": "switch",
        "z": "e961334cde89144c",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpt4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turbo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 40,
        "wires": [
            [
                "25c4aeea71cf6223"
            ],
            [
                "16692009bdaac826"
            ]
        ]
    },
    {
        "id": "56380579ca248c30",
        "type": "file",
        "z": "e961334cde89144c",
        "name": "",
        "filename": "/data/gptlog.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 480,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f4f6fa24ca217587",
        "type": "json",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 170,
        "y": 280,
        "wires": [
            [
                "ed65351c21590e04"
            ]
        ]
    },
    {
        "id": "ed65351c21590e04",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "requirements",
                "pt": "msg",
                "to": "payload.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "turbo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "language",
                "pt": "msg",
                "to": "javascript",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "task_id",
                "pt": "msg",
                "to": "payload.task_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "testString",
                "pt": "msg",
                "to": "payload.test",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "min_tokens",
                "pt": "msg",
                "to": "2000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 320,
        "wires": [
            [
                "8d53a1abefddfbf2"
            ]
        ]
    },
    {
        "id": "8d53a1abefddfbf2",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "wrap requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "here are the requirements for a function i need you to write in javascript:\n\n{{{requirements}}} //...\n\nmake sure that you give me the whole function, and that the name matches.",
        "output": "str",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "ec0b257dab9ab827"
            ]
        ]
    },
    {
        "id": "922590827a20da6a",
        "type": "subflow:50df1246bdaf5119",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 410,
        "y": 400,
        "wires": [
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62612d04c38cb1a4",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "test",
        "func": "console.assert = (bool) => { if (!bool) throw new Error('assert!') }\n\ntry{\n    console.log('payload:', msg.payload)\n    console.log('test:', msg.testString)\n    const test = new Function('console',msg.payload + '\\n' + msg.testString)\n    test(console)\n    msg.pass = 1;\n} catch (e) {\n    msg.testError = e.message;\n    msg.pass = 0;\n}\n\nmsg.payload = `${msg.flow || 'chatgpt'},${msg.topic},${msg.pass}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "b8010df720742aef"
            ]
        ]
    },
    {
        "id": "b8010df720742aef",
        "type": "join",
        "z": "f297cec495c6b8be",
        "name": "sum test passes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "$A + pass",
        "reduceInit": "0",
        "reduceInitType": "num",
        "reduceFixup": "$A/$N",
        "x": 760,
        "y": 440,
        "wires": [
            [
                "65b9251080cb6b42"
            ]
        ]
    },
    {
        "id": "183a83919e31ea2f",
        "type": "template",
        "z": "f297cec495c6b8be",
        "name": "humaneval",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\"task_id\": \"JavaScript/19\", \"prompt\": \"/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\\n  Return the string with numbers sorted from smallest to largest\\n  >>> sortNumbers('three one five')\\n  'one three five'\\n  */\\nconst sortNumbers = (numbers) => {\\n\", \"canonical_solution\": \"  const value_map = {\\n    'zero': 0,\\n    'one': 1,\\n    'two': 2,\\n    'three': 3,\\n    'four': 4,\\n    'five': 5,\\n    'six': 6,\\n    'seven': 7,\\n    'eight': 8,\\n    'nine': 9\\n  };\\n  return numbers.split(' ')\\n          .filter(x => x != '')\\n          .sort((a, b) => value_map[a] - value_map[b])\\n          .join(' ');\\n}\\n\\n\", \"test\": \"const testSortNumbers = () => {\\n  console.assert(sortNumbers('') === '')\\n  console.assert(sortNumbers('three') === 'three')\\n  console.assert(sortNumbers('three five nine') === 'three five nine')\\n  console.assert(\\n    sortNumbers(\\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\\n  )\\n  console.assert(\\n    sortNumbers(\\n      'six five four three two one zero') === 'zero one two three four five six'\\n  )\\n}\\n\\ntestSortNumbers()\\n\", \"declaration\": \"\\nconst sortNumbers = (numbers) => {\\n\", \"example_test\": \"const testSortNumbers = () => {\\n  console.assert(sortNumbers('three one five') === 'one three five')\\n}\\ntestSortNumbers()\\n\"}\n{\"task_id\": \"JavaScript/20\", \"prompt\": \"/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\\n  other and return them in order (smaller number, larger number).\\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\\n  (2.0, 2.2)\\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\\n  (2.0, 2.0)\\n  */\\nconst findClosestElements = (numbers) => {\\n\", \"canonical_solution\": \"  var closest_pair, distance;\\n  for (let i = 0; i < numbers.length; i++)\\n    for (let j = 0; j < numbers.length; j++)\\n      if (i != j) {\\n        let a = numbers[i], b = numbers[j];\\n        if (distance == null) {\\n          distance = Math.abs(a - b);\\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\\n        } else {\\n          let new_distance = Math.abs(a - b);\\n          if (new_distance < distance) {\\n            distance = new_distance;\\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\\n          }\\n        }\\n      }\\n  return closest_pair;\\n}\\n\\n\", \"test\": \"const testFindClosestElements = () => {\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([3.9, 4.0])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\\n      JSON.stringify([5.0, 5.9])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([2.0, 2.2])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\\n      JSON.stringify([2.0, 2.0])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\\n      JSON.stringify([2.2, 3.1])\\n  )\\n}\\n\\ntestFindClosestElements()\\n\", \"declaration\": \"\\nconst findClosestElements = (numbers) => {\\n\", \"example_test\": \"const testFindClosestElements = () => {\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\\n      JSON.stringify([2.0, 2.2])\\n  )\\n  console.assert(\\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\\n      JSON.stringify([2.0, 2.0])\\n  )\\n}\\ntestFindClosestElements()\\n\"}\n{\"task_id\": \"JavaScript/21\", \"prompt\": \"/* Given list of numbers (of at least two elements), apply a linear transform to that list,\\n  such that the smallest number will become 0 and the largest will become 1\\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\\n  [0.0, 0.25, 0.5, 0.75, 1.0]\\n  */\\nconst rescaleToUnit = (numbers) => {\\n\", \"canonical_solution\": \"  var min_number = Math.min(...numbers);\\n  var max_number = Math.max(...numbers);\\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\\n}\\n\\n\", \"test\": \"const testRescaleToUnit = () => {\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\\n  )\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\\n  )\\n}\\n\\ntestRescaleToUnit()\\n\", \"declaration\": \"\\nconst rescaleToUnit = (numbers) => {\\n\", \"example_test\": \"const testRescaleToUnit = () => {\\n  console.assert(\\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\\n  )\\n}\\ntestRescaleToUnit()\\n\"}\n{\"task_id\": \"JavaScript/22\", \"prompt\": \"/* Filter given list of any python values only for integers\\n  >>> filterIntegers(['a', 3.14, 5])\\n  [5]\\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\\n  [1, 2, 3]\\n  */\\nconst filterIntegers = (values) => {\\n\", \"canonical_solution\": \"  return values.filter(x => Number.isInteger(x));\\n}\\n\\n\", \"test\": \"const testFilterIntegers = () => {\\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\\n      JSON.stringify([4, 9])\\n  )\\n  console.assert(\\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\\n      JSON.stringify([3, 3, 3])\\n  )\\n}\\n\\ntestFilterIntegers()\\n\", \"declaration\": \"\\nconst filterIntegers = (values) => {\\n\", \"example_test\": \"const testFilterIntegers = () => {\\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\\n  console.assert(\\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\\n      JSON.stringify([1,2,3])\\n  )\\n}\\ntestFilterIntegers()\\n\"}\n{\"task_id\": \"JavaScript/23\", \"prompt\": \"/* Return length of given string\\n  >>> strlen('')\\n  0\\n  >>> strlen('abc')\\n  3\\n  */\\nconst strlen = (string) => {\\n\", \"canonical_solution\": \"  return string.length;\\n}\\n\\n\", \"test\": \"const testStrlen = () => {\\n  console.assert(strlen('') === 0)\\n  console.assert(strlen('x') === 1)\\n  console.assert(strlen('asdasnakj') === 9)\\n}\\n\\ntestStrlen()\\n\", \"declaration\": \"\\nconst strlen = (string) => {\\n\", \"example_test\": \"const testStrlen = () => {\\n  console.assert(strlen('') === 0)\\n  console.assert(strlen('abc') === 3)\\n}\\ntestStrlen()\\n\"}\n{\"task_id\": \"JavaScript/24\", \"prompt\": \"/* For a given number n, find the largest number that divides n evenly, smaller than n\\n  >>> largestDivisor(15)\\n  5\\n  */\\nconst largestDivisor = (n) => {\\n\", \"canonical_solution\": \"  for (let i = n - 1; i >= 0; i--)\\n    if (n % i == 0)\\n      return i;\\n}\\n\\n\", \"test\": \"const testLargestDivisor = () => {\\n  console.assert(largestDivisor(3) === 1)\\n  console.assert(largestDivisor(7) === 1)\\n  console.assert(largestDivisor(10) === 5)\\n  console.assert(largestDivisor(100) === 50)\\n  console.assert(largestDivisor(49) === 7)\\n}\\n\\ntestLargestDivisor()\\n\", \"declaration\": \"\\nconst largestDivisor = (n) => {\\n\", \"example_test\": \"const testLargestDivisor = () => {\\n  console.assert(largestDivisor(15) === 5)\\n}\\ntestLargestDivisor()\\n\"}\n{\"task_id\": \"JavaScript/25\", \"prompt\": \"/* Return list of prime factors of given integer in the order from smallest to largest.\\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\\n  Input number should be equal to the product of all factors\\n  >>> factorize(8)\\n  [2, 2, 2]\\n  >>> factorize(25)\\n  [5, 5]\\n  >>> factorize(70)\\n  [2, 5, 7]\\n  */\\nconst factorize = (n) => {\\n\", \"canonical_solution\": \"  var fact = [], i = 2;\\n  while (i <= Math.sqrt(n) + 1) {\\n    if (n % i == 0) {\\n      fact.push(i);\\n      n = n / i;\\n    } else {\\n      i += 1;\\n    }\\n  }\\n\\n  if (n > 1)\\n    fact.push(n);\\n  return fact;\\n}\\n\\n\", \"test\": \"const testFactorize = () => {\\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\\n      JSON.stringify([3, 3, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\\n      JSON.stringify([3, 3, 3, 19, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\\n      JSON.stringify([3, 19, 19, 19])\\n  )\\n  console.assert(\\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\\n  )\\n}\\n\\ntestFactorize()\\n\", \"declaration\": \"\\nconst factorize = (n) => {\\n\", \"example_test\": \"const testFactorize = () => {\\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\\n  console.assert(\\n    JSON.stringify(factorize(70)) ===\\n      JSON.stringify([2,5,7])\\n  )\\n}\\ntestFactorize()\\n\"}\n{\"task_id\": \"JavaScript/26\", \"prompt\": \"/* From a list of integers, remove all elements that occur more than once.\\n  Keep order of elements left the same as in the input.\\n  >>> removeDuplicates([1, 2, 3, 2, 4])\\n  [1, 3, 4]\\n  */\\nconst removeDuplicates = (numbers) => {\\n\", \"canonical_solution\": \"  var dict = new Object();\\n  for (const num of numbers) {\\n    if (num in dict) {\\n      dict[num] += 1;\\n    } else {\\n      dict[num] = 1;\\n    }\\n  }\\n  return numbers.filter(x => dict[x] <= 1);\\n}\\n\\n\", \"test\": \"const testRemoveDuplicates = () => {\\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\\n      JSON.stringify([1, 2, 3, 4])\\n  )\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\\n      JSON.stringify([1, 4, 5])\\n  )\\n}\\n\\ntestRemoveDuplicates()\\n\", \"declaration\": \"\\nconst removeDuplicates = (numbers) => {\\n\", \"example_test\": \"const testRemoveDuplicates = () => {\\n  console.assert(\\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\\n      JSON.stringify([1,3, 4])\\n  )\\n}\\ntestRemoveDuplicates()\\n\"}\n{\"task_id\": \"JavaScript/27\", \"prompt\": \"/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\\n  >>> flipCase('Hello')\\n  'hELLO'\\n  */\\nconst flipCase = (string) => {\\n\", \"canonical_solution\": \"  return string.split('')\\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\\n          .join('');\\n}\\n\\n\", \"test\": \"const testFlipCase = () => {\\n  console.assert(flipCase('') === '')\\n  console.assert(flipCase('Hello!') === 'hELLO!')\\n  console.assert(\\n    flipCase(\\n      'These violent delights have violent ends') ===\\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\\n  )\\n}\\n\\ntestFlipCase()\\n\", \"declaration\": \"\\nconst flipCase = (string) => {\\n\", \"example_test\": \"const testFlipCase = () => {\\n  console.assert(flipCase('Hello') === 'hELLO')\\n}\\ntestFlipCase()\\n\"}\n{\"task_id\": \"JavaScript/28\", \"prompt\": \"/* Concatenate list of strings into a single string\\n  >>> concatenate([])\\n  ''\\n  >>> concatenate(['a', 'b', 'c'])\\n  'abc'\\n  */\\nconst concatenate = (strings) => {\\n\", \"canonical_solution\": \"  return strings.join('');\\n}\\n\\n\", \"test\": \"const testConcatenate = () => {\\n  console.assert(concatenate([]) === '')\\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\\n}\\n\\ntestConcatenate()\\n\", \"declaration\": \"\\nconst concatenate = (strings) => {\\n\", \"example_test\": \"const testConcatenate = () => {\\n  console.assert(concatenate([]) === '')\\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\\n}\\ntestConcatenate()\\n\"}\n{\"task_id\": \"JavaScript/29\", \"prompt\": \"/* Filter an input list of strings only for ones that start with a given prefix.\\n  >>> filterByPrefix([], 'a')\\n  []\\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\\n  ['abc', 'array']\\n  */\\nconst filterByPrefix = (strings, prefix) => {\\n\", \"canonical_solution\": \"  return strings.filter(x => x.startsWith(prefix));\\n}\\n\\n\", \"test\": \"const testFilterByPrefix = () => {\\n  console.assert(\\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\\n  )\\n}\\n\\ntestFilterByPrefix()\\n\", \"declaration\": \"\\nconst filterByPrefix = (strings, prefix) => {\\n\", \"example_test\": \"const testFilterByPrefix = () => {\\n  console.assert(\\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\\n  )\\n  console.assert(\\n    JSON.stringify(\\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\\n    ) === JSON.stringify(['abc', 'array'])\\n  )\\n}\\ntestFilterByPrefix()\\n\"}",
        "output": "str",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "2d59b8905d9a2034"
            ]
        ]
    },
    {
        "id": "d7ff3df8b8bca72b",
        "type": "switch",
        "z": "f297cec495c6b8be",
        "name": "",
        "property": "parts.index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "f4f6fa24ca217587"
            ]
        ]
    },
    {
        "id": "4d94c61aec9614a2",
        "type": "inject",
        "z": "f297cec495c6b8be",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "javascript",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "183a83919e31ea2f"
            ]
        ]
    },
    {
        "id": "2d59b8905d9a2034",
        "type": "split",
        "z": "f297cec495c6b8be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "d7ff3df8b8bca72b"
            ]
        ]
    },
    {
        "id": "30bf3f577ffc38e2",
        "type": "catch",
        "z": "f297cec495c6b8be",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 500,
        "y": 280,
        "wires": [
            [
                "1ef19c0f52772c06",
                "0d015472dda60528"
            ]
        ]
    },
    {
        "id": "1ef19c0f52772c06",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "set msg.pass as fail",
        "rules": [
            {
                "t": "set",
                "p": "pass",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1eae1ff8a68266bc",
        "type": "file",
        "z": "f297cec495c6b8be",
        "name": "",
        "filename": "/data/bench.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 940,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a596c13563210cd3",
        "type": "file",
        "z": "f297cec495c6b8be",
        "name": "",
        "filename": "/data/bench.total.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 960,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "75992a64fd9b37f1",
        "type": "debug",
        "z": "f297cec495c6b8be",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 340,
        "wires": []
    },
    {
        "id": "65b9251080cb6b42",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "format bench result",
        "func": "\nconst passes = msg.payload.split('\\n').map((str) => {\n    const [flow, model, pass] = str.split(',')\n    return {flow, model, pass};\n});\n\nconst totalPasses = passes.filter(({pass}) => parseInt(pass)).length\nconst first = passes[0]\nmsg.payload = `${first.flow},${first.model},${totalPasses},${passes.length},${totalPasses/passes.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "a596c13563210cd3",
                "75992a64fd9b37f1"
            ]
        ]
    },
    {
        "id": "ec0b257dab9ab827",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "clone",
        "func": "const clones = []\n\nfor (let i = 0; i < node.outputCount; i++){\n    clones.push(RED.util.cloneMessage(msg))\n}\nclones.forEach((msg, i) => {\n    msg.parts.id = msg.parts.id + \":clone\" + i;\n});\n\nconsole.log('clones?',msg,clones)\n\nreturn clones",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ],
            [
                "355dc2522a499301"
            ],
            [
                "b3dc275d4210ec42"
            ],
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "6ccea9b424e51207",
        "type": "subflow:237429fb2a5a7712",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 600,
        "y": 660,
        "wires": [
            [
                "49f531afe4600028"
            ]
        ]
    },
    {
        "id": "b3dc275d4210ec42",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 520,
        "wires": [
            [
                "32d8cfeb8705d916"
            ]
        ]
    },
    {
        "id": "355dc2522a499301",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "force gpt4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gpt4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "90bfb9ae3c54bda3"
            ]
        ]
    },
    {
        "id": "49f531afe4600028",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f297cec495c6b8be",
        "name": "parse codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json,javascript",
                "type": "str"
            }
        ],
        "x": 610,
        "y": 620,
        "wires": [
            [
                "f98edf899c38d504"
            ]
        ]
    },
    {
        "id": "f98edf899c38d504",
        "type": "function",
        "z": "f297cec495c6b8be",
        "name": "get result",
        "func": "console.log('parsed code:', msg.parts)\nmsg.payload = msg.payload\n                .filter(({type}) => ['javascript'].indexOf(type) >= 0)\n\nif (msg.payload.length > 1){\n  msg.payload = `throw new Error('multiple code-blocks detected in your response, please respond with only the complete solution')`\n  return [null, msg]\n} else if (msg.payload.length < 1){\n  msg.payload = `throw new Error('no code blocks detected, please obey the formatting instructions:')`\n  return [null, msg]\n} else {\n  msg.payload = msg.payload[0].content; \n  return [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "62612d04c38cb1a4"
            ],
            [
                "62612d04c38cb1a4"
            ]
        ]
    },
    {
        "id": "62355c1dd139219c",
        "type": "subflow:f16c08b0c74d892d",
        "z": "f297cec495c6b8be",
        "name": "bundle prompt",
        "x": 300,
        "y": 640,
        "wires": [
            [
                "6ccea9b424e51207"
            ]
        ]
    },
    {
        "id": "fc173ba8f27163d1",
        "type": "subflow:1254546b0e9fb57c",
        "z": "f297cec495c6b8be",
        "name": "wrap format",
        "x": 290,
        "y": 600,
        "wires": [
            [
                "62355c1dd139219c"
            ]
        ]
    },
    {
        "id": "32d8cfeb8705d916",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "f297cec495c6b8be",
        "name": "",
        "x": 290,
        "y": 560,
        "wires": [
            [
                "fc173ba8f27163d1"
            ]
        ]
    },
    {
        "id": "90bfb9ae3c54bda3",
        "type": "change",
        "z": "f297cec495c6b8be",
        "name": "tag smartgpt",
        "rules": [
            {
                "t": "set",
                "p": "flow",
                "pt": "msg",
                "to": "smartgpt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "922590827a20da6a"
            ]
        ]
    },
    {
        "id": "0d015472dda60528",
        "type": "debug",
        "z": "f297cec495c6b8be",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 160,
        "wires": []
    }
]